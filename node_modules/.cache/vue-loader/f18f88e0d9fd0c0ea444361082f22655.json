{"remainingRequest":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jenkins_data/workspace/页面-公证处后台/src/views/issuance/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jenkins_data/workspace/页面-公证处后台/src/views/issuance/index.vue","mtime":1634724784708},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmNvbnN0IHN0YXR1c09wdGlvbnMgPSBbMSwgMiwgMywgNF0KY29uc3Qgc3RhdHVzT3B0aW9uczIgPSBbMCwgMV0KZXhwb3J0IGRlZmF1bHQgewogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBpdGVtOiAwLAogICAgICBkaWFsb2dWaXNpYmxlOiBmYWxzZSwKICAgICAgaW5wdXQ6ICcnLAogICAgICBpbnB1dDI6ICcnLAogICAgICBzZWxlY3Q6ICdhcHBsaWNhbnROYW1lJywKICAgICAgc2VsZWN0MjogJ2FwcGxpY2FudE5hbWUnLAogICAgICBjaGVja0FsbDogdHJ1ZSwKICAgICAgc3RhdHVzZXM6IFt7CiAgICAgICAgbmFtZTogJ+W+hemCruWvhCcsCiAgICAgICAgbGFiZWw6IDEKICAgICAgfSwgewogICAgICAgIG5hbWU6ICflvoXkuIrpl6jlj5bku7YnLAogICAgICAgIGxhYmVsOiAyCiAgICAgIH0sIHsKICAgICAgICBuYW1lOiAn6L+Q6YCB5LitJywKICAgICAgICBsYWJlbDogMwogICAgICB9LCB7CiAgICAgICAgbmFtZTogJ+W3suetvuaUticsCiAgICAgICAgbGFiZWw6IDQKICAgICAgfV0sCiAgICAgIHN0YXR1c2VzMjogW3sKICAgICAgICBuYW1lOiAn5b6F6aKE57qmJywKICAgICAgICBsYWJlbDogMAogICAgICB9LCB7CiAgICAgICAgbmFtZTogJ+W3sumihOe6picsCiAgICAgICAgbGFiZWw6IDEKICAgICAgfV0sCiAgICAgIGNoZWNrZWRTdGF0dXNlczogc3RhdHVzT3B0aW9ucywKICAgICAgY2hlY2tlZFN0YXR1c2VzMjogc3RhdHVzT3B0aW9uczIsCiAgICAgIHNlbGVjdGVkUm93czogW10sCiAgICAgIHNlbGVjdGVkUm93czI6IFt7fV0sCiAgICAgIGlzSW5kZXRlcm1pbmF0ZTogdHJ1ZSwKICAgICAgaXNJbmRldGVybWluYXRlMjogdHJ1ZSwKICAgICAgdGFibGVLZXk6IDAsCiAgICAgIGxpc3Q6IG51bGwsCiAgICAgIGxpc3QyOiBudWxsLAogICAgICBsaXN0TG9hZGluZzogZmFsc2UsCiAgICAgIGxpc3RRdWVyeTogewogICAgICAgIHBhZ2VOdW06IDEsCiAgICAgICAgdXNlclR5cGU6IDEsCiAgICAgICAgc3RhdHVzOiAnJywKICAgICAgICBhcHBsaWNhbnROYW1lOiAnJywKICAgICAgICBvcmRlck51bTogJycsCiAgICAgICAgcmVjZWl2ZU5hbWU6ICcnLAogICAgICAgIHJlY2VpdmVNb2JpbGU6ICcnCiAgICAgIH0sCiAgICAgIGxpc3RRdWVyeTI6IHsKICAgICAgICBwYWdlTnVtOiAxLAogICAgICAgIHVzZXJUeXBlOiAxLAogICAgICAgIHJlY2VpdmVTdGF0dXM6ICcnLAogICAgICAgIGFwcGxpY2FudE5hbWU6ICcnLAogICAgICAgIG9yZGVyTnVtOiAnJywKICAgICAgICByZWNlaXZlTmFtZTogJycsCiAgICAgICAgcmVjZWl2ZU1vYmlsZTogJycKICAgICAgfSwKICAgICAgdG90YWw6IDAsIC8vIOS/oeaBr+adoeaVsAogICAgICB0b3RhbDI6IDAsIC8vIOS/oeaBr+adoeaVsAogICAgICBhY3RpdmVOYW1lOiAnZmlyc3QnLAogICAgICBvZmZsaW5lUmVjZWl2ZToge30sCiAgICAgIG9wdGlvbnM6IFtdLAogICAgICByZWNlaXZlVGltZVRpcHM6IGZhbHNlLAogICAgICByZWNlaXZlTnVtYmVyVGlwczogZmFsc2UsCiAgICAgIHJlY2VpdmVBZGRyZXNzVGlwczogZmFsc2UsCiAgICAgIGVkaXRSZWNlaXZlVGltZTogbnVsbCwKICAgICAgZWRpdFJlY2VpdmVBZGRyZXNzOiBudWxsLAogICAgICBlZGl0UmVjZWl2ZU51bWJlcjogbnVsbAogICAgfQogIH0sCiAgY3JlYXRlZCgpIHsKICAgIHRoaXMuZ2V0TGlzdCgpCiAgICB0aGlzLmdldEFkZHJlc3NMaXN0KCkKICB9LAogIG1ldGhvZHM6IHsKICAgIGhhbmRsZUNoZWNrQWxsQ2hhbmdlKHZhbCkgewogICAgICB0aGlzLmNoZWNrZWRTdGF0dXNlcyA9IHZhbCA/IHN0YXR1c09wdGlvbnMgOiBbXQogICAgICB0aGlzLmlzSW5kZXRlcm1pbmF0ZSA9IGZhbHNlCiAgICAgIHRoaXMuc3RhdHVzQ2hhbmdlKCkKICAgIH0sCiAgICBoYW5kbGVDaGVja0FsbENoYW5nZTIodmFsKSB7CiAgICAgIHRoaXMuY2hlY2tlZFN0YXR1c2VzMiA9IHZhbCA/IHN0YXR1c09wdGlvbnMyIDogW10KICAgICAgdGhpcy5pc0luZGV0ZXJtaW5hdGUyID0gZmFsc2UKICAgICAgdGhpcy5zdGF0dXNDaGFuZ2UyKCkKICAgIH0sCiAgICBoYW5kbGVDaGVja2VkU3RhdHVzZXNDaGFuZ2UodmFsdWUpIHsKICAgICAgY29uc3QgY2hlY2tlZENvdW50ID0gdmFsdWUubGVuZ3RoCiAgICAgIHRoaXMuY2hlY2tBbGwgPSBjaGVja2VkQ291bnQgPT09IHRoaXMuc3RhdHVzZXMubGVuZ3RoCiAgICAgIHRoaXMuaXNJbmRldGVybWluYXRlID0gY2hlY2tlZENvdW50ID4gMCAmJiBjaGVja2VkQ291bnQgPCB0aGlzLnN0YXR1c2VzLmxlbmd0aAogICAgICB0aGlzLnN0YXR1c0NoYW5nZSgpCiAgICB9LAogICAgaGFuZGxlQ2hlY2tlZFN0YXR1c2VzQ2hhbmdlMih2YWx1ZSkgewogICAgICBjb25zdCBjaGVja2VkQ291bnQgPSB2YWx1ZS5sZW5ndGgKICAgICAgdGhpcy5jaGVja0FsbCA9IGNoZWNrZWRDb3VudCA9PT0gdGhpcy5zdGF0dXNlczIubGVuZ3RoCiAgICAgIHRoaXMuaXNJbmRldGVybWluYXRlMiA9IGNoZWNrZWRDb3VudCA+IDAgJiYgY2hlY2tlZENvdW50IDwgdGhpcy5zdGF0dXNlczIubGVuZ3RoCiAgICAgIHRoaXMuc3RhdHVzQ2hhbmdlMigpCiAgICB9LAogICAgZ2V0TGlzdCgpIHsKICAgICAgdGhpcy5saXN0TG9hZGluZyA9IGZhbHNlCiAgICAgIGNvbnN0IHVybCA9ICdvcmcvc2VsZWN0LXNlbmRpbmctY2VydGlmaWNhdGU/cGFnZU51bT0nICsgdGhpcy5saXN0UXVlcnkucGFnZU51bSArICcmdXNlclR5cGU9JyArIHRoaXMubGlzdFF1ZXJ5LnVzZXJUeXBlICsgJyZzdGF0dXM9JyArIHRoaXMubGlzdFF1ZXJ5LnN0YXR1cyArICcmYXBwbGljYW50TmFtZT0nICsgdGhpcy5saXN0UXVlcnkuYXBwbGljYW50TmFtZSArICcmb3JkZXJOdW09JyArIHRoaXMubGlzdFF1ZXJ5Lm9yZGVyTnVtICsgJyZyZWNlaXZlTmFtZT0nICsgdGhpcy5saXN0UXVlcnkucmVjZWl2ZU5hbWUgKyAnJnJlY2VpdmVNb2JpbGU9JyArIHRoaXMubGlzdFF1ZXJ5LnJlY2VpdmVNb2JpbGUgKyAnJwogICAgICB0aGlzLiRheGlvcyh1cmwpLnRoZW4ocmVzID0+IHsKICAgICAgICBpZiAocmVzLnN1Y2Nlc3MgPT0gdHJ1ZSkgewogICAgICAgICAgdGhpcy5saXN0ID0gcmVzLmRhdGEuc2VuZGluZ0NlcnRpZmljYXRlUXVlcnlMaXN0CiAgICAgICAgICB0aGlzLnRvdGFsID0gcmVzLmRhdGEudG90YWwKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcign5Ye66ZSZ5LqG77yBJykKICAgICAgICB9CiAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2UKICAgICAgfSkKICAgIH0sCiAgICBnZXRMaXN0MigpIHsKICAgICAgdGhpcy5saXN0TG9hZGluZyA9IGZhbHNlCiAgICAgIGNvbnN0IHVybCA9ICdvcmcvZ2V0LWFwcGxpY2F0aW9uLXN0YXRpc3RpY3M/cGFnZU51bT0nICsgdGhpcy5saXN0UXVlcnkyLnBhZ2VOdW0gKyAnJnVzZXJUeXBlPScgKyB0aGlzLmxpc3RRdWVyeTIudXNlclR5cGUgKyAnJnJlY2VpdmVTdGF0dXM9JyArIHRoaXMubGlzdFF1ZXJ5Mi5yZWNlaXZlU3RhdHVzICsgJyZhcHBsaWNhbnROYW1lPScgKyB0aGlzLmxpc3RRdWVyeTIuYXBwbGljYW50TmFtZSArICcmb3JkZXJOdW09JyArIHRoaXMubGlzdFF1ZXJ5Mi5vcmRlck51bSArICcmcmVjZWl2ZU5hbWU9JyArIHRoaXMubGlzdFF1ZXJ5Mi5yZWNlaXZlTmFtZSArICcmbW9iaWxlPScgKyB0aGlzLmxpc3RRdWVyeTIucmVjZWl2ZU1vYmlsZSArICcnCiAgICAgIHRoaXMuJGF4aW9zKHVybCwge30sIHsKICAgICAgfSkudGhlbihyZXMgPT4gewogICAgICAgIGlmIChyZXMuc3VjY2VzcyA9PSB0cnVlKSB7CiAgICAgICAgICB0aGlzLmxpc3QyID0gcmVzLmRhdGEub2ZmbGluZUxpY2Vuc2VDb2xsZWN0aW9uUXVlcnlMaXN0CiAgICAgICAgICB0aGlzLnRvdGFsMiA9IHJlcy5kYXRhLnRvdGFsCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ+WHuumUmeS6hu+8gScpCiAgICAgICAgfQogICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlCiAgICAgIH0pCiAgICB9LAogICAgc2VsZWN0TGlzdCgpIHsKICAgICAgaWYgKHRoaXMuc2VsZWN0ID09ICcnKSB7CiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcign6K+36YCJ5oup5p+l6K+i57G75Z6LJykKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmxpc3RRdWVyeS5zdGF0dXMgPSAnJwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jaGVja2VkU3RhdHVzZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIHRoaXMubGlzdFF1ZXJ5LnN0YXR1cyA9IHRoaXMubGlzdFF1ZXJ5LnN0YXR1cyArICcsJyArIHRoaXMuY2hlY2tlZFN0YXR1c2VzW2ldCiAgICAgICAgfQogICAgICAgIHRoaXMubGlzdFF1ZXJ5LnN0YXR1cyA9IHRoaXMubGlzdFF1ZXJ5LnN0YXR1cy5zdWJzdHJpbmcoMSwgdGhpcy5saXN0UXVlcnkuc3RhdHVzLmxlbmd0aCkKICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmxpc3RRdWVyeS5zdGF0dXMpCiAgICAgICAgY29uc3QgdHlwZSA9IHRoaXMuc2VsZWN0CiAgICAgICAgY29uc29sZS5sb2codHlwZSkKICAgICAgICBpZiAodHlwZSA9PSAnYXBwbGljYW50TmFtZScpIHsKICAgICAgICAgIHRoaXMubGlzdFF1ZXJ5LmFwcGxpY2FudE5hbWUgPSB0aGlzLmlucHV0CiAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmxpc3RRdWVyeS5hcHBsaWNhbnROYW1lKQogICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAnb3JkZXJOdW0nKSB7CiAgICAgICAgICB0aGlzLmxpc3RRdWVyeS5vcmRlck51bSA9IHRoaXMuaW5wdXQKICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMubGlzdFF1ZXJ5Lm9yZGVyTnVtKQogICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAncmVjZWl2ZU5hbWUnKSB7CiAgICAgICAgICB0aGlzLmxpc3RRdWVyeS5yZWNlaXZlTmFtZSA9IHRoaXMuaW5wdXQKICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMubGlzdFF1ZXJ5LnJlY2VpdmVOYW1lKQogICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAncmVjZWl2ZU1vYmlsZScpIHsKICAgICAgICAgIHRoaXMubGlzdFF1ZXJ5LnJlY2VpdmVNb2JpbGUgPSB0aGlzLmlucHV0CiAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmxpc3RRdWVyeS5yZWNlaXZlTW9iaWxlKQogICAgICAgIH0KICAgICAgICB0aGlzLmdldExpc3QoKQogICAgICB9CiAgICB9LAogICAgc2VsZWN0TGlzdDIoKSB7CiAgICAgIGlmICh0aGlzLnNlbGVjdDIgPT0gJycpIHsKICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfor7fpgInmi6nmn6Xor6LnsbvlnosnKQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMubGlzdFF1ZXJ5Mi5yZWNlaXZlU3RhdHVzID0gJycKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY2hlY2tlZFN0YXR1c2VzMi5sZW5ndGg7IGkrKykgewogICAgICAgICAgdGhpcy5saXN0UXVlcnkyLnJlY2VpdmVTdGF0dXMgPSB0aGlzLmxpc3RRdWVyeTIucmVjZWl2ZVN0YXR1cyArICcsJyArIHRoaXMuY2hlY2tlZFN0YXR1c2VzMltpXQogICAgICAgIH0KICAgICAgICB0aGlzLmxpc3RRdWVyeTIucmVjZWl2ZVN0YXR1cyA9IHRoaXMubGlzdFF1ZXJ5Mi5yZWNlaXZlU3RhdHVzLnN1YnN0cmluZygxLCB0aGlzLmxpc3RRdWVyeTIucmVjZWl2ZVN0YXR1cy5sZW5ndGgpCiAgICAgICAgY29uc29sZS5sb2codGhpcy5saXN0UXVlcnkyLnJlY2VpdmVTdGF0dXMpCiAgICAgICAgY29uc3QgdHlwZSA9IHRoaXMuc2VsZWN0MgogICAgICAgIGNvbnNvbGUubG9nKHR5cGUpCiAgICAgICAgaWYgKHR5cGUgPT0gJ2FwcGxpY2FudE5hbWUnKSB7CiAgICAgICAgICB0aGlzLmxpc3RRdWVyeTIuYXBwbGljYW50TmFtZSA9IHRoaXMuaW5wdXQyCiAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmxpc3RRdWVyeTIuYXBwbGljYW50TmFtZSkKICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gJ29yZGVyTnVtJykgewogICAgICAgICAgdGhpcy5saXN0UXVlcnkyLm9yZGVyTnVtID0gdGhpcy5pbnB1dDIKICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMubGlzdFF1ZXJ5Mi5vcmRlck51bSkKICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gJ3JlY2VpdmVOYW1lJykgewogICAgICAgICAgdGhpcy5saXN0UXVlcnkyLnJlY2VpdmVOYW1lID0gdGhpcy5pbnB1dDIKICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMubGlzdFF1ZXJ5Mi5yZWNlaXZlTmFtZSkKICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gJ3JlY2VpdmVNb2JpbGUnKSB7CiAgICAgICAgICB0aGlzLmxpc3RRdWVyeTIucmVjZWl2ZU1vYmlsZSA9IHRoaXMuaW5wdXQyCiAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmxpc3RRdWVyeTIucmVjZWl2ZU1vYmlsZSkKICAgICAgICB9CiAgICAgICAgdGhpcy5nZXRMaXN0MigpCiAgICAgIH0KICAgIH0sCiAgICAvLyDmr4/pobXmmL7npLrmnaHmlbDlj5jljJYKICAgIGhhbmRsZVNpemVDaGFuZ2UodmFsKSB7CiAgICAgIHRoaXMubGlzdFF1ZXJ5LnBhZ2VTaXplID0gdmFsCiAgICAgIHRoaXMuZ2V0TGlzdCgpCiAgICB9LAogICAgaGFuZGxlU2l6ZUNoYW5nZTIodmFsKSB7CiAgICAgIHRoaXMubGlzdFF1ZXJ5Mi5wYWdlU2l6ZSA9IHZhbAogICAgICB0aGlzLmdldExpc3QyKCkKICAgIH0sCiAgICBnZXRQYWdpbmF0aW9uTGlzdChlKSB7CiAgICAgIHRoaXMubGlzdFF1ZXJ5LnBhZ2VObyA9IGUKICAgICAgdGhpcy5nZXRMaXN0KCkKICAgIH0sCiAgICBnZXRQYWdpbmF0aW9uTGlzdDIoZSkgewogICAgICB0aGlzLmxpc3RRdWVyeTIucGFnZU5vID0gZQogICAgICB0aGlzLmdldExpc3QyKCkKICAgIH0sCiAgICBoYW5kbGVTZWxlY3Rpb25DaGFuZ2UodmFsKSB7CiAgICAgIGNvbnNvbGUubG9nKHZhbCkKICAgICAgdGhpcy5zZWxlY3RlZFJvd3MgPSB2YWwKICAgICAgY29uc29sZS5sb2codGhpcy5zZWxlY3RlZFJvd3MpCiAgICB9LAogICAgaGFuZGxlU2VsZWN0aW9uQ2hhbmdlMih2YWwpIHsKICAgICAgY29uc29sZS5sb2codmFsKQogICAgICB0aGlzLnNlbGVjdGVkUm93czIgPSB2YWwKICAgIH0sCiAgICBoYW5kbGVDbGljayh0YWIsIGV2ZW50KSB7CiAgICAgIGNvbnNvbGUubG9nKHRoaXMuYWN0aXZlTmFtZSkKICAgICAgaWYgKHRoaXMuYWN0aXZlTmFtZSA9PSAnZmlyc3QnKSB7CiAgICAgICAgdGhpcy5nZXRMaXN0KCkKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmdldExpc3QyKCkKICAgICAgfQogICAgfSwKICAgIGVtYWlsKG9yZGVyTnVtKSB7CiAgICAgIGNvbnNvbGUubG9nKG9yZGVyTnVtKQogICAgICBvcmRlck51bSA9ICInIiArIG9yZGVyTnVtICsgIiciCiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICBuYW1lOiAnbWFpbExpc3QnLAogICAgICAgIHF1ZXJ5OiB7CiAgICAgICAgICBvcmRlck51bTogb3JkZXJOdW0sCiAgICAgICAgICB1c2VyVHlwZTogdGhpcy5saXN0UXVlcnkudXNlclR5cGUKICAgICAgICB9CiAgICAgIH0pCiAgICB9LAogICAgZW1haWxzKCkgewogICAgICBpZiAodGhpcy5zZWxlY3RlZFJvd3MubGVuZ3RoID09IDApIHsKICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfmnKrpgInkuK3ku7vkvZXorqLljZUnKQogICAgICAgIHJldHVybgogICAgICB9CiAgICAgIHZhciBvcmRlck51bSA9ICcnCiAgICAgIHZhciBzZWxlY3QgPSB0cnVlCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zZWxlY3RlZFJvd3MubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFJvd3NbaV0uc3RhdHVzICE9IDEpIHsKICAgICAgICAgIHNlbGVjdCA9IGZhbHNlCiAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfor7fpgInmi6nlvoXpgq7lr4TorqLljZUnKQogICAgICAgICAgcmV0dXJuCiAgICAgICAgfQogICAgICAgIG9yZGVyTnVtID0gb3JkZXJOdW0gKyAnLCcgKyAiJyIgKyB0aGlzLnNlbGVjdGVkUm93c1tpXS5vcmRlck51bSArICInIgogICAgICB9CiAgICAgIG9yZGVyTnVtID0gb3JkZXJOdW0uc3Vic3RyaW5nKDEsIG9yZGVyTnVtLmxlbmd0aCkKICAgICAgY29uc29sZS5sb2cob3JkZXJOdW0pCiAgICAgIGlmIChzZWxlY3QpIHsKICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7CiAgICAgICAgICBuYW1lOiAnbWFpbExpc3QnLAogICAgICAgICAgcXVlcnk6IHsKICAgICAgICAgICAgb3JkZXJOdW06IG9yZGVyTnVtLAogICAgICAgICAgICB1c2VyVHlwZTogdGhpcy5saXN0UXVlcnkudXNlclR5cGUKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICB9CiAgICB9LAogICAgcmVzZXJ2ZShyb3cpIHsKICAgICAgaWYgKHJvdyAhPSBudWxsKSB7CiAgICAgICAgdGhpcy5zZWxlY3RlZFJvd3MyID0gW3t9XQogICAgICAgIHRoaXMuc2VsZWN0ZWRSb3dzMlswXSA9IHJvdwogICAgICB9IGVsc2UgewogICAgICAgIGlmICh0aGlzLnNlbGVjdGVkUm93czJbMF0ubW9iaWxlID09IG51bGwpIHsKICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ+acqumAieS4reS7u+S9leiuouWNlScpCiAgICAgICAgICByZXR1cm4KICAgICAgICB9CiAgICAgIH0KICAgICAgdGhpcy5pdGVtID0gMAogICAgICB0aGlzLmVkaXRSZWNlaXZlTnVtYmVyID0gdGhpcy5zZWxlY3RlZFJvd3MyW3RoaXMuaXRlbV0ucmVjZWl2ZU51bWJlcgogICAgICB0aGlzLmVkaXRSZWNlaXZlQWRkcmVzcyA9IG51bGwKICAgICAgdGhpcy5lZGl0UmVjZWl2ZVRpbWUgPSBudWxsCiAgICAgIHRoaXMucmVjZWl2ZVRpbWVUaXBzID0gZmFsc2UKICAgICAgdGhpcy5yZWNlaXZlTnVtYmVyVGlwcyA9IGZhbHNlCiAgICAgIHRoaXMucmVjZWl2ZUFkZHJlc3NUaXBzID0gZmFsc2UKICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gdHJ1ZQogICAgfSwKICAgIGdldEFkZHJlc3NMaXN0KCkgewogICAgICBjb25zdCB1cmwgPSAnb3JnL29yZy1vZmZpY2UnCiAgICAgIHRoaXMuJGF4aW9zKHVybCwge30sIHsKICAgICAgfSkudGhlbihyZXMgPT4gewogICAgICAgIGlmIChyZXMuc3VjY2VzcyA9PSB0cnVlKSB7CiAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLm9wdGlvbnMpCiAgICAgICAgICB2YXIgcmVzdWx0ID0gcmVzLmRhdGEKICAgICAgICAgIGZvciAodmFyIGkgaW4gcmVzdWx0KSB7CiAgICAgICAgICAgIHZhciBvcHRpb24gPSB7IGxhYmVsOiByZXN1bHRbaV0ucG9pbnROYW1lLCB2YWx1ZTogcmVzdWx0W2ldLmFkZHJlc3MgfQogICAgICAgICAgICB0aGlzLm9wdGlvbnNbaV0gPSBvcHRpb24KICAgICAgICAgIH0KICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMub3B0aW9ucykKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcign5Ye66ZSZ5LqG77yBJykKICAgICAgICB9CiAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2UKICAgICAgfSkKICAgIH0sCiAgICBjb25maXJtUmVzZXJ2ZSgpIHsKICAgICAgbGV0IGdvTm90Q29uZmlybSA9IGZhbHNlCiAgICAgIGxldCBhZGRyZXNzRWNobyA9IGZhbHNlCiAgICAgIHRoaXMub2ZmbGluZVJlY2VpdmUucmVjZWl2ZU51bWJlciA9IHRoaXMuZWRpdFJlY2VpdmVOdW1iZXIKICAgICAgdGhpcy5vZmZsaW5lUmVjZWl2ZS5yZWNlaXZlVGltZSA9IHRoaXMuZWRpdFJlY2VpdmVUaW1lCiAgICAgIHRoaXMub2ZmbGluZVJlY2VpdmUucmVjZWl2ZUFkZHJlc3MgPSB0aGlzLmVkaXRSZWNlaXZlQWRkcmVzcwogICAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlY2VpdmVTcGFuJykpIHsKICAgICAgICBhZGRyZXNzRWNobyA9IHRydWUKICAgICAgICBjb25zb2xlLmxvZygn5Zue5pi+5LqG5Yqe6K+B54K5JykKICAgICAgfQogICAgICBpZiAodGhpcy5vZmZsaW5lUmVjZWl2ZS5yZWNlaXZlVGltZSA9PSBudWxsIHx8IHRoaXMub2ZmbGluZVJlY2VpdmUucmVjZWl2ZVRpbWUgPT0gJycpIHsKICAgICAgICB0aGlzLnJlY2VpdmVUaW1lVGlwcyA9IHRydWUKICAgICAgICBnb05vdENvbmZpcm0gPSB0cnVlCiAgICAgIH0KICAgICAgaWYgKHRoaXMub2ZmbGluZVJlY2VpdmUucmVjZWl2ZU51bWJlciA9PSBudWxsIHx8IHRoaXMub2ZmbGluZVJlY2VpdmUucmVjZWl2ZU51bWJlciA9PSAnJykgewogICAgICAgIHRoaXMucmVjZWl2ZU51bWJlclRpcHMgPSB0cnVlCiAgICAgICAgZ29Ob3RDb25maXJtID0gdHJ1ZQogICAgICB9CiAgICAgIGlmICghYWRkcmVzc0VjaG8gJiYgKHRoaXMub2ZmbGluZVJlY2VpdmUucmVjZWl2ZUFkZHJlc3MgPT0gbnVsbCB8fCB0aGlzLm9mZmxpbmVSZWNlaXZlLnJlY2VpdmVBZGRyZXNzID09ICcnKSkgewogICAgICAgIHRoaXMucmVjZWl2ZUFkZHJlc3NUaXBzID0gdHJ1ZQogICAgICAgIGdvTm90Q29uZmlybSA9IHRydWUKICAgICAgfQogICAgICBpZiAoZ29Ob3RDb25maXJtKSB7CiAgICAgICAgcmV0dXJuCiAgICAgIH0KICAgICAgaWYgKCFhZGRyZXNzRWNobykgewogICAgICAgIGZvciAodmFyIGkgaW4gdGhpcy5vcHRpb25zKSB7CiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zW2ldLnZhbHVlID09IHRoaXMub2ZmbGluZVJlY2VpdmUucmVjZWl2ZUFkZHJlc3MpIHsKICAgICAgICAgICAgdGhpcy5vZmZsaW5lUmVjZWl2ZS5yZWNlaXZlUG9pbnROYW1lID0gdGhpcy5vcHRpb25zW2ldLmxhYmVsCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHRoaXMuJGNvbmZpcm0oJ+ehruWumumihOe6puWQju+8jOWwhuS8muaKiumihOe6puS/oeaBr+efreaBr+WPkemAgee7memihuivgeS6uu+8jOivt+mXruimgee7p+e7reWQl++8nycsICfmj5DnpLonLCB7CiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICfnoa7lrponLAogICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICflj5bmtognCiAgICAgIH0pLnRoZW4oKCkgPT4gewogICAgICAgIHRoaXMub2ZmbGluZVJlY2VpdmUubW9iaWxlID0gdGhpcy5zZWxlY3RlZFJvd3MyW3RoaXMuaXRlbV0ubW9iaWxlCiAgICAgICAgdGhpcy5vZmZsaW5lUmVjZWl2ZS5vcmRlck51bSA9IHRoaXMuc2VsZWN0ZWRSb3dzMlt0aGlzLml0ZW1dLm9yZGVyTnVtCiAgICAgICAgdGhpcy5vZmZsaW5lUmVjZWl2ZS5wcm9kTmFtZSA9IHRoaXMuc2VsZWN0ZWRSb3dzMlt0aGlzLml0ZW1dLnByb2ROYW1lCiAgICAgICAgY29uc29sZS5sb2codGhpcy5vZmZsaW5lUmVjZWl2ZSkKICAgICAgICBjb25zdCB1cmwgPSAnb3JnL2FwcG9pbnRtZW50LXRpbWUnCiAgICAgICAgdGhpcy4kYXhpb3ModXJsLCB0aGlzLm9mZmxpbmVSZWNlaXZlLCB7CiAgICAgICAgICBtZXRob2Q6ICdwdXQnCiAgICAgICAgfSkudGhlbihyZXMgPT4gewogICAgICAgICAgaWYgKHJlcy5zdWNjZXNzID09IHRydWUpIHsKICAgICAgICAgICAgdGhpcy4kbWVzc2FnZS5zdWNjZXNzKCfpooTnuqbmiJDlip/vvIEnKQogICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFJvd3MyLmxlbmd0aCA9PSAxKSB7CiAgICAgICAgICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gZmFsc2UKICAgICAgICAgICAgICB0aGlzLmdldExpc3QyKCkKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0aGlzLm9mZmxpbmVSZWNlaXZlLnJlY2VpdmVUaW1lID0gJycKICAgICAgICAgICAgICB0aGlzLm9mZmxpbmVSZWNlaXZlLnJlY2VpdmVOdW1iZXIgPSAnJwogICAgICAgICAgICAgIHRoaXMub2ZmbGluZVJlY2VpdmUucmVjZWl2ZUFkZHJlc3MgPSAnJwogICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRSb3dzMi5zcGxpY2UodGhpcy5pdGVtLCAxKQogICAgICAgICAgICAgIGlmICh0aGlzLml0ZW0gPT0gdGhpcy5zZWxlY3RlZFJvd3MyLmxlbmd0aCkgewogICAgICAgICAgICAgICAgaXRlbSA9IDAKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ+WHuumUmeS6hu+8gScpCiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZQogICAgICAgIH0pCiAgICAgIH0pLmNhdGNoKCgpID0+IHsKICAgICAgICB0aGlzLiRtZXNzYWdlKHsKICAgICAgICAgIHR5cGU6ICdpbmZvJywKICAgICAgICAgIG1lc3NhZ2U6ICflt7Llj5bmtojpooTnuqYnCiAgICAgICAgfSkKICAgICAgfSkKICAgIH0sCiAgICByZWNlaXZlVGltZUNoYW5nZSgpIHsKICAgICAgaWYgKHRoaXMuZWRpdFJlY2VpdmVUaW1lICE9ICcnKSB7CiAgICAgICAgdGhpcy5yZWNlaXZlVGltZVRpcHMgPSBmYWxzZQogICAgICB9CiAgICB9LAogICAgcmVjZWl2ZU51bWJlckNoYW5nZSgpIHsKICAgICAgaWYgKHRoaXMuZWRpdFJlY2VpdmVOdW1iZXIgIT0gJycpIHsKICAgICAgICB0aGlzLnJlY2VpdmVOdW1iZXJUaXBzID0gZmFsc2UKICAgICAgfQogICAgfSwKICAgIHJlY2VpdmVBZGRyZXNzQ2hhbmdlKCkgewogICAgICBpZiAodGhpcy5lZGl0UmVjZWl2ZUFkZHJlc3MgIT0gJycpIHsKICAgICAgICB0aGlzLnJlY2VpdmVBZGRyZXNzVGlwcyA9IGZhbHNlCiAgICAgIH0KICAgIH0sCiAgICBwcmV2aW91cygpIHsKICAgICAgdGhpcy5pdGVtID0gdGhpcy5pdGVtIC0gMQogICAgICB0aGlzLm9mZmxpbmVSZWNlaXZlID0ge30KICAgIH0sCiAgICBuZXh0KCkgewogICAgICB0aGlzLml0ZW0gPSB0aGlzLml0ZW0gKyAxCiAgICAgIHRoaXMub2ZmbGluZVJlY2VpdmUgPSB7fQogICAgfSwKICAgIGdvSW5mbyhvcmRlck51bSkgewogICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7CiAgICAgICAgbmFtZTogJ2V4cHJlc3NJbmZvJywKICAgICAgICBxdWVyeTogewogICAgICAgICAgb3JkZXJOdW06IG9yZGVyTnVtCiAgICAgICAgfQogICAgICB9KQogICAgfSwKICAgIHN0YXR1c0NoYW5nZSgpIHsKICAgICAgaWYgKHRoaXMuY2hlY2tlZFN0YXR1c2VzLmxlbmd0aCA9PSAwKSB7CiAgICAgICAgdGhpcy5saXN0ID0gW10KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmxpc3RRdWVyeS5zdGF0dXMgPSAnJwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jaGVja2VkU3RhdHVzZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIHRoaXMubGlzdFF1ZXJ5LnN0YXR1cyA9IHRoaXMubGlzdFF1ZXJ5LnN0YXR1cyArICcsJyArIHRoaXMuY2hlY2tlZFN0YXR1c2VzW2ldCiAgICAgICAgfQogICAgICAgIHRoaXMubGlzdFF1ZXJ5LnN0YXR1cyA9IHRoaXMubGlzdFF1ZXJ5LnN0YXR1cy5zdWJzdHJpbmcoMSwgdGhpcy5saXN0UXVlcnkuc3RhdHVzLmxlbmd0aCkKICAgICAgICB0aGlzLmdldExpc3QoKQogICAgICB9CiAgICB9LAogICAgc3RhdHVzQ2hhbmdlMigpIHsKICAgICAgaWYgKHRoaXMuY2hlY2tlZFN0YXR1c2VzMi5sZW5ndGggPT0gMCkgewogICAgICAgIHRoaXMubGlzdDIgPSBbXQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMubGlzdFF1ZXJ5Mi5yZWNlaXZlU3RhdHVzID0gJycKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY2hlY2tlZFN0YXR1c2VzMi5sZW5ndGg7IGkrKykgewogICAgICAgICAgdGhpcy5saXN0UXVlcnkyLnJlY2VpdmVTdGF0dXMgPSB0aGlzLmxpc3RRdWVyeTIucmVjZWl2ZVN0YXR1cyArICcsJyArIHRoaXMuY2hlY2tlZFN0YXR1c2VzMltpXQogICAgICAgIH0KICAgICAgICB0aGlzLmxpc3RRdWVyeTIucmVjZWl2ZVN0YXR1cyA9IHRoaXMubGlzdFF1ZXJ5Mi5yZWNlaXZlU3RhdHVzLnN1YnN0cmluZygxLCB0aGlzLmxpc3RRdWVyeTIucmVjZWl2ZVN0YXR1cy5sZW5ndGgpCiAgICAgICAgdGhpcy5nZXRMaXN0MigpCiAgICAgIH0KICAgIH0sCiAgICBvcmRlckRldGFpbChvcmRlcklkLCBvcmRlck51bSkgewogICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7CiAgICAgICAgbmFtZTogJ2RldGFpbHNPcmRlcicsCiAgICAgICAgcXVlcnk6IHsgb3JkZXJJZDogb3JkZXJJZCwgb3JkZXJOdW06IG9yZGVyTnVtIH0KICAgICAgfSkKICAgIH0KICB9Cn0K"},null]}