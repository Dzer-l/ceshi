{"remainingRequest":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/thread-loader/dist/cjs.js!/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/home/jenkins_data/workspace/页面-公证处后台/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jenkins_data/workspace/页面-公证处后台/src/components/entryTab/addOrder.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jenkins_data/workspace/页面-公证处后台/src/components/entryTab/addOrder.vue","mtime":1634724784693},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgeyBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IH0ga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9CgpmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSAidW5kZWZpbmVkIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1siQEBpdGVyYXRvciJdOyBpZiAoIWl0KSB7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09ICJudW1iZXIiKSB7IGlmIChpdCkgbyA9IGl0OyB2YXIgaSA9IDA7IHZhciBGID0gZnVuY3Rpb24gRigpIHt9OyByZXR1cm4geyBzOiBGLCBuOiBmdW5jdGlvbiBuKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9LCBlOiBmdW5jdGlvbiBlKF9lKSB7IHRocm93IF9lOyB9LCBmOiBGIH07IH0gdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpOyB9IHZhciBub3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgZGlkRXJyID0gZmFsc2UsIGVycjsgcmV0dXJuIHsgczogZnVuY3Rpb24gcygpIHsgaXQgPSBpdC5jYWxsKG8pOyB9LCBuOiBmdW5jdGlvbiBuKCkgeyB2YXIgc3RlcCA9IGl0Lm5leHQoKTsgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTsgcmV0dXJuIHN0ZXA7IH0sIGU6IGZ1bmN0aW9uIGUoX2UyKSB7IGRpZEVyciA9IHRydWU7IGVyciA9IF9lMjsgfSwgZjogZnVuY3Rpb24gZigpIHsgdHJ5IHsgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0LnJldHVybiAhPSBudWxsKSBpdC5yZXR1cm4oKTsgfSBmaW5hbGx5IHsgaWYgKGRpZEVycikgdGhyb3cgZXJyOyB9IH0gfTsgfQoKZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSAic3RyaW5nIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09ICJPYmplY3QiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSAiTWFwIiB8fCBuID09PSAiU2V0IikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSAiQXJndW1lbnRzIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH0KCmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfQoKaW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiL2hvbWUvamVua2luc19kYXRhL3dvcmtzcGFjZS9cdTk4NzVcdTk3NjItXHU1MTZDXHU4QkMxXHU1OTA0XHU1NDBFXHU1M0YwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvciI7CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfQoKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IHsgb3JnSG90Tm90YXJ5VG9wTGlzdCwgb3JnTm90YXJ5Rmlyc3RDaGFyYWN0ZXJNYXBzLCBjZXJ0aWZpY2F0ZVR5cGUsIHByb2R1Y3Rpb25Sb2xlQ2VydE1hdGVyaWFsLCBzaW5nbGVGaWxlVXBsb2FkUmVtb3RlLCByZW1vdGVWaWRlb0FjY2VwdGFuY2VPcmRlclN1Ym1pdCwgb2NySWRDYXJkIH0gZnJvbSAnLi4vLi4vYXBpL2FkZE9yZGVyJzsKaW1wb3J0IHsgZmlsdGVyQ2FyZFR5cGUgfSBmcm9tICcuLi8uLi9maWx0ZXJzL2luZGV4JzsKCnZhciBtb21lbnQgPSByZXF1aXJlKCJtb21lbnQiKTsKCmV4cG9ydCBkZWZhdWx0IHsKICBwcm9wczogWyd2aXNpYmxlJ10sCiAgZmlsdGVyczogewogICAgZmlsdGVyR2VuZGVyOiBmdW5jdGlvbiBmaWx0ZXJHZW5kZXIodmFsKSB7CiAgICAgIHZhciBnZW5kZXIgPSB7CiAgICAgICAgMTogIueUtyIsCiAgICAgICAgMjogIuWlsyIKICAgICAgfTsKICAgICAgcmV0dXJuIGdlbmRlclt2YWxdOwogICAgfSwKICAgIGZpbHRlckNhcmRUeXBlOiBmaWx0ZXJDYXJkVHlwZQogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHNlbGVjdFZhbHVlOiAiIiwKICAgICAgLy8g6YCJ5Lit55qE5YWs6K+B5LqL6aG5CiAgICAgIG5vdGFyeUNvZGU6ICIiLAogICAgICAvLyDlhazor4HkuovpobkKICAgICAgcHJvcG9zZXJMaXN0OiBbXSwKICAgICAgLy8g55Sz6K+35Lq65YiX6KGoCiAgICAgIHByb3Bvc2VyVmlzaWJsZTogZmFsc2UsCiAgICAgIHByb3Bvc2VyRm9ybTogewogICAgICAgIHJlYWxOYW1lOiAiIiwKICAgICAgICBnZW5kZXI6ICIiLAogICAgICAgIGJpcnRoZGF5OiAiIiwKICAgICAgICBjYXJkVHlwZTogIiIsCiAgICAgICAgY2FyZE51bTogIiIsCiAgICAgICAgZXhwaXJ5RGF0ZTogIiIsCiAgICAgICAgbW9iaWxlOiAiIgogICAgICB9LAogICAgICBwcm9wb3NlclJ1bGVzOiB7CiAgICAgICAgcmVhbE5hbWU6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICfor7fovpPlhaXlp5PlkI0nLAogICAgICAgICAgdHJpZ2dlcjogWyJibHVyIiwgImNoYW5nZSJdCiAgICAgICAgfSAvLyB7IG1pbjogMywgbWF4OiA1LCBtZXNzYWdlOiAn6ZW/5bqm5ZyoIDMg5YiwIDUg5Liq5a2X56ymJywgdHJpZ2dlcjogJ2JsdXInIH0KICAgICAgICBdLAogICAgICAgIGdlbmRlcjogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+mAieaLqeaAp+WIqycsCiAgICAgICAgICB0cmlnZ2VyOiAiYmx1ciIKICAgICAgICB9XSwKICAgICAgICBiaXJ0aGRheTogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+mAieaLqeWHuueUn+aXpeacnycsCiAgICAgICAgICB0cmlnZ2VyOiAiYmx1ciIKICAgICAgICB9XSwKICAgICAgICBjYXJkVHlwZTogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+mAieaLqeivgeS7tuexu+WeiycsCiAgICAgICAgICB0cmlnZ2VyOiAiYmx1ciIKICAgICAgICB9XSwKICAgICAgICBjYXJkTnVtOiBbewogICAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgICBtZXNzYWdlOiAn6K+36L6T5YWl6K+B5Lu25Y+356CBJywKICAgICAgICAgIHRyaWdnZXI6IFsiYmx1ciIsICJjaGFuZ2UiXQogICAgICAgIH1dLAogICAgICAgIGV4cGlyeURhdGU6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICfor7fpgInmi6nor4Hku7bmnInmlYjml6XmnJ8nLAogICAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgICAgfV0sCiAgICAgICAgbW9iaWxlOiBbewogICAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgICBtZXNzYWdlOiAn6K+36L6T5YWl55Sz6K+35Lq65omL5py65Y+3JywKICAgICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICAgIH0sIC8vIHsgcGF0dGVybjogL15bMV1bMy05XVswLTldezl9JC8sIG1lc3NhZ2U6ICfor7fovpPlhaXmraPnoa7nmoTmiYvmnLrlj7cnLCB0cmlnZ2VyOiAnYmx1cicgfQogICAgICAgIHsKICAgICAgICAgIHBhdHRlcm46IC9eWzAtOV0qJC8sCiAgICAgICAgICBtZXNzYWdlOiAn6K+36L6T5YWl5q2j56Gu55qE5omL5py65Y+3JywKICAgICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICAgIH1dCiAgICAgIH0sCiAgICAgIGZpbGVMaXN0OiBbXSwKICAgICAgLy8g5LiK5Lyg5oiQ5Yqf55qE5paH5Lu25YiX6KGoCiAgICAgIG9yZ0lkOiAiIiwKICAgICAgbm90YXJpemVkRXZlbnRMaXN0OiBbXSwKICAgICAgLy8g5YWs6K+B5LqL6aG55YiX6KGoCiAgICAgIGFjdGl2ZU5hbWU6ICJmaXJzdCIsCiAgICAgIC8vIOWFrOivgeS6i+mhueWIl+ihqOa/gOa0u3RhYgogICAgICBsYXN0QWN0aXZlOiAiIiwKICAgICAgLy8g5LiK5LiA5Liq6YCJ5Lit55qEdGFiCiAgICAgIGNhcmRPcHRpb25zOiBbXSwKICAgICAgLy8g6K+B5Lu25YiX6KGoCiAgICAgIG5lZWRVcGxvYWRMaXN0OiBbXSwKICAgICAgLy8g6ZyA6KaB5LiK5Lyg55qE6K+B5Lu257G75Z6LCiAgICAgIGFjdGlvbjogIiIsCiAgICAgIC8vIOagh+iusOa3u+WKoC/nvJbovpEKICAgICAgYWN0aW9uSW5kZXg6ICIiLAogICAgICAvLyDnlLPor7fkurppbmRleAogICAgICBuZWVkRXhwaXJ5RGF0ZTogZmFsc2UsCiAgICAgIC8vIOmcgOimgei/h+acn+aXtumXtAogICAgICBzZWxlY3RDYXJkVHlwZTogIiIsCiAgICAgIGJhY2t1cEl0ZW06IHt9CiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIHRleHRDb21wdXRlZDogZnVuY3Rpb24gdGV4dENvbXB1dGVkKCkgewogICAgICByZXR1cm4gdGhpcy5hY3Rpb24gPT09ICJlZGl0IiA/ICLnvJbovpHnlLPor7fkuroiIDogIua3u+WKoOeUs+ivt+S6uiI7CiAgICB9CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdGhpcy5vcmdJZCA9IEpTT04ucGFyc2Uoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgib3JnX2lkIikpOwogICAgdGhpcy5nZXROb3RhcnlMaXN0KCk7CiAgICB0aGlzLmdldENlcnRpZmljYXRlVHlwZSgpOwogIH0sCiAgbWV0aG9kczogewogICAgLy8g6I635Y+W5YWs6K+B5LqL6aG55YiX6KGoCiAgICBnZXROb3RhcnlMaXN0OiBmdW5jdGlvbiBnZXROb3RhcnlMaXN0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIHJlcywgcmV0LCBub3RhcnlMaXN0LCBrZXk7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIG9yZ0hvdE5vdGFyeVRvcExpc3QoX3RoaXMub3JnSWQpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICByZXMgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgICAgIGlmIChyZXMuc3VjY2VzcyAmJiByZXMuZGF0YSkgewogICAgICAgICAgICAgICAgICBfdGhpcy5ub3Rhcml6ZWRFdmVudExpc3QucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgdGFic19sYWJlbDogJ+eDremXqCcsCiAgICAgICAgICAgICAgICAgICAgdGFic19uYW1lOiAnZmlyc3QnLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbl9saXN0OiByZXMuZGF0YQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiBvcmdOb3RhcnlGaXJzdENoYXJhY3Rlck1hcHMoX3RoaXMub3JnSWQpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICByZXQgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgICAgIGlmIChyZXQuc3VjY2VzcyAmJiByZXQuZGF0YSkgewogICAgICAgICAgICAgICAgICBub3RhcnlMaXN0ID0gcmV0LmRhdGE7CgogICAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiBub3RhcnlMaXN0KSB7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMubm90YXJpemVkRXZlbnRMaXN0LnB1c2goewogICAgICAgICAgICAgICAgICAgICAgdGFic19sYWJlbDoga2V5LAogICAgICAgICAgICAgICAgICAgICAgdGFic19uYW1lOiBrZXksCiAgICAgICAgICAgICAgICAgICAgICBvcHRpb25fbGlzdDogSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShub3RhcnlMaXN0W2tleV0pKQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICBfdGhpcy5ub3Rhcml6ZWRFdmVudExpc3QucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgdGFic19sYWJlbDogJyMnLAogICAgICAgICAgICAgICAgICAgIHRhYnNfbmFtZTogJ2xhc3QnLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbl9saXN0OiBbXQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIHNlbGVjdCDov4fmu6TlmagKICAgIGRhdGFGaWx0ZXI6IGZ1bmN0aW9uIGRhdGFGaWx0ZXIodmFsKSB7CiAgICAgIHZhciBmaWx0cmF0aW9uQXJyYXkgPSBbXTsKCiAgICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLm5vdGFyaXplZEV2ZW50TGlzdCksCiAgICAgICAgICBfc3RlcDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBfeCA9IF9zdGVwLnZhbHVlOwoKICAgICAgICAgIGlmIChfeC50YWJzX2xhYmVsID09PSAnIycpIHsKICAgICAgICAgICAgX3gub3B0aW9uX2xpc3QubGVuZ3RoID0gMDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvci5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yLmYoKTsKICAgICAgfQoKICAgICAgaWYgKHZhbCAhPT0gJycpIHsKICAgICAgICB0aGlzLmFjdGl2ZU5hbWUgPSAnbGFzdCc7CgogICAgICAgIHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5ub3Rhcml6ZWRFdmVudExpc3QpLAogICAgICAgICAgICBfc3RlcDI7CgogICAgICAgIHRyeSB7CiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykgewogICAgICAgICAgICB2YXIgaSA9IF9zdGVwMi52YWx1ZTsKCiAgICAgICAgICAgIGlmIChpLnRhYnNfbGFiZWwgIT09ICfng63pl6gnKSB7CiAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvcjQgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihpLm9wdGlvbl9saXN0KSwKICAgICAgICAgICAgICAgICAgX3N0ZXA0OwoKICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgZm9yIChfaXRlcmF0b3I0LnMoKTsgIShfc3RlcDQgPSBfaXRlcmF0b3I0Lm4oKSkuZG9uZTspIHsKICAgICAgICAgICAgICAgICAgdmFyIGogPSBfc3RlcDQudmFsdWU7CgogICAgICAgICAgICAgICAgICBpZiAoai5ub3RhcnlOYW1lLmluY2x1ZGVzKHZhbCkpIHsKICAgICAgICAgICAgICAgICAgICBmaWx0cmF0aW9uQXJyYXkucHVzaChqKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgICAgX2l0ZXJhdG9yNC5lKGVycik7CiAgICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgIF9pdGVyYXRvcjQuZigpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgX2l0ZXJhdG9yMi5lKGVycik7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIF9pdGVyYXRvcjIuZigpOwogICAgICAgIH0KCiAgICAgICAgdmFyIF9pdGVyYXRvcjMgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLm5vdGFyaXplZEV2ZW50TGlzdCksCiAgICAgICAgICAgIF9zdGVwMzsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgIHZhciB4ID0gX3N0ZXAzLnZhbHVlOwoKICAgICAgICAgICAgaWYgKHgudGFic19sYWJlbCA9PT0gJyMnKSB7CiAgICAgICAgICAgICAgeC5vcHRpb25fbGlzdCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZmlsdHJhdGlvbkFycmF5KSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgIF9pdGVyYXRvcjMuZShlcnIpOwogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICBfaXRlcmF0b3IzLmYoKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5hY3RpdmVOYW1lID0gdGhpcy5sYXN0QWN0aXZlID8gdGhpcy5sYXN0QWN0aXZlIDogJ2ZpcnN0JzsKICAgICAgfQogICAgfSwKICAgIHRhYnNDaGFuZ2U6IGZ1bmN0aW9uIHRhYnNDaGFuZ2UodGFiLCBldmVudCkgewogICAgICB0aGlzLmxhc3RBY3RpdmUgPSB0YWIubGFiZWw7CiAgICB9LAogICAgLy8g6I635Y+W6K+B5Lu257G75Z6L5YiX6KGoCiAgICBnZXRDZXJ0aWZpY2F0ZVR5cGU6IGZ1bmN0aW9uIGdldENlcnRpZmljYXRlVHlwZSgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyIHJlczsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBjZXJ0aWZpY2F0ZVR5cGUoewogICAgICAgICAgICAgICAgICBwcm9kQ29kZTogIjEwMDEiCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQyLnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKHJlcy5zdWNjZXNzICYmIHJlcy5kYXRhKSB7CiAgICAgICAgICAgICAgICAgIF90aGlzMi5jYXJkT3B0aW9ucyA9IHJlcy5kYXRhOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyDliIfmjaLor4Hku7bnsbvlnosKICAgIGNoYW5nZUNhcmRUeXBlOiBmdW5jdGlvbiBjaGFuZ2VDYXJkVHlwZSgpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICAgICAgdmFyIHNlbGVjdENhcmRUeXBlLCBjYXJkSWQsIHJlcywgbmVlZERvdWJsZTsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHNlbGVjdENhcmRUeXBlID0gX3RoaXMzLmNhcmRPcHRpb25zLmZpbmQoZnVuY3Rpb24gKGkpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGkuY2VydENvZGUgPT09IF90aGlzMy5wcm9wb3NlckZvcm0uY2FyZFR5cGU7CiAgICAgICAgICAgICAgICB9KTsgLy8g5Y+w5rm+5bGF5rCR5p2l5b6A5aSn6ZmG6YCa6KGM6K+B5re75Yqg5pyJ5pWI5pyfIDIxMDkyNAoKICAgICAgICAgICAgICAgIGlmIChzZWxlY3RDYXJkVHlwZS5jZXJ0Q29kZSA9PT0gIjExOSIpIHsKICAgICAgICAgICAgICAgICAgc2VsZWN0Q2FyZFR5cGUubmVlZEV4cGlyeURhdGUgPSAxOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF90aGlzMy5wcm9wb3NlckZvcm0uZXhwaXJ5RGF0ZSA9ICIiOwogICAgICAgICAgICAgICAgX3RoaXMzLnNlbGVjdENhcmRUeXBlID0gc2VsZWN0Q2FyZFR5cGU7CiAgICAgICAgICAgICAgICBfdGhpczMubmVlZEV4cGlyeURhdGUgPSAhIXNlbGVjdENhcmRUeXBlLm5lZWRFeHBpcnlEYXRlOwogICAgICAgICAgICAgICAgY2FyZElkID0gc2VsZWN0Q2FyZFR5cGUuaWQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDg7CiAgICAgICAgICAgICAgICByZXR1cm4gcHJvZHVjdGlvblJvbGVDZXJ0TWF0ZXJpYWwoewogICAgICAgICAgICAgICAgICBvcmdQcm9kdWN0aW9uUm9sZUNlcnRJZDogY2FyZElkCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQzLnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKHJlcy5zdWNjZXNzICYmIHJlcy5kYXRhKSB7CiAgICAgICAgICAgICAgICAgIG5lZWREb3VibGUgPSBbJzExOCcsICcxMTknLCAnMTMwJywgJzEzMSddOwogICAgICAgICAgICAgICAgICByZXMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkgewogICAgICAgICAgICAgICAgICAgIGl0ZW0uaW1hZ2VVcmwgPSAiIjsKICAgICAgICAgICAgICAgICAgICBpdGVtLnByb3Bvc2VyTWF0ZXJpYWwgPSB7fTsKICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICBpZiAobmVlZERvdWJsZS5pbmNsdWRlcyhzZWxlY3RDYXJkVHlwZS5jZXJ0Q29kZSkpIHsKICAgICAgICAgICAgICAgICAgICByZXMuZGF0YS5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICJpZCI6IDU5NywKICAgICAgICAgICAgICAgICAgICAgICJvcmdNYXRlcmlhbElkIjogMTM0MiwKICAgICAgICAgICAgICAgICAgICAgICJvcmdQcm9kdWN0aW9uUm9sZUNlcnRJZCI6IDI1NywKICAgICAgICAgICAgICAgICAgICAgICJuZWVkU3RhdHVzIjogMSwKICAgICAgICAgICAgICAgICAgICAgICJtYXRlcmlhbENvZGUiOiAiMTAwNiIsCiAgICAgICAgICAgICAgICAgICAgICAibWF0ZXJpYWxOYW1lIjogIumAmuihjOivge+8iOato+mdoueFpyvlj43pnaLnhafvvIkiLAogICAgICAgICAgICAgICAgICAgICAgaW1hZ2VVcmw6ICIiLAogICAgICAgICAgICAgICAgICAgICAgcHJvcG9zZXJNYXRlcmlhbDoge30KICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgX3RoaXMzLm5lZWRVcGxvYWRMaXN0ID0gcmVzLmRhdGE7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyDkv53lrZjorqLljZUKICAgIGhhbmRsZUFkZE9yZGVyOiBmdW5jdGlvbiBoYW5kbGVBZGRPcmRlcigpIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgICAgdmFyIGRhdGEsIHJlczsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlmICghKF90aGlzNC5wcm9wb3Nlckxpc3QubGVuZ3RoID09PSAwKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF90aGlzNC4kbWVzc2FnZS53YXJuaW5nKCLor7fmt7vliqDnlLPor7fkuroiKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIC8vIOWIoOmZpOWkmuS9meaVsOaNrgogICAgICAgICAgICAgICAgX3RoaXM0LnByb3Bvc2VyTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICAgIGRlbGV0ZSBpdGVtLm5lZWRVcGxvYWRMaXN0OwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgZGF0YSA9IHsKICAgICAgICAgICAgICAgICAgYmlkVHlwZTogMSwKICAgICAgICAgICAgICAgICAgcHJvQ29kZTogMTAwMSwKICAgICAgICAgICAgICAgICAgbm90YXJ5Q29kZTogX3RoaXM0Lm5vdGFyeUNvZGUsCiAgICAgICAgICAgICAgICAgIG9yZGVyUHJvcG9zZXJSZUxpc3Q6IF90aGlzNC5wcm9wb3Nlckxpc3QKICAgICAgICAgICAgICAgIH07IC8vIGNvbnNvbGUubG9nKGRhdGEpOwoKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiByZW1vdGVWaWRlb0FjY2VwdGFuY2VPcmRlclN1Ym1pdChkYXRhKTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQ0LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKCEocmVzLnN1Y2Nlc3MgJiYgcmVzLmRhdGEpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF90aGlzNC4kbWVzc2FnZS5zdWNjZXNzKCLmlrDlop7orqLljZXmiJDlip8iKTsKCiAgICAgICAgICAgICAgICBfdGhpczQuJGVtaXQoInVwZGF0ZTp2aXNpYmxlIiwgZmFsc2UpOwoKICAgICAgICAgICAgICAgIF90aGlzNC4kcm91dGVyLnB1c2goewogICAgICAgICAgICAgICAgICBuYW1lOiAnZGVsZWdhdGVJbmZvJywKICAgICAgICAgICAgICAgICAgcXVlcnk6IHsKICAgICAgICAgICAgICAgICAgICBpZDogcmVzLmRhdGEuaWQKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgX3RoaXM0LiRtZXNzYWdlLmVycm9yKHJlcy5kYXRhIHx8ICLmlrDlop7orqLljZXlpLHotKXvvIzor7fnqI3lkI7lho3or5UiKTsKCiAgICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNCk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGhhbmRsZUNhbmNlbE9yZGVyOiBmdW5jdGlvbiBoYW5kbGVDYW5jZWxPcmRlcigpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICBpZiAodGhpcy5wcm9wb3Nlckxpc3QubGVuZ3RoID4gMCkgewogICAgICAgIHRoaXMuJGNvbmZpcm0oJzxwIHN0eWxlPSJjb2xvcjpyZWQ7Ij7loavlhpnnmoTlhoXlrrnlsIbmuIXnqbrvvIznoa7lrprlj5bmtojvvJ88L3A+JywgJ+aTjeS9nOaPkOekuicsIHsKICAgICAgICAgIGRhbmdlcm91c2x5VXNlSFRNTFN0cmluZzogdHJ1ZSwKICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAn56Gu5a6aJywKICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICflj5bmtognLAogICAgICAgICAgdHlwZTogJ3dhcm5pbmcnCiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICBfdGhpczUuJGVtaXQoInVwZGF0ZTp2aXNpYmxlIiwgZmFsc2UpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uICgpIHt9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLiRlbWl0KCJ1cGRhdGU6dmlzaWJsZSIsIGZhbHNlKTsKICAgICAgfQogICAgfSwKICAgIC8vIOaWsOWinueUs+ivt+S6ugogICAgaGFuZGxlQWRkcHJvcG9zZXI6IGZ1bmN0aW9uIGhhbmRsZUFkZHByb3Bvc2VyKCkgewogICAgICB2YXIgX3RoaXM2ID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNSgpIHsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF90aGlzNi5hY3Rpb24gPSAiYWRkIjsKICAgICAgICAgICAgICAgIF90aGlzNi5wcm9wb3NlclZpc2libGUgPSB0cnVlOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTUpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyDkuIrkvKDmlofku7YKICAgIGhhbmRsZVVwbG9hZEltZzogZnVuY3Rpb24gaGFuZGxlVXBsb2FkSW1nKGUpIHsKICAgICAgdmFyIF90aGlzNyA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYoKSB7CiAgICAgICAgdmFyIGZpbGUsIGZpbGVUeXBlLCB0eXBlTGlzdCwgaXNJbWFnZSwgaXNMdDE1TSwgaXRlbSwgY29weUl0ZW0sIGZvcm1EYXRhLCBVUkwsIHJlcywgaW1hZ2VVcmw7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNiQoX2NvbnRleHQ2KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ni5wcmV2ID0gX2NvbnRleHQ2Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBmaWxlID0gZS5maWxlOwogICAgICAgICAgICAgICAgZmlsZVR5cGUgPSBmaWxlLnR5cGU7IC8vIOaWh+S7tuexu+WeiwoKICAgICAgICAgICAgICAgIHR5cGVMaXN0ID0gWydpbWFnZS9qcGVnJywgJ2ltYWdlL2pwZycsICdpbWFnZS9wbmcnXTsKICAgICAgICAgICAgICAgIGlzSW1hZ2UgPSB0eXBlTGlzdC5pbmRleE9mKGZpbGVUeXBlKSAhPT0gLTE7IC8vIOmZkOWItuagvOW8jwoKICAgICAgICAgICAgICAgIGlzTHQxNU0gPSBmaWxlLnNpemUgLyAxMDI0IC8gMTAyNCA8IDE1OyAvLyDmlofku7blpKflsI8KCiAgICAgICAgICAgICAgICBpdGVtID0gZS5kYXRhLml0ZW07CiAgICAgICAgICAgICAgICBjb3B5SXRlbSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoaXRlbSkpOyAvLyBjb25zb2xlLmxvZyhpdGVtKTsKICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGl0ZW0pOwogICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaW5kZXgpOwoKICAgICAgICAgICAgICAgIGlmIChpc0ltYWdlKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF90aGlzNy4kbWVzc2FnZS5lcnJvcign6K+35LiK5LyganBn44CBanBlZ+OAgXBuZ+agvOW8j+eahOaWh+S7tiEnKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICBpZiAoaXNMdDE1TSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfdGhpczcuJG1lc3NhZ2UuZXJyb3IoJ+S4iuS8oOWbvueJh+eahOWkp+Wwj+W6lOWwj+S6jjE1TScpOwoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7CiAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBmaWxlKTsKICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZVR5cGUnLCAnb3JkZXItbWF0ZXJpYWwnKTsgLy8g5paH5Lu25rWBCgogICAgICAgICAgICAgICAgVVJMID0gd2luZG93LlVSTCB8fCB3aW5kb3cud2Via2l0VVJMOwogICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAxOTsKICAgICAgICAgICAgICAgIHJldHVybiBzaW5nbGVGaWxlVXBsb2FkUmVtb3RlKGZvcm1EYXRhKTsKCiAgICAgICAgICAgICAgY2FzZSAxOToKICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0Ni5zZW50OwoKICAgICAgICAgICAgICAgIGlmIChyZXMuc3VjY2VzcykgewogICAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDIzOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfdGhpczcuJG1lc3NhZ2UuZXJyb3IocmVzLm1zZyB8fCAi5LiK5Lyg5aSx6LSl77yM6K+356iN5ZCO5YaN6K+VIik7CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDIzOgogICAgICAgICAgICAgICAgaWYgKHJlcy5zdWNjZXNzICYmIHJlcy5kYXRhKSB7CiAgICAgICAgICAgICAgICAgIGltYWdlVXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKTsgLy8g5pys5ZywdXJsCgogICAgICAgICAgICAgICAgICBpdGVtLmltYWdlVXJsID0gaW1hZ2VVcmw7CiAgICAgICAgICAgICAgICAgIGl0ZW0ucHJvcG9zZXJNYXRlcmlhbCA9IHsKICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbENvZGU6IGl0ZW0ubWF0ZXJpYWxDb2RlLAogICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsRmlsZTogSlNPTi5zdHJpbmdpZnkocmVzLmRhdGEpCiAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICBpZiAoaXRlbS5tYXRlcmlhbENvZGUgPT09ICIxMDA3IiAmJiBlLmRhdGEudHlwZSAhPT0gImVkaXQiKSB7CiAgICAgICAgICAgICAgICAgICAgLy8g5oqk54Wn5Y+v5LiK5Lyg5aSa5bygCiAgICAgICAgICAgICAgICAgICAgX3RoaXM3Lm5lZWRVcGxvYWRMaXN0LnB1c2goY29weUl0ZW0pOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IC8vIOi6q+S7veivgeato+mdom9jcgoKCiAgICAgICAgICAgICAgICBpZiAoX3RoaXM3LnNlbGVjdENhcmRUeXBlLmNlcnRDb2RlID09PSAiMTExIiAmJiBpdGVtLm1hdGVyaWFsQ29kZSA9PT0gIjEwMDEiKSB7CiAgICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgiaWRUeXBlIiwgMik7CgogICAgICAgICAgICAgICAgICBfdGhpczcuZ2V0T2NySW5mbyhmb3JtRGF0YSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGNhc2UgMjU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTYpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyDouqvku73or4HmraPpnaJvY3IKICAgIGdldE9jckluZm86IGZ1bmN0aW9uIGdldE9jckluZm8oZmlsZURhdGEpIHsKICAgICAgdmFyIF90aGlzOCA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTcoKSB7CiAgICAgICAgdmFyIHJlcywgcmVzdWx0LCBfaXRlcmF0b3I1LCBfc3RlcDUsIGl0ZW0sIGJpcnRoZGF5RGF0ZTsKCiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNyQoX2NvbnRleHQ3KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ny5wcmV2ID0gX2NvbnRleHQ3Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gb2NySWRDYXJkKGZpbGVEYXRhKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQ3LnNlbnQ7CgogICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocmVzKTsKICAgICAgICAgICAgICAgIGlmIChyZXMuc3VjY2VzcyAmJiByZXMuZGF0YSkgewogICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXMuZGF0YS5kYXRhOwoKICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5jYXJkKSB7CiAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yNSA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHJlc3VsdC5jYXJkKTsKCiAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yNS5zKCk7ICEoX3N0ZXA1ID0gX2l0ZXJhdG9yNS5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSBfc3RlcDUudmFsdWU7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoaXRlbSlbMF0gPT09ICLlp5PlkI0iKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM4LnByb3Bvc2VyRm9ybS5yZWFsTmFtZSA9IGl0ZW1bIuWnk+WQjSJdOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoaXRlbSlbMF0gPT09ICLmgKfliKsiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM4LnByb3Bvc2VyRm9ybS5nZW5kZXIgPSBpdGVtWyfmgKfliKsnXSA9PT0gIueUtyIgPyAnMScgOiAnMic7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhpdGVtKVswXSA9PT0gIuWFrOawkei6q+S7veWPt+eggSIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczgucHJvcG9zZXJGb3JtLmNhcmROdW0gPSBpdGVtWyflhazmsJHouqvku73lj7fnoIEnXTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKGl0ZW0pWzBdID09PSAi5Ye655SfIikgewogICAgICAgICAgICAgICAgICAgICAgICAgIGJpcnRoZGF5RGF0ZSA9IGl0ZW1bJ+WHuueUnyddLnJlcGxhY2UoL+W5tC8sICItIikucmVwbGFjZSgv5pyILywgIi0iKS5yZXBsYWNlKC/ml6UvLCAiIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM4LnByb3Bvc2VyRm9ybS5iaXJ0aGRheSA9IG1vbWVudChiaXJ0aGRheURhdGUpLmZvcm1hdCgiWVlZWS1NTS1ERCIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3I1LmUoZXJyKTsKICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yNS5mKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNyk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIOe8lui+keeUs+ivt+S6ugogICAgaGFuZGxlRWRpdDogZnVuY3Rpb24gaGFuZGxlRWRpdChpbmRleCwgcm93KSB7CiAgICAgIGNvbnNvbGUubG9nKHJvdyk7CiAgICAgIHRoaXMuYWN0aW9uSW5kZXggPSBpbmRleDsKICAgICAgdGhpcy5hY3Rpb24gPSAiZWRpdCI7CiAgICAgIHRoaXMuYmFja3VwSXRlbSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocm93KSk7CiAgICAgIHRoaXMucHJvcG9zZXJGb3JtID0gcm93OwogICAgICB0aGlzLm5lZWRVcGxvYWRMaXN0ID0gcm93Lm5lZWRVcGxvYWRMaXN0OwogICAgICB0aGlzLm5lZWRFeHBpcnlEYXRlID0gISFyb3cuZXhwaXJ5RGF0ZTsKICAgICAgdGhpcy5wcm9wb3NlclZpc2libGUgPSB0cnVlOwogICAgfSwKICAgIC8vIOWIoOmZpOeUs+ivt+S6ugogICAgaGFuZGxlRGVsZXRlOiBmdW5jdGlvbiBoYW5kbGVEZWxldGUoaW5kZXgsIHJvdykgewogICAgICB2YXIgX3RoaXM5ID0gdGhpczsKCiAgICAgIHRoaXMuJGNvbmZpcm0oJzxwIHN0eWxlPSJjb2xvcjpyZWQ7Ij7liKDpmaTlkI7lsIbkuI3lj6/mgaLlpI3vvIznoa7lrprliKDpmaTvvJ88L3A+JywgJ+aTjeS9nOaPkOekuicsIHsKICAgICAgICBkYW5nZXJvdXNseVVzZUhUTUxTdHJpbmc6IHRydWUsCiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICfnoa7lrponLAogICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICflj5bmtognLAogICAgICAgIHR5cGU6ICd3YXJuaW5nJwogICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczkucHJvcG9zZXJMaXN0LnNwbGljZShpbmRleCwgMSk7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgICB9KTsKICAgIH0sCiAgICAvLyDlj5bmtojmt7vliqDnlLPor7fkuroKICAgIGhhbmRsZUNhbGNlbEFkZFByb3Bvc2VyOiBmdW5jdGlvbiBoYW5kbGVDYWxjZWxBZGRQcm9wb3NlcigpIHsKICAgICAgdGhpcy5wcm9wb3NlclZpc2libGUgPSBmYWxzZTsKCiAgICAgIGlmICh0aGlzLmFjdGlvbiA9PT0gImVkaXQiKSB7CiAgICAgICAgdGhpcy4kc2V0KHRoaXMucHJvcG9zZXJMaXN0LCB0aGlzLmFjdGlvbkluZGV4LCB0aGlzLmJhY2t1cEl0ZW0pOwogICAgICB9CiAgICB9LAogICAgLy8g56Gu6K6k5re75YqgCiAgICBoYW5kbGVDb21maXJtQWRkUHJvcG9zZXI6IGZ1bmN0aW9uIGhhbmRsZUNvbWZpcm1BZGRQcm9wb3NlcigpIHsKICAgICAgdmFyIF90aGlzMTAgPSB0aGlzOwoKICAgICAgdGhpcy4kcmVmcy5wcm9wb3NlckZvcm0udmFsaWRhdGUoZnVuY3Rpb24gKHZhbGlkKSB7CiAgICAgICAgaWYgKHZhbGlkKSB7CiAgICAgICAgICB2YXIgb3JkZXJQcm9wb3Nlck1hdGVyaWFsID0gW107CgogICAgICAgICAgX3RoaXMxMC5uZWVkVXBsb2FkTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkgewogICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhpdGVtKTsKICAgICAgICAgICAgaWYgKGl0ZW0ucHJvcG9zZXJNYXRlcmlhbC5tYXRlcmlhbENvZGUpIHsKICAgICAgICAgICAgICBvcmRlclByb3Bvc2VyTWF0ZXJpYWwucHVzaChKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGl0ZW0ucHJvcG9zZXJNYXRlcmlhbCkpKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CgogICAgICAgICAgdmFyIHByb3Bvc2VyID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBfdGhpczEwLnByb3Bvc2VyRm9ybSksIHt9LCB7CiAgICAgICAgICAgIHJvbGVDb2RlOiBfdGhpczEwLnNlbGVjdENhcmRUeXBlLnJvbGVDb2RlLAogICAgICAgICAgICBuZWVkVXBsb2FkTGlzdDogSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShfdGhpczEwLm5lZWRVcGxvYWRMaXN0KSksCiAgICAgICAgICAgIG9yZGVyUHJvcG9zZXJNYXRlcmlhbDogb3JkZXJQcm9wb3Nlck1hdGVyaWFsCiAgICAgICAgICB9KTsKCiAgICAgICAgICBpZiAoX3RoaXMxMC5hY3Rpb24gPT09ICJhZGQiKSB7CiAgICAgICAgICAgIF90aGlzMTAucHJvcG9zZXJMaXN0LnB1c2gocHJvcG9zZXIpOwogICAgICAgICAgfSBlbHNlIGlmIChfdGhpczEwLmFjdGlvbiA9PT0gImVkaXQiKSB7CiAgICAgICAgICAgIF90aGlzMTAuJHNldChfdGhpczEwLnByb3Bvc2VyTGlzdCwgX3RoaXMxMC5hY3Rpb25JbmRleCwgcHJvcG9zZXIpOwogICAgICAgICAgfQoKICAgICAgICAgIF90aGlzMTAucHJvcG9zZXJWaXNpYmxlID0gZmFsc2U7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIC8vIOmihOiniOWbvueJhwogICAgaGFuZGxlUGljdHVyZUNhcmRQcmV2aWV3OiBmdW5jdGlvbiBoYW5kbGVQaWN0dXJlQ2FyZFByZXZpZXcoKSB7fSwKICAgIC8vIOWIoOmZpOWbvueJhwogICAgaGFuZGxlUmVtb3ZlOiBmdW5jdGlvbiBoYW5kbGVSZW1vdmUoKSB7fSwKICAgIGhhbmRsZVByZXZpZXc6IGZ1bmN0aW9uIGhhbmRsZVByZXZpZXcoZmlsZSkgewogICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ2FwcC9DSEFOR0VfSU1BR0UnLCBbZmlsZS5pbWFnZVVybF0pOyAvLyBjb25zdCBpbWdsaXN0ID0gWydwbmcnLCAnanBnJywgJ2pwZWcnLCAnYm1wJywgJ2dpZiddCiAgICAgIC8vIGNvbnN0IGZpbGVUeXBlID0gZmlsZS5uYW1lLnN1YnN0cihmaWxlLm5hbWUubGFzdEluZGV4T2YoJy4nKSArIDEpLnRvTG9jYWxlTG93ZXJDYXNlKCkKICAgICAgLy8gaWYgKGltZ2xpc3QuaW5jbHVkZXMoZmlsZVR5cGUpKSB7CiAgICAgIC8vIAl0aGlzLiRzdG9yZS5jb21taXQoJ2FwcC9DSEFOR0VfSU1BR0UnLCBbZmlsZS51cmxdKQogICAgICAvLyAJcmV0dXJuCiAgICAgIC8vIH0KICAgIH0sCiAgICBoYW5kbGVEZWxldGVJbWFnZTogZnVuY3Rpb24gaGFuZGxlRGVsZXRlSW1hZ2UoaW1hZ2UpIHt9LAogICAgYmVmb3JlQ2xvc2U6IGZ1bmN0aW9uIGJlZm9yZUNsb3NlKCkgewogICAgICB0aGlzLiRlbWl0KCJ1cGRhdGU6dmlzaWJsZSIsIGZhbHNlKTsKICAgIH0KICB9LAogIHdhdGNoOiB7CiAgICBwcm9wb3NlclZpc2libGU6IGZ1bmN0aW9uIHByb3Bvc2VyVmlzaWJsZSh2YWwpIHsKICAgICAgdmFyIF90aGlzMTEgPSB0aGlzOwoKICAgICAgaWYgKCF2YWwpIHsKICAgICAgICB0aGlzLnByb3Bvc2VyRm9ybSA9IHsKICAgICAgICAgIHJlYWxOYW1lOiAiIiwKICAgICAgICAgIGdlbmRlcjogIiIsCiAgICAgICAgICBiaXJ0aGRheTogIiIsCiAgICAgICAgICBjYXJkVHlwZTogIiIsCiAgICAgICAgICBjYXJkTnVtOiAiIiwKICAgICAgICAgIGV4cGlyeURhdGU6ICIiLAogICAgICAgICAgbW9iaWxlOiAiIgogICAgICAgIH07CiAgICAgICAgdGhpcy4kcmVmcy5wcm9wb3NlckZvcm0uY2xlYXJWYWxpZGF0ZSgpOwogICAgICAgIHRoaXMubmVlZFVwbG9hZExpc3QgPSBbXTsKICAgICAgICB0aGlzLm5lZWRFeHBpcnlEYXRlID0gZmFsc2U7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgX3RoaXMxMS4kcmVmcy5wcm9wb3NlckZvcm0uY2xlYXJWYWxpZGF0ZSgpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgdmlzaWJsZTogZnVuY3Rpb24gdmlzaWJsZSh2YWwpIHsKICAgICAgaWYgKCF2YWwpIHsKICAgICAgICB0aGlzLnByb3Bvc2VyTGlzdCA9IFtdOwogICAgICAgIHRoaXMubm90YXJ5Q29kZSA9ICIiOwogICAgICB9CiAgICB9CiAgfQp9Ow=="},null]}