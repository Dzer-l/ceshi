{"remainingRequest":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/thread-loader/dist/cjs.js!/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/home/jenkins_data/workspace/页面-公证处后台/src/api/details.js","dependencies":[{"path":"/home/jenkins_data/workspace/页面-公证处后台/src/api/details.js","mtime":1634724784678},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}