{"remainingRequest":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/thread-loader/dist/cjs.js!/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/home/jenkins_data/workspace/页面-公证处后台/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jenkins_data/workspace/页面-公证处后台/src/views/business/info.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jenkins_data/workspace/页面-公证处后台/src/views/business/info.vue","mtime":1634724784705},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuIik7IH0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gYXJyID09IG51bGwgPyBudWxsIDogdHlwZW9mIFN5bWJvbCAhPT0gInVuZGVmaW5lZCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyWyJAQGl0ZXJhdG9yIl07IGlmIChfaSA9PSBudWxsKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX3MsIF9lOyB0cnkgeyBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9CgpmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSAidW5kZWZpbmVkIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1siQEBpdGVyYXRvciJdOyBpZiAoIWl0KSB7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09ICJudW1iZXIiKSB7IGlmIChpdCkgbyA9IGl0OyB2YXIgaSA9IDA7IHZhciBGID0gZnVuY3Rpb24gRigpIHt9OyByZXR1cm4geyBzOiBGLCBuOiBmdW5jdGlvbiBuKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9LCBlOiBmdW5jdGlvbiBlKF9lMikgeyB0aHJvdyBfZTI7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IGl0LmNhbGwobyk7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciBzdGVwID0gaXQubmV4dCgpOyBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lOyByZXR1cm4gc3RlcDsgfSwgZTogZnVuY3Rpb24gZShfZTMpIHsgZGlkRXJyID0gdHJ1ZTsgZXJyID0gX2UzOyB9LCBmOiBmdW5jdGlvbiBmKCkgeyB0cnkgeyBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXQucmV0dXJuICE9IG51bGwpIGl0LnJldHVybigpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9CgpmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09ICJzdHJpbmciKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gIk9iamVjdCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09ICJNYXAiIHx8IG4gPT09ICJTZXQiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09ICJBcmd1bWVudHMiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfQoKZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9CgppbXBvcnQgX3JlZ2VuZXJhdG9yUnVudGltZSBmcm9tICIvaG9tZS9qZW5raW5zX2RhdGEvd29ya3NwYWNlL1x1OTg3NVx1OTc2Mi1cdTUxNkNcdThCQzFcdTU5MDRcdTU0MEVcdTUzRjAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yIjsKCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9CgovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgKiBhcyBkZSBmcm9tICdAL2FwaS9kZWxlZ2F0ZSc7CmltcG9ydCB7IHJlZ2lvbkRhdGEgfSBmcm9tICdlbGVtZW50LWNoaW5hLWFyZWEtZGF0YSc7CmltcG9ydCBzaWduRmlsZSBmcm9tICdAL2NvbXBvbmVudHMvZGVsZWdhdGUvc2lnbkZpbGUudnVlJzsKaW1wb3J0IGVudHJ1c3RJbmZvIGZyb20gJ0AvY29tcG9uZW50cy9kZWxlZ2F0ZS9lbnRydXN0SW5mby52dWUnOwppbXBvcnQgeyBzaG93TG9hZGluZywgaGlkZUxvYWRpbmcgfSBmcm9tICcuLi8uLi91dGlscy9sb2FkaW5nJzsKZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IHsKICAgIHNpZ25GaWxlOiBzaWduRmlsZSwKICAgIGVudHJ1c3RJbmZvOiBlbnRydXN0SW5mbwogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHZhciBnenlUZWwgPSBmdW5jdGlvbiBnenlUZWwocnVsZSwgdmFsdWUsIGNhbGxiYWNrKSB7CiAgICAgIHZhciB0ZWwgPSAvXltcZF17MTF9JC87CgogICAgICBpZiAodmFsdWUgPT09ICcnKSB7CiAgICAgICAgY2FsbGJhY2sobmV3IEVycm9yKCfor7fovpPlhaXmiYvmnLrlj7cnKSk7CiAgICAgIH0gZWxzZSBpZiAoIXRlbC50ZXN0KHZhbHVlKSkgewogICAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcign6K+36L6T5YWl5q2j56Gu55qE5omL5py65Y+3JykpOwogICAgICB9IGVsc2UgewogICAgICAgIGNhbGxiYWNrKCk7CiAgICAgIH0KICAgIH07CgogICAgcmV0dXJuIHsKICAgICAgdXJsOiB0aGlzLiRjZmcuaHR0cCwKICAgICAgYWN0aXZlOiAxLAogICAgICBpbmZvQWN0OiAxLAogICAgICBvcmRlcklkOiAnJywKICAgICAgZG9zc2llck51bTogJycsCiAgICAgIG5vdGFyeVVzZXJNb2JpbGU6ICcnLAogICAgICBvcmRlckluZm86IHt9LAogICAgICAvLyDorqLljZXkv6Hmga8KICAgICAgb3JkZXJGaWxlTGlzdDogW10sCiAgICAgIC8vIOaWh+S5puWIl+ihqAogICAgICBlbnRydXN0SW5mbzoge30sCiAgICAgIC8vIOiBlOezu+S6ugogICAgICBzaGlwcGluZ0luZm86IFtdLAogICAgICAvLyDpgq7lr4TlnLDlnYAKICAgICAgZmxpZUxpc3Q6IFtdLAogICAgICAvLyDnlLPor7fkurrmnZDmlpnliJfooagKICAgICAgZmlsZVNpZ25MaXN0OiBbXSwKICAgICAgLy8g6ZyA562+5a2X55qE55Sz6K+35Lq65YiX6KGoCiAgICAgIHNob3dGaWxlU2lnbkxpc3Q6IFtdLAogICAgICAvLyDlsZXnpLrnrb7lkI3liJfooagKICAgICAgc2lnbkZpbGVMaXN0OiBbXSwKICAgICAgLy8g562+572y55qE5paH5Lu25YiX6KGoCiAgICAgIGVudGVydXN0RWRpdDogZmFsc2UsCiAgICAgIC8vIOe8lui+keiBlOezu+S6ugogICAgICBzaGlwcGluZ0VkaXQ6IGZhbHNlLAogICAgICAvLyDnvJbovpHpgq7lr4TlnLDlnYAKICAgICAgb3B0aW9uczogcmVnaW9uRGF0YSwKICAgICAgLy8g5Z+O5biC6YCJ5oup56CBCiAgICAgIG1hbkxpc3Q6IFt7CiAgICAgICAgbmFtZTogJ+WuouaIt+etlOWkjScsCiAgICAgICAgeDogMCwKICAgICAgICB5OiAwCiAgICAgIH0sIHsKICAgICAgICBuYW1lOiAn5Y+R5Yiw5LuYJywKICAgICAgICB4OiAwLAogICAgICAgIHk6IDAKICAgICAgfSwgewogICAgICAgIG5hbWU6ICfnmoTlkKnlkpDkuLDlr4wnLAogICAgICAgIHg6IDAsCiAgICAgICAgeTogMAogICAgICB9LCB7CiAgICAgICAgbmFtZTogJ+WPkeeahOWIhuWFrOWPuCcsCiAgICAgICAgeDogMCwKICAgICAgICB5OiAwCiAgICAgIH1dLAogICAgICBkb2NJbmZvOiB7fSwKICAgICAgc2lnbkJveFNob3c6IGZhbHNlLAogICAgICBjaGFuZ2VEb3NzOiBmYWxzZSwKICAgICAgc2V0VGVsOiBmYWxzZSwKICAgICAgZ3p5VGVsRGF0YTogewogICAgICAgIGd6eVRlbDogJycsCiAgICAgICAgZ3p5SWQ6ICcnCiAgICAgIH0sCiAgICAgIHRlbFJlZzogW3sKICAgICAgICB2YWxpZGF0b3I6IGd6eVRlbCwKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfV0sCiAgICAgIHNob3dMb2Rpbmc6IGZhbHNlLAogICAgICBzZW5kTm90ZUxpbmtTaG93OiBmYWxzZSwKICAgICAgcGhvbmVEYXRhOiBbXQogICAgfTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICBoZWFkZXJUb2tlbjogZnVuY3Rpb24gaGVhZGVyVG9rZW4oKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgQXV0aG9yaXphdGlvbjogJ2JlYXJlciAnICsgdGhpcy4kc3RvcmUuZ2V0dGVycy50b2tlbgogICAgICB9OwogICAgfQogIH0sCiAgd2F0Y2g6IHsKICAgIGluZm9BY3Q6IGZ1bmN0aW9uIGluZm9BY3QobmV3VmFsLCBvbGRWYWwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGlmIChuZXdWYWwgPT09IDEpIHsKICAgICAgICB0aGlzLmdldFNpZ25GaWxlTGlzdCgpOwogICAgICB9IGVsc2UgaWYgKG5ld1ZhbCA9PT0gMikgewogICAgICAgIHRoaXMuZ2V0RUluZm8oKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBkZS5nZXRTaGlwcGluZ0luZm8oewogICAgICAgICAgb3JkZXJOdW06IHRoaXMub3JkZXJJbmZvLm9yZGVyTnVtCiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICBpZiAocmVzLnN1Y2Nlc3MpIHsKICAgICAgICAgICAgX3RoaXMuc2hpcHBpbmdJbmZvID0gcmVzLmRhdGE7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBvcmRlckZpbGVMaXN0OiBmdW5jdGlvbiBvcmRlckZpbGVMaXN0KG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIGlmIChuZXdWYWwubGVuZ3RoID4gMCAmJiB0aGlzLm9yZGVySW5mby5vcmRlclN0YXR1cyAhPT0gMzA2KSB7CiAgICAgICAgdGhpcy5hY3RpdmUgPSAzOwogICAgICB9CiAgICB9LAogICAgJyRzdG9yZS5zdGF0ZS5hcHAuaW1nTGlzdCc6IGZ1bmN0aW9uICRzdG9yZVN0YXRlQXBwSW1nTGlzdChuZXdWYWwsIG9sZFZhbCkgewogICAgICBpZiAobmV3VmFsLmxlbmd0aCA9PT0gMCkgewogICAgICAgIHRoaXMuc2VuZE5vdGVMaW5rU2hvdyA9IGZhbHNlOwogICAgICB9CiAgICB9CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdGhpcy5vcmRlcklkID0gdGhpcy4kcm91dGUucXVlcnkuaWQ7CiAgICB0aGlzLmluaXQoKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGFkZFByb3Bvc2VyOiBmdW5jdGlvbiBhZGRQcm9wb3NlcigpIHsKICAgICAgdGhpcy4kcmVmcy5jYXRlZ29yeS5jYXRlZ29yeVNlbGVjdCgpOwogICAgfSwKICAgIC8vIOi/m+WFpemhtemdouiOt+WPluS/oeaBrwogICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHsKICAgICAgdGhpcy5nZXRFSW5mbygpOwogICAgICB0aGlzLmdldE9yZGVySW5mbygpOwogICAgICB0aGlzLnNpZ25Cb3hTaG93ID0gZmFsc2U7CiAgICB9LAogICAgLy8g6I635Y+W6K6i5Y2V5L+h5oGvCiAgICBnZXRPcmRlckluZm86IGZ1bmN0aW9uIGdldE9yZGVySW5mbygpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICBkZS5nZXRJbmZvKHsKICAgICAgICBvcmRlcklkOiB0aGlzLm9yZGVySWQKICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgaWYgKHJlcy5zdWNjZXNzKSB7CiAgICAgICAgICBfdGhpczIub3JkZXJJbmZvID0gcmVzLmRhdGE7CgogICAgICAgICAgaWYgKHJlcy5kYXRhLm9yZGVyU3RhdHVzID09PSAzMDYpIHsKICAgICAgICAgICAgX3RoaXMyLmFjdGl2ZSA9IDQ7CiAgICAgICAgICB9CgogICAgICAgICAgX3RoaXMyLmdldFNpZ25GaWxlTGlzdCgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBfdGhpczIuJGZ1bi5tc2coJ+WHuumUmeS6hu+8gScsICdlcnJvcicpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgLy8g5L+d5a2Y5Y235a6X5Y+3CiAgICBvbkNsaWNrX3NhdmVEb3NzaWVyTnVtOiBmdW5jdGlvbiBvbkNsaWNrX3NhdmVEb3NzaWVyTnVtKCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIGlmICghdGhpcy5kb3NzaWVyTnVtICYmICF0aGlzLm9yZGVySW5mby5kb3NzaWVyTnVtKSB7CiAgICAgICAgdGhpcy4kZnVuLm1zZygn5Y235a6X5Y+35LiN6IO95Li656m6JywgJ2Vycm9yJyk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB0aGlzLiRheGlvcygnb3JnL3VwZGF0ZS1vcmRlci1kb3NzaWVyLW51bScsIHsKICAgICAgICBpZDogdGhpcy5vcmRlcklkLAogICAgICAgIGRvc3NpZXJOdW06IHRoaXMuZG9zc2llck51bSA/IHRoaXMuZG9zc2llck51bSA6IHRoaXMub3JkZXJJbmZvLmRvc3NpZXJOdW0KICAgICAgfSwgewogICAgICAgIG1ldGhvZDogJ3B1dCcKICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgX3RoaXMzLmNoYW5nZURvc3MgPSBmYWxzZTsKICAgICAgICBfdGhpczMuZG9zc2llck51bSA9ICcnOwoKICAgICAgICBfdGhpczMuaW5pdCgpOwogICAgICB9KTsKICAgIH0sCiAgICAvLyDmiZPlvIDnrb7nvbLmlofku7bkuIrkvKAKICAgIHVwU2lnbkZpbGU6IGZ1bmN0aW9uIHVwU2lnbkZpbGUoKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlmICghKF90aGlzNC5vcmRlckluZm8uc2lnblN0YXR1cyA9PT0gMikpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNC5zaG93VG9hc3QoJ+W9k+WJjeiuouWNleW3suWujOaIkO+8jOmHjeaWsOS4iuS8oOaWh+S5pu+8jOS8mua4heepuuaJgOacieaWh+S5pueahOetvuWQje+8jOmcgOimgemHjeaWsOetvue9su+8jOehruWumuimgei/meagt+WBmuWQl++8nycsICfpo47pmanmj5DnpLonKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgaWYgKF9jb250ZXh0LnNlbnQpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBfdGhpczQuc2lnbkJveFNob3cgPSB0cnVlOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgb25DbGlja19jaGFuZ2VUYWI6IGZ1bmN0aW9uIG9uQ2xpY2tfY2hhbmdlVGFiKGUpIHsKICAgICAgdGhpcy5pbmZvQWN0ID0gZTsKICAgIH0sCiAgICAvLyDojrflj5bnlLPor7fkurrkv6Hmga8KICAgIGdldEVJbmZvOiBmdW5jdGlvbiBnZXRFSW5mbygpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICB0aGlzLnBob25lRGF0YSA9IFtdOwoKICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KHRoaXMuZW50cnVzdEluZm8pICE9PSAne30nKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBkZS5nZXRFbnRydXN0SW5mbyh7CiAgICAgICAgb3JkZXJJZDogdGhpcy5vcmRlcklkCiAgICAgIH0pLnRoZW4oIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMihyZXMpIHsKICAgICAgICAgIHZhciBmbGllTGlzdCwgZmlsZVNpZ25MaXN0LCBfaXRlcmF0b3IsIF9zdGVwLCBpLCBfaXRlcmF0b3IyLCBfc3RlcDIsIF9zdGVwMiR2YWx1ZSwgaW5kZXgsIGosIF9pdGVyYXRvcjMsIF9zdGVwMywgX2kyOwoKICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICBpZiAocmVzLnN1Y2Nlc3MpIHsKICAgICAgICAgICAgICAgICAgICBmbGllTGlzdCA9IFtdOwogICAgICAgICAgICAgICAgICAgIGZpbGVTaWduTGlzdCA9IFtdOwogICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHJlcy5kYXRhLmFubmV4RFRPTGlzdCk7CgogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykgewogICAgICAgICAgICAgICAgICAgICAgICBpID0gX3N0ZXAudmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIGZsaWVMaXN0LnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGkub3JpZ2luRmlsZU5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBpLmZpbGVOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMKCiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IuZigpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHJlcy5kYXRhLmVudHJ1c3RMaXN0LmVudHJpZXMoKSk7CgogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykgewogICAgICAgICAgICAgICAgICAgICAgICBfc3RlcDIkdmFsdWUgPSBfc2xpY2VkVG9BcnJheShfc3RlcDIudmFsdWUsIDIpLCBpbmRleCA9IF9zdGVwMiR2YWx1ZVswXSwgaiA9IF9zdGVwMiR2YWx1ZVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVNpZ25MaXN0LnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWxOYW1lOiBqLnJlYWxOYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2VySWQ6IGouaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgbG93TGVmdFg6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgbG93TGVmdFk6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJJZDogX3RoaXM1Lm9yZGVySWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJEb2N1bWVudElkOiAnJywKICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlOiAnJywKICAgICAgICAgICAgICAgICAgICAgICAgICBjb3ZlclR5cGU6IDIKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IyLmUoZXJyKTsKICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMi5mKCk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIocmVzLmRhdGEuZW50cnVzdExpc3QpOwoKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgZm9yIChfaXRlcmF0b3IzLnMoKTsgIShfc3RlcDMgPSBfaXRlcmF0b3IzLm4oKSkuZG9uZTspIHsKICAgICAgICAgICAgICAgICAgICAgICAgX2kyID0gX3N0ZXAzLnZhbHVlOwoKICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM1LnBob25lRGF0YS5wdXNoKF9pMi5tb2JpbGUpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMy5lKGVycik7CiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjMuZigpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgX3RoaXM1LmZsaWVMaXN0ID0gZmxpZUxpc3Q7CiAgICAgICAgICAgICAgICAgICAgX3RoaXM1LmZpbGVTaWduTGlzdCA9IGZpbGVTaWduTGlzdDsgLy8gdGhpcy5lbnRydXN0SW5mbyA9IHJlcy5kYXRhOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgICAgfSkpOwoKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94KSB7CiAgICAgICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH07CiAgICAgIH0oKSk7CiAgICB9LAogICAgZ2V0SW1nOiBmdW5jdGlvbiBnZXRJbWcoaWQpIHsKICAgICAgdmFyIF90aGlzNiA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM2LiRheGlvcygib3JnL29yZGVyLWRvY3VtZW50LXByZXZpZXctaW1nLyIuY29uY2F0KGlkKSkudGhlbiggLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgdmFyIF9yZWYyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMocmVzKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlcy5zdWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsICdkYXRhOmltYWdlL3BuZztiYXNlNjQsJyArIHJlcy5kYXRhKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUzKTsKICAgICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeDIpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0oKSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDQuc2VudCk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNCk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIOiOt+WPluetvue9suaWh+S7tuWIl+ihqAogICAgZ2V0U2lnbkZpbGVMaXN0OiBmdW5jdGlvbiBnZXRTaWduRmlsZUxpc3QoKSB7CiAgICAgIHZhciBfdGhpczcgPSB0aGlzOwoKICAgICAgZGUuZ2V0U2lnbkxpc3QoewogICAgICAgIG9yZGVySWQ6IHRoaXMub3JkZXJJZAogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICBpZiAocmVzLnN1Y2Nlc3MpIHsKICAgICAgICAgIGlmICghcmVzLmRhdGEpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciBsaXN0ID0gW107CgogICAgICAgICAgdmFyIF9pdGVyYXRvcjQgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihyZXMuZGF0YSksCiAgICAgICAgICAgICAgX3N0ZXA0OwoKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yNC5zKCk7ICEoX3N0ZXA0ID0gX2l0ZXJhdG9yNC5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgdmFyIGkgPSBfc3RlcDQudmFsdWU7CiAgICAgICAgICAgICAgbGlzdC5wdXNoKHsKICAgICAgICAgICAgICAgIG9yZGVyUHJvcG9zZXJEb2N1bWVudFNpZ25WT1M6IGkub3JkZXJQcm9wb3NlckRvY3VtZW50U2lnblZPUywKICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBpLm9yaWdpbmFsRmlsZW5hbWUsCiAgICAgICAgICAgICAgICBzaWduU3RhdHVzOiBpLnNpZ25TdGF0dXMsCiAgICAgICAgICAgICAgICBjb3ZlclN0YXR1czogaS5jb3ZlclN0YXR1cywKICAgICAgICAgICAgICAgIGNyZWF0ZVRpbWU6IGkuY3JlYXRlVGltZS5zdWJzdHIoMCwgMTApICsgJyAnICsgaS5jcmVhdGVUaW1lLnN1YnN0cigxMSwgMTkpLAogICAgICAgICAgICAgICAgaWQ6IGkuaWQKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgIF9pdGVyYXRvcjQuZShlcnIpOwogICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgX2l0ZXJhdG9yNC5mKCk7CiAgICAgICAgICB9CgogICAgICAgICAgX3RoaXM3Lm9yZGVyRmlsZUxpc3QgPSBsaXN0OwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgLy8gdXBTaGlwcGluZygpIHsKICAgIC8vICAgaWYgKHRoaXMuc2hpcHBpbmdFZGl0ID09IGZhbHNlKSB7CiAgICAvLyAgICAgdGhpcy5zaGlwcGluZ0VkaXQgPSB0cnVlOwogICAgLy8gICB9IGVsc2UgewogICAgLy8gICAgIHRoaXMuc2hpcHBpbmdFZGl0ID0gZmFsc2U7CiAgICAvLyAgIH0KICAgIC8vIH0sCiAgICAvLyB1cEVudGVydXN0KCkgewogICAgLy8gICBpZiAodGhpcy5lbnRlcnVzdEVkaXQgPT0gZmFsc2UpIHsKICAgIC8vICAgICB0aGlzLmVudGVydXN0RWRpdCA9IHRydWU7CiAgICAvLyAgIH0gZWxzZSB7CiAgICAvLyAgICAgdGhpcy5lbnRlcnVzdEVkaXQgPSBmYWxzZTsKICAgIC8vICAgfQogICAgLy8gfSwKICAgIC8vIOWhq+WGmeWFrOivgeWRmOaJi+acuuWPtwogICAgb25DbGlja19ub3RyYXlVc2VyOiBmdW5jdGlvbiBvbkNsaWNrX25vdHJheVVzZXIoKSB7CiAgICAgIHZhciBfdGhpczggPSB0aGlzOwoKICAgICAgLy8gaWYgKHRoaXMub3JkZXJGaWxlTGlzdC5sZW5ndGggPT09IDApIHsKICAgICAgLy8gICB0aGlzLiRmdW4ubXNnKCfmgqjov5jmsqHmnInkuIrkvKDmlofkuaYnLCAnZXJyb3InKQogICAgICAvLyAgIHJldHVybgogICAgICAvLyB9CiAgICAgIHZhciBfaXRlcmF0b3I1ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5vcmRlckZpbGVMaXN0KSwKICAgICAgICAgIF9zdGVwNTsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3I1LnMoKTsgIShfc3RlcDUgPSBfaXRlcmF0b3I1Lm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBpID0gX3N0ZXA1LnZhbHVlOwoKICAgICAgICAgIGlmIChpLmNvdmVyU3RhdHVzICE9PSAxKSB7CiAgICAgICAgICAgIHRoaXMuJGZ1bi5tc2coJ+acieaWh+S7tuWwmuacquiuvue9ruetvue9suWMuuWfnycsICdlcnJvcicpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3I1LmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3I1LmYoKTsKICAgICAgfQoKICAgICAgZGUuZ2V0Tm90cmF5VGVsKHsKICAgICAgICBvcmRlcklkOiB0aGlzLm9yZGVySWQKICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgX3RoaXM4Lmd6eVRlbERhdGEuZ3p5VGVsID0gJyc7CiAgICAgICAgX3RoaXM4Lmd6eVRlbERhdGEuZ3p5SWQgPSAnJzsKCiAgICAgICAgaWYgKHJlcy5kYXRhICE9IG51bGwgJiYgcmVzLnN1Y2Nlc3MgPT09IHRydWUpIHsKICAgICAgICAgIF90aGlzOC5nenlUZWxEYXRhLmd6eVRlbCA9IHJlcy5kYXRhLm5vdGFyeVVzZXJNb2JpbGU7CiAgICAgICAgICBfdGhpczguZ3p5VGVsRGF0YS5nenlJZCA9IHJlcy5kYXRhLmlkOwogICAgICAgIH0KCiAgICAgICAgX3RoaXM4LnNldFRlbCA9IHRydWU7CiAgICAgIH0pOwogICAgfSwKICAgIC8vIOaPkOS6pOS/ruaUueaJi+acuuWPtwogICAgb25DbGlja19zdWJtaXRUZWw6IGZ1bmN0aW9uIG9uQ2xpY2tfc3VibWl0VGVsKCkgewogICAgICB2YXIgX3RoaXM5ID0gdGhpczsKCiAgICAgIHRoaXMuJHJlZnNbJ2d6eVRlbCddLnZhbGlkYXRlKGZ1bmN0aW9uICh2YWxpZCkgewogICAgICAgIGlmICh2YWxpZCkgewogICAgICAgICAgX3RoaXM5LiRheGlvcygnb3JnL29yZGVyLW5vdGFyeS11c2VyLW1vYmlsZScsIHsKICAgICAgICAgICAgb3JkZXJJZDogX3RoaXM5Lm9yZGVySWQsCiAgICAgICAgICAgIG5vdGFyeVVzZXJNb2JpbGU6IF90aGlzOS5nenlUZWxEYXRhLmd6eVRlbCwKICAgICAgICAgICAgaWQ6IF90aGlzOS5nenlUZWxEYXRhLmd6eUlkCiAgICAgICAgICB9LCB7CiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnCiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgICAgaWYgKHJlcy5zdWNjZXNzID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgX3RoaXM5Lm9uQ2xpY2tfZG93bkNvZGUoMik7CgogICAgICAgICAgICAgIF90aGlzOS5zZXRUZWwgPSBmYWxzZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBfdGhpczkuJGZ1bi5tc2coJ+WFrOivgeWRmOaJi+acuuWPt+iuvue9ruWksei0pSEnLCAnZXJyb3InKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIC8vIOeUn+aIkOWwj+eoi+W6j+S6jOe7tOeggQogICAgb25DbGlja19kb3duQ29kZTogZnVuY3Rpb24gb25DbGlja19kb3duQ29kZShlKSB7CiAgICAgIHZhciBfdGhpczEwID0gdGhpczsKCiAgICAgIGlmICh0aGlzLm9yZGVyRmlsZUxpc3QubGVuZ3RoID4gMCkgewogICAgICAgIHZhciBfaXRlcmF0b3I2ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5vcmRlckZpbGVMaXN0KSwKICAgICAgICAgICAgX3N0ZXA2OwoKICAgICAgICB0cnkgewogICAgICAgICAgZm9yIChfaXRlcmF0b3I2LnMoKTsgIShfc3RlcDYgPSBfaXRlcmF0b3I2Lm4oKSkuZG9uZTspIHsKICAgICAgICAgICAgdmFyIGkgPSBfc3RlcDYudmFsdWU7CgogICAgICAgICAgICBpZiAoaS5jb3ZlclN0YXR1cyAhPT0gMSkgewogICAgICAgICAgICAgIHRoaXMuJGZ1bi5tc2coJ+acieaWh+S7tuWwmuacquiuvue9ruetvue9suWMuuWfnycsICdlcnJvcicpOwogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgX2l0ZXJhdG9yNi5lKGVycik7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIF9pdGVyYXRvcjYuZigpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgdmFyIHFyID0gZSA9PT0gMSA/ICfnlLPor7fkuronIDogJ+WFrOivgeWRmCc7CiAgICAgIGRlLmdldFFSKCI/b3JkZXJJZD0iLmNvbmNhdCh0aGlzLm9yZGVySWQsICImdXNlclR5cGU9IikuY29uY2F0KGUsICImcXJDb2RlTmFtZT0iKS5jb25jYXQocXIpKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXMpCiAgICAgICAgX3RoaXMxMC4kc3RvcmUuY29tbWl0KCdhcHAvQ0hBTkdFX0lNQUdFJywgWydkYXRhOmltYWdlL3BuZztiYXNlNjQsJyArIHJlcy5kYXRhXSk7CgogICAgICAgIGlmIChlID09PSAxKSB7CiAgICAgICAgICBfdGhpczEwLnNlbmROb3RlTGlua1Nob3cgPSB0cnVlOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgLy8g5Y+R6YCB55+t5L+h6ZO+5o6l5oyJ6ZKu5raI5oGv5qGG5by55Ye65LqL5Lu2CiAgICBvbkNsaWNrX3NlbmROb3RlOiBmdW5jdGlvbiBvbkNsaWNrX3NlbmROb3RlKCkgewogICAgICB2YXIgX3RoaXMxMSA9IHRoaXM7CgogICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ2FwcC9DSEFOR0VfSU1BR0UnLCAiIik7CiAgICAgIHZhciBzdHIgPSAn5bCG5a+55omL5py65Y+3JyArIHRoaXMucGhvbmVEYXRhLnRvU3RyaW5nKCkucmVwbGFjZSgvLC9nLCAn44CBJykgKyAn77yM5Y+R6YCB5ZCr5pyJ5bCP56iL5bqP6Lez6L2s6ZO+5o6l55qE55+t5L+h77yM6K+36YCa55+l5b2T5LqL5Lq677yM5bm257qm5a6a5Y+M5pa56L+b6KGM6KeG6aKR6YCa6K+d55qE5pe26Ze044CCJzsKICAgICAgdGhpcy4kY29uZmlybShzdHIsICflj5HpgIHmj5DnpLonLCB7CiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICfnoa7lrponLAogICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICflj5bmtognCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzMTEuJGF4aW9zKCdvcmcvc2VuZC11cmwtYnktc21zJywgewogICAgICAgICAgb3JkZXJJZDogX3RoaXMxMS5vcmRlcklkLAogICAgICAgICAgY29uZlR5cGU6IDEKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgIGlmIChyZXMuc3VjY2VzcykgewogICAgICAgICAgICBfdGhpczExLiRmdW4ubXNnKCfnn63kv6Hlj5HpgIHmiJDlip8hJywgJ3N1Y2Nlc3MnKTsKCiAgICAgICAgICAgIF90aGlzMTEuJHN0b3JlLmNvbW1pdCgnYXBwL0NIQU5HRV9JTUFHRScpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgX3RoaXMxMS4kZnVuLm1zZygn55+t5L+h5Y+R6YCB5aSx6LSlJywgJ2Vycm9yJyk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczExLiRmdW4ubXNnKCflt7Llj5bmtognLCAnaW5mbycpOwogICAgICB9KTsKICAgIH0sCiAgICAvLyDpooTop4jnrb7nvbLmlofkuaYKICAgIG9uQ2xpY2tfbG9va0ZpbGU6IGZ1bmN0aW9uIG9uQ2xpY2tfbG9va0ZpbGUoZSkgewogICAgICB2YXIgX3RoaXMxMiA9IHRoaXM7CgogICAgICBzaG93TG9hZGluZygpOwogICAgICBkZS5nZXRGaWxlSW1nKHsKICAgICAgICBpZDogZS5pZAogICAgICB9KS50aGVuKCAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfcmVmMyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU1KHJlcykgewogICAgICAgICAgdmFyIGxpc3QsIGksIGltZ1VybDsKICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUkKF9jb250ZXh0NSkgewogICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICBpZiAoIShyZXMuZGF0YS5zdWNjZXNzID09PSB0cnVlKSkgewogICAgICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMTU7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIGxpc3QgPSByZXMuZGF0YS5kYXRhLmlkczsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ1LnQwID0gX3JlZ2VuZXJhdG9yUnVudGltZS5rZXlzKGxpc3QpOwoKICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgaWYgKChfY29udGV4dDUudDEgPSBfY29udGV4dDUudDAoKSkuZG9uZSkgewogICAgICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIGkgPSBfY29udGV4dDUudDEudmFsdWU7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gNzsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMTIuZ2V0SW1nKGxpc3RbaV0pOwoKICAgICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgICAgaW1nVXJsID0gX2NvbnRleHQ1LnNlbnQ7CiAgICAgICAgICAgICAgICAgIGxpc3RbaV0gPSBpbWdVcmw7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgICAgX3RoaXMxMi4kc3RvcmUuY29tbWl0KCdhcHAvQ0hBTkdFX0lNQUdFJywgbGlzdCk7CgogICAgICAgICAgICAgICAgICBoaWRlTG9hZGluZygpOwogICAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDE2OwogICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICAgICAgICBoaWRlTG9hZGluZygpOwoKICAgICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIF9jYWxsZWU1KTsKICAgICAgICB9KSk7CgogICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gzKSB7CiAgICAgICAgICByZXR1cm4gX3JlZjMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB9OwogICAgICB9KCkpOwogICAgfSwKICAgIHNob3dUb2FzdDogZnVuY3Rpb24gc2hvd1RvYXN0KHRleHQsIHRpdGxlKSB7CiAgICAgIHZhciBfdGhpczEzID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNigpIHsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU2JChfY29udGV4dDYpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ2LnByZXYgPSBfY29udGV4dDYubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLCBfdGhpczEzLiRjb25maXJtKHRleHQsIHRpdGxlIHx8ICfmj5DnpLonLCB7CiAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAn56Gu5a6aJywKICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ+WPlua2iCcsCiAgICAgICAgICAgICAgICAgIHR5cGU6ICd3YXJuaW5nJwogICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNik7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIOWIoOmZpOetvue9suaWh+S5pgogICAgb25DbGlja19kZWxGaWxlOiBmdW5jdGlvbiBvbkNsaWNrX2RlbEZpbGUoZSkgewogICAgICB2YXIgX3RoaXMxNCA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTcoKSB7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNyQoX2NvbnRleHQ3KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ny5wcmV2ID0gX2NvbnRleHQ3Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMxNC5zaG93VG9hc3QoX3RoaXMxNC5vcmRlckluZm8uc2lnblN0YXR1cyA9PT0gMiA/ICflvZPliY3orqLljZXlt7LlrozmiJDvvIzliKDpmaTmlofkuablkI7vvIzkvJrmuIXnqbrmiYDmnInmlofkuabnmoTnrb7lkI3vvIzpnIDopoHph43mlrDnrb7nvbLvvIznoa7lrpropoHov5nmoLflgZrlkJfvvJ8nIDogJ+ehruiupOWIoOmZpOivpeaWh+S5pu+8nycsIF90aGlzMTQub3JkZXJJbmZvLnNpZ25TdGF0dXMgPT09IDIgPyAn6aOO6Zmp5o+Q56S6JyA6ICcnKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgaWYgKCFfY29udGV4dDcuc2VudCkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDY7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGRlLmRlbFNpZ25GaWxlKHsKICAgICAgICAgICAgICAgICAgaWQ6IGUuaWQKICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgICAgICAgICAgICBpZiAocmVzLnN1Y2Nlc3MgPT09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICBfdGhpczE0LiRmdW4ubXNnKCfliKDpmaTmiJDlip/vvIEnLCAnc3VjY2VzcycpOwoKICAgICAgICAgICAgICAgICAgICBfdGhpczE0LmluaXQoKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBfdGhpczE0LiRmdW4ubXNnKCfliKDpmaTlpLHotKXvvIEnLCAnZXJyb3InKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDc7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgX3RoaXMxNC4kZnVuLm1zZygn5bey5Y+W5raI5Yig6ZmkJyk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNyk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIOaJk+WNsOaWh+S5pgogICAgb25DbGlja19wcmludDogZnVuY3Rpb24gb25DbGlja19wcmludChlKSB7CiAgICAgIHZhciBfdGhpczE1ID0gdGhpczsKCiAgICAgIHRoaXMuJGF4aW9zKCdvcmcvb3JkZXItZG9jdW1lbnQtZmlsZScsIHsKICAgICAgICBpZDogZS5pZAogICAgICB9LCB7CiAgICAgICAgcmVzcG9uc2VUeXBlOiAnYXJyYXlidWZmZXInCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIHZhciBwZGZVcmwgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChuZXcgQmxvYihbcmVzXSwgewogICAgICAgICAgdHlwZTogJ2FwcGxpY2F0aW9uL3BkZicKICAgICAgICB9KSk7CiAgICAgICAgY29uc29sZS5sb2cocGRmVXJsKTsKICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgICAgIHZhciBpZnIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTsKICAgICAgICBpZnIuc3R5bGUuZnJhbWVib3JkZXIgPSAnbm8nOyAvLyBpZnIuc3R5bGUud2lkdGggPSAiMTAwJSI7CiAgICAgICAgLy8gaWZyLnN0eWxlLmhlaWdodCA9ICIxMDAlIjsKCiAgICAgICAgaWZyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgaWZyLnN0eWxlLnBhZ2VCcmVha0JlZm9yZSA9ICdhbHdheXMnOwogICAgICAgIGlmci5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3ByaW50UGRmJyArIGRhdGUpOwogICAgICAgIGlmci5zZXRBdHRyaWJ1dGUoJ25hbWUnLCAncHJpbnRQZGYnICsgZGF0ZSk7CiAgICAgICAgaWZyLnNyYyA9IHBkZlVybDsKICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcik7CgogICAgICAgIF90aGlzMTUuZG9QcmludCgncHJpbnRQZGYnICsgZGF0ZSk7CgogICAgICAgIHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKGlmci5zcmMpOyAvLyDph4rmlL5VUkwg5a+56LGhCiAgICAgIH0pOwogICAgfSwKICAgIC8vIOaJk+WNsAogICAgZG9QcmludDogZnVuY3Rpb24gZG9QcmludCh2YWwpIHsKICAgICAgdmFyIF90aGlzMTYgPSB0aGlzOwoKICAgICAgdmFyIG9yZG9ubmFuY2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh2YWwpLmNvbnRlbnRXaW5kb3c7CiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgIC8vIHdpbmRvdy5wcmludCgpCiAgICAgICAgb3Jkb25uYW5jZS5wcmludCgpOwogICAgICAgIF90aGlzMTYucGRmTG9hZGluZyA9IGZhbHNlOwogICAgICB9LCAxMDApOwogICAgfSwKICAgIC8vIOmHjeiuvuaWh+S5pgogICAgb25DbGlrY19TaWduRmlsZTogZnVuY3Rpb24gb25DbGlrY19TaWduRmlsZShlKSB7CiAgICAgIHZhciBfdGhpczE3ID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlOCgpIHsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU4JChfY29udGV4dDgpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ4LnByZXYgPSBfY29udGV4dDgubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlmICghKF90aGlzMTcub3JkZXJJbmZvLnNpZ25TdGF0dXMgPT09IDIpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMTcuc2hvd1RvYXN0KCflvZPliY3orqLljZXlt7LlrozmiJDvvIzph43orr7nrb7lkI3ljLrln5/lkI7vvIzkvJrmuIXnqbrmiYDmnInmlofkuabnmoTnrb7lkI3vvIzpnIDopoHph43mlrDnrb7nvbLvvIznoa7lrpropoHov5nmoLflgZrlkJfvvJ8nLCAn6aOO6Zmp5o+Q56S6Jyk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIGlmIChfY29udGV4dDguc2VudCkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDU7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgX3RoaXMxNy5kb2NJbmZvID0gewogICAgICAgICAgICAgICAgICBkb2NJZDogZS5pZCwKICAgICAgICAgICAgICAgICAgZG9jTmFtZTogZS5maWxlTmFtZSwKICAgICAgICAgICAgICAgICAgc2lnblN0YXR1czogZS5zaWduU3RhdHVzCiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTgpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyDkuIvovb3mnZDmlpkKICAgIGRvd25BbGxGaWxlOiBmdW5jdGlvbiBkb3duQWxsRmlsZShlKSB7CiAgICAgIHZhciBfdGhpczE4ID0gdGhpczsKCiAgICAgIGlmIChlID09PSAxKSB7CiAgICAgICAgdGhpcy4kYXhpb3MoJ29yZy9vcmRlci1hbm5leC1saXZlLWxvZycsIHsKICAgICAgICAgIG9yZGVySWQ6IHRoaXMub3JkZXJJZCwKICAgICAgICAgIG9yZGVyTnVtOiB0aGlzLm9yZGVySW5mby5vcmRlck51bQogICAgICAgIH0sIHsKICAgICAgICAgIHJlc3BvbnNlVHlwZTogJ2Jsb2InCiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoYmxvYikgewogICAgICAgICAgX3RoaXMxOC4kZnVuLmJsb2JGaWxlKGJsb2IsICIiLmNvbmNhdChfdGhpczE4Lm9yZGVySW5mby5vcmRlck51bSwgIi56aXAiKSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICAvLyDlvIDlp4vop4bpopEKICAgIG9uQ2xpY2tfZ29WaWRlbzogZnVuY3Rpb24gb25DbGlja19nb1ZpZGVvKCkgewogICAgICB2YXIgX2l0ZXJhdG9yNyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMub3JkZXJGaWxlTGlzdCksCiAgICAgICAgICBfc3RlcDc7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yNy5zKCk7ICEoX3N0ZXA3ID0gX2l0ZXJhdG9yNy5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgaSA9IF9zdGVwNy52YWx1ZTsKCiAgICAgICAgICBpZiAoaS5jb3ZlclN0YXR1cyAhPT0gMSkgewogICAgICAgICAgICB0aGlzLiRmdW4ubXNnKCfmnInmlofku7blsJrmnKrorr7nva7nrb7nvbLljLrln58nLCAnZXJyb3InKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2l0ZXJhdG9yNy5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yNy5mKCk7CiAgICAgIH0KCiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICBuYW1lOiAnZGVsZWdhdGVWaWRlbycsCiAgICAgICAgcXVlcnk6IHsKICAgICAgICAgIG9yZGVySWQ6IHRoaXMub3JkZXJJZAogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfQp9Ow=="},null]}