{"remainingRequest":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/thread-loader/dist/cjs.js!/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/home/jenkins_data/workspace/页面-公证处后台/node_modules/element-ui/lib/scrollbar.js","dependencies":[{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/element-ui/lib/scrollbar.js","mtime":499162500000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9Cgptb2R1bGUuZXhwb3J0cyA9Ci8qKioqKiovCmZ1bmN0aW9uIChtb2R1bGVzKSB7CiAgLy8gd2VicGFja0Jvb3RzdHJhcAoKICAvKioqKioqLwogIC8vIFRoZSBtb2R1bGUgY2FjaGUKCiAgLyoqKioqKi8KICB2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9OwogIC8qKioqKiovCgogIC8qKioqKiovCiAgLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb24KCiAgLyoqKioqKi8KCiAgZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkgewogICAgLyoqKioqKi8KCiAgICAvKioqKioqLwogICAgLy8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlCgogICAgLyoqKioqKi8KICAgIGlmIChpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkgewogICAgICAvKioqKioqLwogICAgICByZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0czsKICAgICAgLyoqKioqKi8KICAgIH0KICAgIC8qKioqKiovCiAgICAvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKQoKICAgIC8qKioqKiovCgoKICAgIHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHsKICAgICAgLyoqKioqKi8KICAgICAgaTogbW9kdWxlSWQsCgogICAgICAvKioqKioqLwogICAgICBsOiBmYWxzZSwKCiAgICAgIC8qKioqKiovCiAgICAgIGV4cG9ydHM6IHt9CiAgICAgIC8qKioqKiovCgogICAgfTsKICAgIC8qKioqKiovCgogICAgLyoqKioqKi8KICAgIC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvbgoKICAgIC8qKioqKiovCgogICAgbW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7CiAgICAvKioqKioqLwoKICAgIC8qKioqKiovCiAgICAvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkCgogICAgLyoqKioqKi8KCiAgICBtb2R1bGUubCA9IHRydWU7CiAgICAvKioqKioqLwoKICAgIC8qKioqKiovCiAgICAvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZQoKICAgIC8qKioqKiovCgogICAgcmV0dXJuIG1vZHVsZS5leHBvcnRzOwogICAgLyoqKioqKi8KICB9CiAgLyoqKioqKi8KCiAgLyoqKioqKi8KCiAgLyoqKioqKi8KICAvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKQoKICAvKioqKioqLwoKCiAgX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlczsKICAvKioqKioqLwoKICAvKioqKioqLwogIC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlCgogIC8qKioqKiovCgogIF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7CiAgLyoqKioqKi8KCiAgLyoqKioqKi8KICAvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHMKCiAgLyoqKioqKi8KCiAgX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24gKGV4cG9ydHMsIG5hbWUsIGdldHRlcikgewogICAgLyoqKioqKi8KICAgIGlmICghX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7CiAgICAgIC8qKioqKiovCiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7CiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgICBnZXQ6IGdldHRlcgogICAgICB9KTsKICAgICAgLyoqKioqKi8KICAgIH0KICAgIC8qKioqKiovCgogIH07CiAgLyoqKioqKi8KCiAgLyoqKioqKi8KICAvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzCgogIC8qKioqKiovCgoKICBfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbiAoZXhwb3J0cykgewogICAgLyoqKioqKi8KICAgIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHsKICAgICAgLyoqKioqKi8KICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgewogICAgICAgIHZhbHVlOiAnTW9kdWxlJwogICAgICB9KTsKICAgICAgLyoqKioqKi8KICAgIH0KICAgIC8qKioqKiovCgoKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsKICAgICAgdmFsdWU6IHRydWUKICAgIH0pOwogICAgLyoqKioqKi8KICB9OwogIC8qKioqKiovCgogIC8qKioqKiovCiAgLy8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0CgogIC8qKioqKiovCiAgLy8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0CgogIC8qKioqKiovCiAgLy8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zCgogIC8qKioqKiovCiAgLy8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0CgogIC8qKioqKiovCiAgLy8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZQoKICAvKioqKioqLwoKCiAgX193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24gKHZhbHVlLCBtb2RlKSB7CiAgICAvKioqKioqLwogICAgaWYgKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpOwogICAgLyoqKioqKi8KCiAgICBpZiAobW9kZSAmIDgpIHJldHVybiB2YWx1ZTsKICAgIC8qKioqKiovCgogICAgaWYgKG1vZGUgJiA0ICYmIF90eXBlb2YodmFsdWUpID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7CiAgICAvKioqKioqLwoKICAgIHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICAvKioqKioqLwoKICAgIF9fd2VicGFja19yZXF1aXJlX18ucihucyk7CiAgICAvKioqKioqLwoKCiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgewogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICB2YWx1ZTogdmFsdWUKICAgIH0pOwogICAgLyoqKioqKi8KCiAgICBpZiAobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHsKICAgICAgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICByZXR1cm4gdmFsdWVba2V5XTsKICAgICAgfS5iaW5kKG51bGwsIGtleSkpOwogICAgfQogICAgLyoqKioqKi8KCiAgICByZXR1cm4gbnM7CiAgICAvKioqKioqLwogIH07CiAgLyoqKioqKi8KCiAgLyoqKioqKi8KICAvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlcwoKICAvKioqKioqLwoKCiAgX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24gKG1vZHVsZSkgewogICAgLyoqKioqKi8KICAgIHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgPwogICAgLyoqKioqKi8KICAgIGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7CiAgICAgIHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsKICAgIH0gOgogICAgLyoqKioqKi8KICAgIGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7CiAgICAgIHJldHVybiBtb2R1bGU7CiAgICB9OwogICAgLyoqKioqKi8KCiAgICBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7CiAgICAvKioqKioqLwoKCiAgICByZXR1cm4gZ2V0dGVyOwogICAgLyoqKioqKi8KICB9OwogIC8qKioqKiovCgogIC8qKioqKiovCiAgLy8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsCgogIC8qKioqKiovCgoKICBfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbiAob2JqZWN0LCBwcm9wZXJ0eSkgewogICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsKICB9OwogIC8qKioqKiovCgogIC8qKioqKiovCiAgLy8gX193ZWJwYWNrX3B1YmxpY19wYXRoX18KCiAgLyoqKioqKi8KCgogIF9fd2VicGFja19yZXF1aXJlX18ucCA9ICIvZGlzdC8iOwogIC8qKioqKiovCgogIC8qKioqKiovCgogIC8qKioqKiovCiAgLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzCgogIC8qKioqKiovCgogIHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEyNyk7CiAgLyoqKioqKi8KfQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKLyoqKioqKi8KKHsKICAvKioqLwogIDEyNzoKICAvKioqLwogIGZ1bmN0aW9uIF8obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CiAgICAidXNlIHN0cmljdCI7CgogICAgX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pOyAvLyBFWFRFUk5BTCBNT0RVTEU6IGV4dGVybmFsICJlbGVtZW50LXVpL2xpYi91dGlscy9yZXNpemUtZXZlbnQiCgoKICAgIHZhciByZXNpemVfZXZlbnRfID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7IC8vIEVYVEVSTkFMIE1PRFVMRTogZXh0ZXJuYWwgImVsZW1lbnQtdWkvbGliL3V0aWxzL3Njcm9sbGJhci13aWR0aCIKCgogICAgdmFyIHNjcm9sbGJhcl93aWR0aF8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KTsKCiAgICB2YXIgc2Nyb2xsYmFyX3dpZHRoX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKHNjcm9sbGJhcl93aWR0aF8pOyAvLyBFWFRFUk5BTCBNT0RVTEU6IGV4dGVybmFsICJlbGVtZW50LXVpL2xpYi91dGlscy91dGlsIgoKCiAgICB2YXIgdXRpbF8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOyAvLyBFWFRFUk5BTCBNT0RVTEU6IGV4dGVybmFsICJlbGVtZW50LXVpL2xpYi91dGlscy9kb20iCgoKICAgIHZhciBkb21fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTsgLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9wYWNrYWdlcy9zY3JvbGxiYXIvc3JjL3V0aWwuanMKCgogICAgdmFyIEJBUl9NQVAgPSB7CiAgICAgIHZlcnRpY2FsOiB7CiAgICAgICAgb2Zmc2V0OiAnb2Zmc2V0SGVpZ2h0JywKICAgICAgICBzY3JvbGw6ICdzY3JvbGxUb3AnLAogICAgICAgIHNjcm9sbFNpemU6ICdzY3JvbGxIZWlnaHQnLAogICAgICAgIHNpemU6ICdoZWlnaHQnLAogICAgICAgIGtleTogJ3ZlcnRpY2FsJywKICAgICAgICBheGlzOiAnWScsCiAgICAgICAgY2xpZW50OiAnY2xpZW50WScsCiAgICAgICAgZGlyZWN0aW9uOiAndG9wJwogICAgICB9LAogICAgICBob3Jpem9udGFsOiB7CiAgICAgICAgb2Zmc2V0OiAnb2Zmc2V0V2lkdGgnLAogICAgICAgIHNjcm9sbDogJ3Njcm9sbExlZnQnLAogICAgICAgIHNjcm9sbFNpemU6ICdzY3JvbGxXaWR0aCcsCiAgICAgICAgc2l6ZTogJ3dpZHRoJywKICAgICAgICBrZXk6ICdob3Jpem9udGFsJywKICAgICAgICBheGlzOiAnWCcsCiAgICAgICAgY2xpZW50OiAnY2xpZW50WCcsCiAgICAgICAgZGlyZWN0aW9uOiAnbGVmdCcKICAgICAgfQogICAgfTsKCiAgICBmdW5jdGlvbiByZW5kZXJUaHVtYlN0eWxlKF9yZWYpIHsKICAgICAgdmFyIG1vdmUgPSBfcmVmLm1vdmUsCiAgICAgICAgICBzaXplID0gX3JlZi5zaXplLAogICAgICAgICAgYmFyID0gX3JlZi5iYXI7CiAgICAgIHZhciBzdHlsZSA9IHt9OwogICAgICB2YXIgdHJhbnNsYXRlID0gJ3RyYW5zbGF0ZScgKyBiYXIuYXhpcyArICcoJyArIG1vdmUgKyAnJSknOwogICAgICBzdHlsZVtiYXIuc2l6ZV0gPSBzaXplOwogICAgICBzdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2xhdGU7CiAgICAgIHN0eWxlLm1zVHJhbnNmb3JtID0gdHJhbnNsYXRlOwogICAgICBzdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSB0cmFuc2xhdGU7CiAgICAgIHJldHVybiBzdHlsZTsKICAgIH0KCiAgICA7IC8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vcGFja2FnZXMvc2Nyb2xsYmFyL3NyYy9iYXIuanMKCiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwoKICAgIC8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8KCiAgICB2YXIgc3JjX2JhciA9IHsKICAgICAgbmFtZTogJ0JhcicsCiAgICAgIHByb3BzOiB7CiAgICAgICAgdmVydGljYWw6IEJvb2xlYW4sCiAgICAgICAgc2l6ZTogU3RyaW5nLAogICAgICAgIG1vdmU6IE51bWJlcgogICAgICB9LAogICAgICBjb21wdXRlZDogewogICAgICAgIGJhcjogZnVuY3Rpb24gYmFyKCkgewogICAgICAgICAgcmV0dXJuIEJBUl9NQVBbdGhpcy52ZXJ0aWNhbCA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCddOwogICAgICAgIH0sCiAgICAgICAgd3JhcDogZnVuY3Rpb24gd3JhcCgpIHsKICAgICAgICAgIHJldHVybiB0aGlzLiRwYXJlbnQud3JhcDsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKGgpIHsKICAgICAgICB2YXIgc2l6ZSA9IHRoaXMuc2l6ZSwKICAgICAgICAgICAgbW92ZSA9IHRoaXMubW92ZSwKICAgICAgICAgICAgYmFyID0gdGhpcy5iYXI7CiAgICAgICAgcmV0dXJuIGgoJ2RpdicsIHsKICAgICAgICAgICdjbGFzcyc6IFsnZWwtc2Nyb2xsYmFyX19iYXInLCAnaXMtJyArIGJhci5rZXldLAogICAgICAgICAgb246IHsKICAgICAgICAgICAgJ21vdXNlZG93bic6IHRoaXMuY2xpY2tUcmFja0hhbmRsZXIKICAgICAgICAgIH0KICAgICAgICB9LCBbaCgnZGl2JywgewogICAgICAgICAgcmVmOiAndGh1bWInLAogICAgICAgICAgJ2NsYXNzJzogJ2VsLXNjcm9sbGJhcl9fdGh1bWInLAogICAgICAgICAgb246IHsKICAgICAgICAgICAgJ21vdXNlZG93bic6IHRoaXMuY2xpY2tUaHVtYkhhbmRsZXIKICAgICAgICAgIH0sCiAgICAgICAgICBzdHlsZTogcmVuZGVyVGh1bWJTdHlsZSh7CiAgICAgICAgICAgIHNpemU6IHNpemUsCiAgICAgICAgICAgIG1vdmU6IG1vdmUsCiAgICAgICAgICAgIGJhcjogYmFyCiAgICAgICAgICB9KQogICAgICAgIH0pXSk7CiAgICAgIH0sCiAgICAgIG1ldGhvZHM6IHsKICAgICAgICBjbGlja1RodW1iSGFuZGxlcjogZnVuY3Rpb24gY2xpY2tUaHVtYkhhbmRsZXIoZSkgewogICAgICAgICAgLy8gcHJldmVudCBjbGljayBldmVudCBvZiByaWdodCBidXR0b24KICAgICAgICAgIGlmIChlLmN0cmxLZXkgfHwgZS5idXR0b24gPT09IDIpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQoKICAgICAgICAgIHRoaXMuc3RhcnREcmFnKGUpOwogICAgICAgICAgdGhpc1t0aGlzLmJhci5heGlzXSA9IGUuY3VycmVudFRhcmdldFt0aGlzLmJhci5vZmZzZXRdIC0gKGVbdGhpcy5iYXIuY2xpZW50XSAtIGUuY3VycmVudFRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVt0aGlzLmJhci5kaXJlY3Rpb25dKTsKICAgICAgICB9LAogICAgICAgIGNsaWNrVHJhY2tIYW5kbGVyOiBmdW5jdGlvbiBjbGlja1RyYWNrSGFuZGxlcihlKSB7CiAgICAgICAgICB2YXIgb2Zmc2V0ID0gTWF0aC5hYnMoZS50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbdGhpcy5iYXIuZGlyZWN0aW9uXSAtIGVbdGhpcy5iYXIuY2xpZW50XSk7CiAgICAgICAgICB2YXIgdGh1bWJIYWxmID0gdGhpcy4kcmVmcy50aHVtYlt0aGlzLmJhci5vZmZzZXRdIC8gMjsKICAgICAgICAgIHZhciB0aHVtYlBvc2l0aW9uUGVyY2VudGFnZSA9IChvZmZzZXQgLSB0aHVtYkhhbGYpICogMTAwIC8gdGhpcy4kZWxbdGhpcy5iYXIub2Zmc2V0XTsKICAgICAgICAgIHRoaXMud3JhcFt0aGlzLmJhci5zY3JvbGxdID0gdGh1bWJQb3NpdGlvblBlcmNlbnRhZ2UgKiB0aGlzLndyYXBbdGhpcy5iYXIuc2Nyb2xsU2l6ZV0gLyAxMDA7CiAgICAgICAgfSwKICAgICAgICBzdGFydERyYWc6IGZ1bmN0aW9uIHN0YXJ0RHJhZyhlKSB7CiAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpOwogICAgICAgICAgdGhpcy5jdXJzb3JEb3duID0gdHJ1ZTsKICAgICAgICAgIE9iamVjdChkb21fWyJvbiJdKShkb2N1bWVudCwgJ21vdXNlbW92ZScsIHRoaXMubW91c2VNb3ZlRG9jdW1lbnRIYW5kbGVyKTsKICAgICAgICAgIE9iamVjdChkb21fWyJvbiJdKShkb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLm1vdXNlVXBEb2N1bWVudEhhbmRsZXIpOwoKICAgICAgICAgIGRvY3VtZW50Lm9uc2VsZWN0c3RhcnQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICBtb3VzZU1vdmVEb2N1bWVudEhhbmRsZXI6IGZ1bmN0aW9uIG1vdXNlTW92ZURvY3VtZW50SGFuZGxlcihlKSB7CiAgICAgICAgICBpZiAodGhpcy5jdXJzb3JEb3duID09PSBmYWxzZSkgcmV0dXJuOwogICAgICAgICAgdmFyIHByZXZQYWdlID0gdGhpc1t0aGlzLmJhci5heGlzXTsKICAgICAgICAgIGlmICghcHJldlBhZ2UpIHJldHVybjsKICAgICAgICAgIHZhciBvZmZzZXQgPSAodGhpcy4kZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbdGhpcy5iYXIuZGlyZWN0aW9uXSAtIGVbdGhpcy5iYXIuY2xpZW50XSkgKiAtMTsKICAgICAgICAgIHZhciB0aHVtYkNsaWNrUG9zaXRpb24gPSB0aGlzLiRyZWZzLnRodW1iW3RoaXMuYmFyLm9mZnNldF0gLSBwcmV2UGFnZTsKICAgICAgICAgIHZhciB0aHVtYlBvc2l0aW9uUGVyY2VudGFnZSA9IChvZmZzZXQgLSB0aHVtYkNsaWNrUG9zaXRpb24pICogMTAwIC8gdGhpcy4kZWxbdGhpcy5iYXIub2Zmc2V0XTsKICAgICAgICAgIHRoaXMud3JhcFt0aGlzLmJhci5zY3JvbGxdID0gdGh1bWJQb3NpdGlvblBlcmNlbnRhZ2UgKiB0aGlzLndyYXBbdGhpcy5iYXIuc2Nyb2xsU2l6ZV0gLyAxMDA7CiAgICAgICAgfSwKICAgICAgICBtb3VzZVVwRG9jdW1lbnRIYW5kbGVyOiBmdW5jdGlvbiBtb3VzZVVwRG9jdW1lbnRIYW5kbGVyKGUpIHsKICAgICAgICAgIHRoaXMuY3Vyc29yRG93biA9IGZhbHNlOwogICAgICAgICAgdGhpc1t0aGlzLmJhci5heGlzXSA9IDA7CiAgICAgICAgICBPYmplY3QoZG9tX1sib2ZmIl0pKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5tb3VzZU1vdmVEb2N1bWVudEhhbmRsZXIpOwogICAgICAgICAgZG9jdW1lbnQub25zZWxlY3RzdGFydCA9IG51bGw7CiAgICAgICAgfQogICAgICB9LAogICAgICBkZXN0cm95ZWQ6IGZ1bmN0aW9uIGRlc3Ryb3llZCgpIHsKICAgICAgICBPYmplY3QoZG9tX1sib2ZmIl0pKGRvY3VtZW50LCAnbW91c2V1cCcsIHRoaXMubW91c2VVcERvY3VtZW50SGFuZGxlcik7CiAgICAgIH0KICAgIH07IC8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vcGFja2FnZXMvc2Nyb2xsYmFyL3NyYy9tYWluLmpzCiAgICAvLyByZWZlcmVuY2UgaHR0cHM6Ly9naXRodWIuY29tL25vZWxkZWxnYWRvL2dlbWluaS1zY3JvbGxiYXIvYmxvYi9tYXN0ZXIvaW5kZXguanMKCiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwoKICAgIC8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8KCiAgICB2YXIgbWFpbiA9IHsKICAgICAgbmFtZTogJ0VsU2Nyb2xsYmFyJywKICAgICAgY29tcG9uZW50czogewogICAgICAgIEJhcjogc3JjX2JhcgogICAgICB9LAogICAgICBwcm9wczogewogICAgICAgIG5hdGl2ZTogQm9vbGVhbiwKICAgICAgICB3cmFwU3R5bGU6IHt9LAogICAgICAgIHdyYXBDbGFzczoge30sCiAgICAgICAgdmlld0NsYXNzOiB7fSwKICAgICAgICB2aWV3U3R5bGU6IHt9LAogICAgICAgIG5vcmVzaXplOiBCb29sZWFuLAogICAgICAgIC8vIOWmguaenCBjb250YWluZXIg5bC65a+45LiN5Lya5Y+R55Sf5Y+Y5YyW77yM5pyA5aW96K6+572u5a6D5Y+v5Lul5LyY5YyW5oCn6IO9CiAgICAgICAgdGFnOiB7CiAgICAgICAgICB0eXBlOiBTdHJpbmcsCiAgICAgICAgICBkZWZhdWx0OiAnZGl2JwogICAgICAgIH0KICAgICAgfSwKICAgICAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgc2l6ZVdpZHRoOiAnMCcsCiAgICAgICAgICBzaXplSGVpZ2h0OiAnMCcsCiAgICAgICAgICBtb3ZlWDogMCwKICAgICAgICAgIG1vdmVZOiAwCiAgICAgICAgfTsKICAgICAgfSwKICAgICAgY29tcHV0ZWQ6IHsKICAgICAgICB3cmFwOiBmdW5jdGlvbiB3cmFwKCkgewogICAgICAgICAgcmV0dXJuIHRoaXMuJHJlZnMud3JhcDsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKGgpIHsKICAgICAgICB2YXIgZ3V0dGVyID0gc2Nyb2xsYmFyX3dpZHRoX2RlZmF1bHQoKSgpOwogICAgICAgIHZhciBzdHlsZSA9IHRoaXMud3JhcFN0eWxlOwoKICAgICAgICBpZiAoZ3V0dGVyKSB7CiAgICAgICAgICB2YXIgZ3V0dGVyV2l0aCA9ICctJyArIGd1dHRlciArICdweCc7CiAgICAgICAgICB2YXIgZ3V0dGVyU3R5bGUgPSAnbWFyZ2luLWJvdHRvbTogJyArIGd1dHRlcldpdGggKyAnOyBtYXJnaW4tcmlnaHQ6ICcgKyBndXR0ZXJXaXRoICsgJzsnOwoKICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMud3JhcFN0eWxlKSkgewogICAgICAgICAgICBzdHlsZSA9IE9iamVjdCh1dGlsX1sidG9PYmplY3QiXSkodGhpcy53cmFwU3R5bGUpOwogICAgICAgICAgICBzdHlsZS5tYXJnaW5SaWdodCA9IHN0eWxlLm1hcmdpbkJvdHRvbSA9IGd1dHRlcldpdGg7CiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLndyYXBTdHlsZSA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgc3R5bGUgKz0gZ3V0dGVyU3R5bGU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzdHlsZSA9IGd1dHRlclN0eWxlOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFyIHZpZXcgPSBoKHRoaXMudGFnLCB7CiAgICAgICAgICBjbGFzczogWydlbC1zY3JvbGxiYXJfX3ZpZXcnLCB0aGlzLnZpZXdDbGFzc10sCiAgICAgICAgICBzdHlsZTogdGhpcy52aWV3U3R5bGUsCiAgICAgICAgICByZWY6ICdyZXNpemUnCiAgICAgICAgfSwgdGhpcy4kc2xvdHMuZGVmYXVsdCk7CiAgICAgICAgdmFyIHdyYXAgPSBoKCdkaXYnLCB7CiAgICAgICAgICByZWY6ICd3cmFwJywKICAgICAgICAgIHN0eWxlOiBzdHlsZSwKICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICdzY3JvbGwnOiB0aGlzLmhhbmRsZVNjcm9sbAogICAgICAgICAgfSwKICAgICAgICAgICdjbGFzcyc6IFt0aGlzLndyYXBDbGFzcywgJ2VsLXNjcm9sbGJhcl9fd3JhcCcsIGd1dHRlciA/ICcnIDogJ2VsLXNjcm9sbGJhcl9fd3JhcC0taGlkZGVuLWRlZmF1bHQnXQogICAgICAgIH0sIFtbdmlld11dKTsKICAgICAgICB2YXIgbm9kZXMgPSB2b2lkIDA7CgogICAgICAgIGlmICghdGhpcy5uYXRpdmUpIHsKICAgICAgICAgIG5vZGVzID0gW3dyYXAsIGgoc3JjX2JhciwgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIG1vdmU6IHRoaXMubW92ZVgsCiAgICAgICAgICAgICAgc2l6ZTogdGhpcy5zaXplV2lkdGgKICAgICAgICAgICAgfQogICAgICAgICAgfSksIGgoc3JjX2JhciwgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIHZlcnRpY2FsOiB0cnVlLAogICAgICAgICAgICAgIG1vdmU6IHRoaXMubW92ZVksCiAgICAgICAgICAgICAgc2l6ZTogdGhpcy5zaXplSGVpZ2h0CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgbm9kZXMgPSBbaCgnZGl2JywgewogICAgICAgICAgICByZWY6ICd3cmFwJywKICAgICAgICAgICAgJ2NsYXNzJzogW3RoaXMud3JhcENsYXNzLCAnZWwtc2Nyb2xsYmFyX193cmFwJ10sCiAgICAgICAgICAgIHN0eWxlOiBzdHlsZQogICAgICAgICAgfSwgW1t2aWV3XV0pXTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBoKCdkaXYnLCB7CiAgICAgICAgICBjbGFzczogJ2VsLXNjcm9sbGJhcicKICAgICAgICB9LCBub2Rlcyk7CiAgICAgIH0sCiAgICAgIG1ldGhvZHM6IHsKICAgICAgICBoYW5kbGVTY3JvbGw6IGZ1bmN0aW9uIGhhbmRsZVNjcm9sbCgpIHsKICAgICAgICAgIHZhciB3cmFwID0gdGhpcy53cmFwOwogICAgICAgICAgdGhpcy5tb3ZlWSA9IHdyYXAuc2Nyb2xsVG9wICogMTAwIC8gd3JhcC5jbGllbnRIZWlnaHQ7CiAgICAgICAgICB0aGlzLm1vdmVYID0gd3JhcC5zY3JvbGxMZWZ0ICogMTAwIC8gd3JhcC5jbGllbnRXaWR0aDsKICAgICAgICB9LAogICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkgewogICAgICAgICAgdmFyIGhlaWdodFBlcmNlbnRhZ2UgPSB2b2lkIDAsCiAgICAgICAgICAgICAgd2lkdGhQZXJjZW50YWdlID0gdm9pZCAwOwogICAgICAgICAgdmFyIHdyYXAgPSB0aGlzLndyYXA7CiAgICAgICAgICBpZiAoIXdyYXApIHJldHVybjsKICAgICAgICAgIGhlaWdodFBlcmNlbnRhZ2UgPSB3cmFwLmNsaWVudEhlaWdodCAqIDEwMCAvIHdyYXAuc2Nyb2xsSGVpZ2h0OwogICAgICAgICAgd2lkdGhQZXJjZW50YWdlID0gd3JhcC5jbGllbnRXaWR0aCAqIDEwMCAvIHdyYXAuc2Nyb2xsV2lkdGg7CiAgICAgICAgICB0aGlzLnNpemVIZWlnaHQgPSBoZWlnaHRQZXJjZW50YWdlIDwgMTAwID8gaGVpZ2h0UGVyY2VudGFnZSArICclJyA6ICcnOwogICAgICAgICAgdGhpcy5zaXplV2lkdGggPSB3aWR0aFBlcmNlbnRhZ2UgPCAxMDAgPyB3aWR0aFBlcmNlbnRhZ2UgKyAnJScgOiAnJzsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICAgICAgaWYgKHRoaXMubmF0aXZlKSByZXR1cm47CiAgICAgICAgdGhpcy4kbmV4dFRpY2sodGhpcy51cGRhdGUpOwogICAgICAgICF0aGlzLm5vcmVzaXplICYmIE9iamVjdChyZXNpemVfZXZlbnRfWyJhZGRSZXNpemVMaXN0ZW5lciJdKSh0aGlzLiRyZWZzLnJlc2l6ZSwgdGhpcy51cGRhdGUpOwogICAgICB9LAogICAgICBiZWZvcmVEZXN0cm95OiBmdW5jdGlvbiBiZWZvcmVEZXN0cm95KCkgewogICAgICAgIGlmICh0aGlzLm5hdGl2ZSkgcmV0dXJuOwogICAgICAgICF0aGlzLm5vcmVzaXplICYmIE9iamVjdChyZXNpemVfZXZlbnRfWyJyZW1vdmVSZXNpemVMaXN0ZW5lciJdKSh0aGlzLiRyZWZzLnJlc2l6ZSwgdGhpcy51cGRhdGUpOwogICAgICB9CiAgICB9OyAvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3BhY2thZ2VzL3Njcm9sbGJhci9pbmRleC5qcwoKICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCgogICAgbWFpbi5pbnN0YWxsID0gZnVuY3Rpb24gKFZ1ZSkgewogICAgICBWdWUuY29tcG9uZW50KG1haW4ubmFtZSwgbWFpbik7CiAgICB9OwogICAgLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLwoKCiAgICB2YXIgc2Nyb2xsYmFyID0gX193ZWJwYWNrX2V4cG9ydHNfX1siZGVmYXVsdCJdID0gbWFpbjsKICAgIC8qKiovCiAgfSwKCiAgLyoqKi8KICAxNjoKICAvKioqLwogIGZ1bmN0aW9uIF8obW9kdWxlLCBleHBvcnRzKSB7CiAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoImVsZW1lbnQtdWkvbGliL3V0aWxzL3Jlc2l6ZS1ldmVudCIpOwogICAgLyoqKi8KICB9LAoKICAvKioqLwogIDI6CiAgLyoqKi8KICBmdW5jdGlvbiBfKG1vZHVsZSwgZXhwb3J0cykgewogICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCJlbGVtZW50LXVpL2xpYi91dGlscy9kb20iKTsKICAgIC8qKiovCiAgfSwKCiAgLyoqKi8KICAzOgogIC8qKiovCiAgZnVuY3Rpb24gXyhtb2R1bGUsIGV4cG9ydHMpIHsKICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgiZWxlbWVudC11aS9saWIvdXRpbHMvdXRpbCIpOwogICAgLyoqKi8KICB9LAoKICAvKioqLwogIDM5OgogIC8qKiovCiAgZnVuY3Rpb24gXyhtb2R1bGUsIGV4cG9ydHMpIHsKICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgiZWxlbWVudC11aS9saWIvdXRpbHMvc2Nyb2xsYmFyLXdpZHRoIik7CiAgICAvKioqLwogIH0KICAvKioqKioqLwoKfSk7"},null]}