{"remainingRequest":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/thread-loader/dist/cjs.js!/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/home/jenkins_data/workspace/页面-公证处后台/node_modules/element-ui/lib/utils/date.js","dependencies":[{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/element-ui/lib/utils/date.js","mtime":499162500000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:J3VzZSBzdHJpY3QnOwovKiBNb2RpZmllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS90YXlsb3JoYWtlcy9mZWNoYQogKgogKiBUaGUgTUlUIExpY2Vuc2UgKE1JVCkKICoKICogQ29weXJpZ2h0IChjKSAyMDE1IFRheWxvciBIYWtlcwogKgogKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5CiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsCiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMKICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbAogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMKICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKICoKICogICAgIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbAogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgogKgogKiAgICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksCiAqICAgICBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgogKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLAogKiAgICAgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUKICogU09GVFdBUkUuCiAqLwoKLyplc2xpbnQtZGlzYWJsZSovCi8vIOaKiiBZWVlZLU1NLUREIOaUueaIkOS6hiB5eXl5LU1NLWRkCgooZnVuY3Rpb24gKG1haW4pIHsKICAndXNlIHN0cmljdCc7CiAgLyoqCiAgICogUGFyc2Ugb3IgZm9ybWF0IGRhdGVzCiAgICogQGNsYXNzIGZlY2hhCiAgICovCgogIHZhciBmZWNoYSA9IHt9OwogIHZhciB0b2tlbiA9IC9kezEsNH18TXsxLDR9fHl5KD86eXkpP3xTezEsM318RG98Wlp8KFtIaE1zRG1dKVwxP3xbYUFdfCJbXiJdKiJ8J1teJ10qJy9nOwogIHZhciB0d29EaWdpdHMgPSAnXFxkXFxkPyc7CiAgdmFyIHRocmVlRGlnaXRzID0gJ1xcZHszfSc7CiAgdmFyIGZvdXJEaWdpdHMgPSAnXFxkezR9JzsKICB2YXIgd29yZCA9ICdbXlxcc10rJzsKICB2YXIgbGl0ZXJhbCA9IC9cWyhbXl0qPylcXS9nbTsKCiAgdmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307CgogIGZ1bmN0aW9uIHJlZ2V4RXNjYXBlKHN0cikgewogICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bfFxceygpW14kKyo/Li1dL2csICdcXCQmJyk7CiAgfQoKICBmdW5jdGlvbiBzaG9ydGVuKGFyciwgc0xlbikgewogICAgdmFyIG5ld0FyciA9IFtdOwoKICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgbmV3QXJyLnB1c2goYXJyW2ldLnN1YnN0cigwLCBzTGVuKSk7CiAgICB9CgogICAgcmV0dXJuIG5ld0FycjsKICB9CgogIGZ1bmN0aW9uIG1vbnRoVXBkYXRlKGFyck5hbWUpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoZCwgdiwgaTE4bikgewogICAgICB2YXIgaW5kZXggPSBpMThuW2Fyck5hbWVdLmluZGV4T2Yodi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHYuc3Vic3RyKDEpLnRvTG93ZXJDYXNlKCkpOwoKICAgICAgaWYgKH5pbmRleCkgewogICAgICAgIGQubW9udGggPSBpbmRleDsKICAgICAgfQogICAgfTsKICB9CgogIGZ1bmN0aW9uIHBhZCh2YWwsIGxlbikgewogICAgdmFsID0gU3RyaW5nKHZhbCk7CiAgICBsZW4gPSBsZW4gfHwgMjsKCiAgICB3aGlsZSAodmFsLmxlbmd0aCA8IGxlbikgewogICAgICB2YWwgPSAnMCcgKyB2YWw7CiAgICB9CgogICAgcmV0dXJuIHZhbDsKICB9CgogIHZhciBkYXlOYW1lcyA9IFsnU3VuZGF5JywgJ01vbmRheScsICdUdWVzZGF5JywgJ1dlZG5lc2RheScsICdUaHVyc2RheScsICdGcmlkYXknLCAnU2F0dXJkYXknXTsKICB2YXIgbW9udGhOYW1lcyA9IFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5JywgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2N0b2JlcicsICdOb3ZlbWJlcicsICdEZWNlbWJlciddOwogIHZhciBtb250aE5hbWVzU2hvcnQgPSBzaG9ydGVuKG1vbnRoTmFtZXMsIDMpOwogIHZhciBkYXlOYW1lc1Nob3J0ID0gc2hvcnRlbihkYXlOYW1lcywgMyk7CiAgZmVjaGEuaTE4biA9IHsKICAgIGRheU5hbWVzU2hvcnQ6IGRheU5hbWVzU2hvcnQsCiAgICBkYXlOYW1lczogZGF5TmFtZXMsCiAgICBtb250aE5hbWVzU2hvcnQ6IG1vbnRoTmFtZXNTaG9ydCwKICAgIG1vbnRoTmFtZXM6IG1vbnRoTmFtZXMsCiAgICBhbVBtOiBbJ2FtJywgJ3BtJ10sCiAgICBEb0ZuOiBmdW5jdGlvbiBEb0ZuKEQpIHsKICAgICAgcmV0dXJuIEQgKyBbJ3RoJywgJ3N0JywgJ25kJywgJ3JkJ11bRCAlIDEwID4gMyA/IDAgOiAoRCAtIEQgJSAxMCAhPT0gMTApICogRCAlIDEwXTsKICAgIH0KICB9OwogIHZhciBmb3JtYXRGbGFncyA9IHsKICAgIEQ6IGZ1bmN0aW9uIEQoZGF0ZU9iaikgewogICAgICByZXR1cm4gZGF0ZU9iai5nZXREYXkoKTsKICAgIH0sCiAgICBERDogZnVuY3Rpb24gREQoZGF0ZU9iaikgewogICAgICByZXR1cm4gcGFkKGRhdGVPYmouZ2V0RGF5KCkpOwogICAgfSwKICAgIERvOiBmdW5jdGlvbiBEbyhkYXRlT2JqLCBpMThuKSB7CiAgICAgIHJldHVybiBpMThuLkRvRm4oZGF0ZU9iai5nZXREYXRlKCkpOwogICAgfSwKICAgIGQ6IGZ1bmN0aW9uIGQoZGF0ZU9iaikgewogICAgICByZXR1cm4gZGF0ZU9iai5nZXREYXRlKCk7CiAgICB9LAogICAgZGQ6IGZ1bmN0aW9uIGRkKGRhdGVPYmopIHsKICAgICAgcmV0dXJuIHBhZChkYXRlT2JqLmdldERhdGUoKSk7CiAgICB9LAogICAgZGRkOiBmdW5jdGlvbiBkZGQoZGF0ZU9iaiwgaTE4bikgewogICAgICByZXR1cm4gaTE4bi5kYXlOYW1lc1Nob3J0W2RhdGVPYmouZ2V0RGF5KCldOwogICAgfSwKICAgIGRkZGQ6IGZ1bmN0aW9uIGRkZGQoZGF0ZU9iaiwgaTE4bikgewogICAgICByZXR1cm4gaTE4bi5kYXlOYW1lc1tkYXRlT2JqLmdldERheSgpXTsKICAgIH0sCiAgICBNOiBmdW5jdGlvbiBNKGRhdGVPYmopIHsKICAgICAgcmV0dXJuIGRhdGVPYmouZ2V0TW9udGgoKSArIDE7CiAgICB9LAogICAgTU06IGZ1bmN0aW9uIE1NKGRhdGVPYmopIHsKICAgICAgcmV0dXJuIHBhZChkYXRlT2JqLmdldE1vbnRoKCkgKyAxKTsKICAgIH0sCiAgICBNTU06IGZ1bmN0aW9uIE1NTShkYXRlT2JqLCBpMThuKSB7CiAgICAgIHJldHVybiBpMThuLm1vbnRoTmFtZXNTaG9ydFtkYXRlT2JqLmdldE1vbnRoKCldOwogICAgfSwKICAgIE1NTU06IGZ1bmN0aW9uIE1NTU0oZGF0ZU9iaiwgaTE4bikgewogICAgICByZXR1cm4gaTE4bi5tb250aE5hbWVzW2RhdGVPYmouZ2V0TW9udGgoKV07CiAgICB9LAogICAgeXk6IGZ1bmN0aW9uIHl5KGRhdGVPYmopIHsKICAgICAgcmV0dXJuIHBhZChTdHJpbmcoZGF0ZU9iai5nZXRGdWxsWWVhcigpKSwgNCkuc3Vic3RyKDIpOwogICAgfSwKICAgIHl5eXk6IGZ1bmN0aW9uIHl5eXkoZGF0ZU9iaikgewogICAgICByZXR1cm4gcGFkKGRhdGVPYmouZ2V0RnVsbFllYXIoKSwgNCk7CiAgICB9LAogICAgaDogZnVuY3Rpb24gaChkYXRlT2JqKSB7CiAgICAgIHJldHVybiBkYXRlT2JqLmdldEhvdXJzKCkgJSAxMiB8fCAxMjsKICAgIH0sCiAgICBoaDogZnVuY3Rpb24gaGgoZGF0ZU9iaikgewogICAgICByZXR1cm4gcGFkKGRhdGVPYmouZ2V0SG91cnMoKSAlIDEyIHx8IDEyKTsKICAgIH0sCiAgICBIOiBmdW5jdGlvbiBIKGRhdGVPYmopIHsKICAgICAgcmV0dXJuIGRhdGVPYmouZ2V0SG91cnMoKTsKICAgIH0sCiAgICBISDogZnVuY3Rpb24gSEgoZGF0ZU9iaikgewogICAgICByZXR1cm4gcGFkKGRhdGVPYmouZ2V0SG91cnMoKSk7CiAgICB9LAogICAgbTogZnVuY3Rpb24gbShkYXRlT2JqKSB7CiAgICAgIHJldHVybiBkYXRlT2JqLmdldE1pbnV0ZXMoKTsKICAgIH0sCiAgICBtbTogZnVuY3Rpb24gbW0oZGF0ZU9iaikgewogICAgICByZXR1cm4gcGFkKGRhdGVPYmouZ2V0TWludXRlcygpKTsKICAgIH0sCiAgICBzOiBmdW5jdGlvbiBzKGRhdGVPYmopIHsKICAgICAgcmV0dXJuIGRhdGVPYmouZ2V0U2Vjb25kcygpOwogICAgfSwKICAgIHNzOiBmdW5jdGlvbiBzcyhkYXRlT2JqKSB7CiAgICAgIHJldHVybiBwYWQoZGF0ZU9iai5nZXRTZWNvbmRzKCkpOwogICAgfSwKICAgIFM6IGZ1bmN0aW9uIFMoZGF0ZU9iaikgewogICAgICByZXR1cm4gTWF0aC5yb3VuZChkYXRlT2JqLmdldE1pbGxpc2Vjb25kcygpIC8gMTAwKTsKICAgIH0sCiAgICBTUzogZnVuY3Rpb24gU1MoZGF0ZU9iaikgewogICAgICByZXR1cm4gcGFkKE1hdGgucm91bmQoZGF0ZU9iai5nZXRNaWxsaXNlY29uZHMoKSAvIDEwKSwgMik7CiAgICB9LAogICAgU1NTOiBmdW5jdGlvbiBTU1MoZGF0ZU9iaikgewogICAgICByZXR1cm4gcGFkKGRhdGVPYmouZ2V0TWlsbGlzZWNvbmRzKCksIDMpOwogICAgfSwKICAgIGE6IGZ1bmN0aW9uIGEoZGF0ZU9iaiwgaTE4bikgewogICAgICByZXR1cm4gZGF0ZU9iai5nZXRIb3VycygpIDwgMTIgPyBpMThuLmFtUG1bMF0gOiBpMThuLmFtUG1bMV07CiAgICB9LAogICAgQTogZnVuY3Rpb24gQShkYXRlT2JqLCBpMThuKSB7CiAgICAgIHJldHVybiBkYXRlT2JqLmdldEhvdXJzKCkgPCAxMiA/IGkxOG4uYW1QbVswXS50b1VwcGVyQ2FzZSgpIDogaTE4bi5hbVBtWzFdLnRvVXBwZXJDYXNlKCk7CiAgICB9LAogICAgWlo6IGZ1bmN0aW9uIFpaKGRhdGVPYmopIHsKICAgICAgdmFyIG8gPSBkYXRlT2JqLmdldFRpbWV6b25lT2Zmc2V0KCk7CiAgICAgIHJldHVybiAobyA+IDAgPyAnLScgOiAnKycpICsgcGFkKE1hdGguZmxvb3IoTWF0aC5hYnMobykgLyA2MCkgKiAxMDAgKyBNYXRoLmFicyhvKSAlIDYwLCA0KTsKICAgIH0KICB9OwogIHZhciBwYXJzZUZsYWdzID0gewogICAgZDogW3R3b0RpZ2l0cywgZnVuY3Rpb24gKGQsIHYpIHsKICAgICAgZC5kYXkgPSB2OwogICAgfV0sCiAgICBEbzogW3R3b0RpZ2l0cyArIHdvcmQsIGZ1bmN0aW9uIChkLCB2KSB7CiAgICAgIGQuZGF5ID0gcGFyc2VJbnQodiwgMTApOwogICAgfV0sCiAgICBNOiBbdHdvRGlnaXRzLCBmdW5jdGlvbiAoZCwgdikgewogICAgICBkLm1vbnRoID0gdiAtIDE7CiAgICB9XSwKICAgIHl5OiBbdHdvRGlnaXRzLCBmdW5jdGlvbiAoZCwgdikgewogICAgICB2YXIgZGEgPSBuZXcgRGF0ZSgpLAogICAgICAgICAgY2VudCA9ICsoJycgKyBkYS5nZXRGdWxsWWVhcigpKS5zdWJzdHIoMCwgMik7CiAgICAgIGQueWVhciA9ICcnICsgKHYgPiA2OCA/IGNlbnQgLSAxIDogY2VudCkgKyB2OwogICAgfV0sCiAgICBoOiBbdHdvRGlnaXRzLCBmdW5jdGlvbiAoZCwgdikgewogICAgICBkLmhvdXIgPSB2OwogICAgfV0sCiAgICBtOiBbdHdvRGlnaXRzLCBmdW5jdGlvbiAoZCwgdikgewogICAgICBkLm1pbnV0ZSA9IHY7CiAgICB9XSwKICAgIHM6IFt0d29EaWdpdHMsIGZ1bmN0aW9uIChkLCB2KSB7CiAgICAgIGQuc2Vjb25kID0gdjsKICAgIH1dLAogICAgeXl5eTogW2ZvdXJEaWdpdHMsIGZ1bmN0aW9uIChkLCB2KSB7CiAgICAgIGQueWVhciA9IHY7CiAgICB9XSwKICAgIFM6IFsnXFxkJywgZnVuY3Rpb24gKGQsIHYpIHsKICAgICAgZC5taWxsaXNlY29uZCA9IHYgKiAxMDA7CiAgICB9XSwKICAgIFNTOiBbJ1xcZHsyfScsIGZ1bmN0aW9uIChkLCB2KSB7CiAgICAgIGQubWlsbGlzZWNvbmQgPSB2ICogMTA7CiAgICB9XSwKICAgIFNTUzogW3RocmVlRGlnaXRzLCBmdW5jdGlvbiAoZCwgdikgewogICAgICBkLm1pbGxpc2Vjb25kID0gdjsKICAgIH1dLAogICAgRDogW3R3b0RpZ2l0cywgbm9vcF0sCiAgICBkZGQ6IFt3b3JkLCBub29wXSwKICAgIE1NTTogW3dvcmQsIG1vbnRoVXBkYXRlKCdtb250aE5hbWVzU2hvcnQnKV0sCiAgICBNTU1NOiBbd29yZCwgbW9udGhVcGRhdGUoJ21vbnRoTmFtZXMnKV0sCiAgICBhOiBbd29yZCwgZnVuY3Rpb24gKGQsIHYsIGkxOG4pIHsKICAgICAgdmFyIHZhbCA9IHYudG9Mb3dlckNhc2UoKTsKCiAgICAgIGlmICh2YWwgPT09IGkxOG4uYW1QbVswXSkgewogICAgICAgIGQuaXNQbSA9IGZhbHNlOwogICAgICB9IGVsc2UgaWYgKHZhbCA9PT0gaTE4bi5hbVBtWzFdKSB7CiAgICAgICAgZC5pc1BtID0gdHJ1ZTsKICAgICAgfQogICAgfV0sCiAgICBaWjogWydbXlxcc10qP1tcXCtcXC1dXFxkXFxkOj9cXGRcXGR8W15cXHNdKj9aJywgZnVuY3Rpb24gKGQsIHYpIHsKICAgICAgdmFyIHBhcnRzID0gKHYgKyAnJykubWF0Y2goLyhbKy1dfFxkXGQpL2dpKSwKICAgICAgICAgIG1pbnV0ZXM7CgogICAgICBpZiAocGFydHMpIHsKICAgICAgICBtaW51dGVzID0gKyhwYXJ0c1sxXSAqIDYwKSArIHBhcnNlSW50KHBhcnRzWzJdLCAxMCk7CiAgICAgICAgZC50aW1lem9uZU9mZnNldCA9IHBhcnRzWzBdID09PSAnKycgPyBtaW51dGVzIDogLW1pbnV0ZXM7CiAgICAgIH0KICAgIH1dCiAgfTsKICBwYXJzZUZsYWdzLmRkID0gcGFyc2VGbGFncy5kOwogIHBhcnNlRmxhZ3MuZGRkZCA9IHBhcnNlRmxhZ3MuZGRkOwogIHBhcnNlRmxhZ3MuREQgPSBwYXJzZUZsYWdzLkQ7CiAgcGFyc2VGbGFncy5tbSA9IHBhcnNlRmxhZ3MubTsKICBwYXJzZUZsYWdzLmhoID0gcGFyc2VGbGFncy5IID0gcGFyc2VGbGFncy5ISCA9IHBhcnNlRmxhZ3MuaDsKICBwYXJzZUZsYWdzLk1NID0gcGFyc2VGbGFncy5NOwogIHBhcnNlRmxhZ3Muc3MgPSBwYXJzZUZsYWdzLnM7CiAgcGFyc2VGbGFncy5BID0gcGFyc2VGbGFncy5hOyAvLyBTb21lIGNvbW1vbiBmb3JtYXQgc3RyaW5ncwoKICBmZWNoYS5tYXNrcyA9IHsKICAgIGRlZmF1bHQ6ICdkZGQgTU1NIGRkIHl5eXkgSEg6bW06c3MnLAogICAgc2hvcnREYXRlOiAnTS9EL3l5JywKICAgIG1lZGl1bURhdGU6ICdNTU0gZCwgeXl5eScsCiAgICBsb25nRGF0ZTogJ01NTU0gZCwgeXl5eScsCiAgICBmdWxsRGF0ZTogJ2RkZGQsIE1NTU0gZCwgeXl5eScsCiAgICBzaG9ydFRpbWU6ICdISDptbScsCiAgICBtZWRpdW1UaW1lOiAnSEg6bW06c3MnLAogICAgbG9uZ1RpbWU6ICdISDptbTpzcy5TU1MnCiAgfTsKICAvKioqCiAgICogRm9ybWF0IGEgZGF0ZQogICAqIEBtZXRob2QgZm9ybWF0CiAgICogQHBhcmFtIHtEYXRlfG51bWJlcn0gZGF0ZU9iagogICAqIEBwYXJhbSB7c3RyaW5nfSBtYXNrIEZvcm1hdCBvZiB0aGUgZGF0ZSwgaS5lLiAnbW0tZGQteXknIG9yICdzaG9ydERhdGUnCiAgICovCgogIGZlY2hhLmZvcm1hdCA9IGZ1bmN0aW9uIChkYXRlT2JqLCBtYXNrLCBpMThuU2V0dGluZ3MpIHsKICAgIHZhciBpMThuID0gaTE4blNldHRpbmdzIHx8IGZlY2hhLmkxOG47CgogICAgaWYgKHR5cGVvZiBkYXRlT2JqID09PSAnbnVtYmVyJykgewogICAgICBkYXRlT2JqID0gbmV3IERhdGUoZGF0ZU9iaik7CiAgICB9CgogICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkYXRlT2JqKSAhPT0gJ1tvYmplY3QgRGF0ZV0nIHx8IGlzTmFOKGRhdGVPYmouZ2V0VGltZSgpKSkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgRGF0ZSBpbiBmZWNoYS5mb3JtYXQnKTsKICAgIH0KCiAgICBtYXNrID0gZmVjaGEubWFza3NbbWFza10gfHwgbWFzayB8fCBmZWNoYS5tYXNrc1snZGVmYXVsdCddOwogICAgdmFyIGxpdGVyYWxzID0gW107IC8vIE1ha2UgbGl0ZXJhbHMgaW5hY3RpdmUgYnkgcmVwbGFjaW5nIHRoZW0gd2l0aCA/PwoKICAgIG1hc2sgPSBtYXNrLnJlcGxhY2UobGl0ZXJhbCwgZnVuY3Rpb24gKCQwLCAkMSkgewogICAgICBsaXRlcmFscy5wdXNoKCQxKTsKICAgICAgcmV0dXJuICdAQEAnOwogICAgfSk7IC8vIEFwcGx5IGZvcm1hdHRpbmcgcnVsZXMKCiAgICBtYXNrID0gbWFzay5yZXBsYWNlKHRva2VuLCBmdW5jdGlvbiAoJDApIHsKICAgICAgcmV0dXJuICQwIGluIGZvcm1hdEZsYWdzID8gZm9ybWF0RmxhZ3NbJDBdKGRhdGVPYmosIGkxOG4pIDogJDAuc2xpY2UoMSwgJDAubGVuZ3RoIC0gMSk7CiAgICB9KTsgLy8gSW5saW5lIGxpdGVyYWwgdmFsdWVzIGJhY2sgaW50byB0aGUgZm9ybWF0dGVkIHZhbHVlCgogICAgcmV0dXJuIG1hc2sucmVwbGFjZSgvQEBAL2csIGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIGxpdGVyYWxzLnNoaWZ0KCk7CiAgICB9KTsKICB9OwogIC8qKgogICAqIFBhcnNlIGEgZGF0ZSBzdHJpbmcgaW50byBhbiBvYmplY3QsIGNoYW5nZXMgLSBpbnRvIC8KICAgKiBAbWV0aG9kIHBhcnNlCiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGVTdHIgRGF0ZSBzdHJpbmcKICAgKiBAcGFyYW0ge3N0cmluZ30gZm9ybWF0IERhdGUgcGFyc2UgZm9ybWF0CiAgICogQHJldHVybnMge0RhdGV8Ym9vbGVhbn0KICAgKi8KCgogIGZlY2hhLnBhcnNlID0gZnVuY3Rpb24gKGRhdGVTdHIsIGZvcm1hdCwgaTE4blNldHRpbmdzKSB7CiAgICB2YXIgaTE4biA9IGkxOG5TZXR0aW5ncyB8fCBmZWNoYS5pMThuOwoKICAgIGlmICh0eXBlb2YgZm9ybWF0ICE9PSAnc3RyaW5nJykgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZm9ybWF0IGluIGZlY2hhLnBhcnNlJyk7CiAgICB9CgogICAgZm9ybWF0ID0gZmVjaGEubWFza3NbZm9ybWF0XSB8fCBmb3JtYXQ7IC8vIEF2b2lkIHJlZ3VsYXIgZXhwcmVzc2lvbiBkZW5pYWwgb2Ygc2VydmljZSwgZmFpbCBlYXJseSBmb3IgcmVhbGx5IGxvbmcgc3RyaW5ncwogICAgLy8gaHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9SZWd1bGFyX2V4cHJlc3Npb25fRGVuaWFsX29mX1NlcnZpY2VfLV9SZURvUwoKICAgIGlmIChkYXRlU3RyLmxlbmd0aCA+IDEwMDApIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CgogICAgdmFyIGRhdGVJbmZvID0ge307CiAgICB2YXIgcGFyc2VJbmZvID0gW107CiAgICB2YXIgbGl0ZXJhbHMgPSBbXTsKICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKGxpdGVyYWwsIGZ1bmN0aW9uICgkMCwgJDEpIHsKICAgICAgbGl0ZXJhbHMucHVzaCgkMSk7CiAgICAgIHJldHVybiAnQEBAJzsKICAgIH0pOwogICAgdmFyIG5ld0Zvcm1hdCA9IHJlZ2V4RXNjYXBlKGZvcm1hdCkucmVwbGFjZSh0b2tlbiwgZnVuY3Rpb24gKCQwKSB7CiAgICAgIGlmIChwYXJzZUZsYWdzWyQwXSkgewogICAgICAgIHZhciBpbmZvID0gcGFyc2VGbGFnc1skMF07CiAgICAgICAgcGFyc2VJbmZvLnB1c2goaW5mb1sxXSk7CiAgICAgICAgcmV0dXJuICcoJyArIGluZm9bMF0gKyAnKSc7CiAgICAgIH0KCiAgICAgIHJldHVybiAkMDsKICAgIH0pOwogICAgbmV3Rm9ybWF0ID0gbmV3Rm9ybWF0LnJlcGxhY2UoL0BAQC9nLCBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBsaXRlcmFscy5zaGlmdCgpOwogICAgfSk7CiAgICB2YXIgbWF0Y2hlcyA9IGRhdGVTdHIubWF0Y2gobmV3IFJlZ0V4cChuZXdGb3JtYXQsICdpJykpOwoKICAgIGlmICghbWF0Y2hlcykgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KCiAgICBmb3IgKHZhciBpID0gMTsgaSA8IG1hdGNoZXMubGVuZ3RoOyBpKyspIHsKICAgICAgcGFyc2VJbmZvW2kgLSAxXShkYXRlSW5mbywgbWF0Y2hlc1tpXSwgaTE4bik7CiAgICB9CgogICAgdmFyIHRvZGF5ID0gbmV3IERhdGUoKTsKCiAgICBpZiAoZGF0ZUluZm8uaXNQbSA9PT0gdHJ1ZSAmJiBkYXRlSW5mby5ob3VyICE9IG51bGwgJiYgK2RhdGVJbmZvLmhvdXIgIT09IDEyKSB7CiAgICAgIGRhdGVJbmZvLmhvdXIgPSArZGF0ZUluZm8uaG91ciArIDEyOwogICAgfSBlbHNlIGlmIChkYXRlSW5mby5pc1BtID09PSBmYWxzZSAmJiArZGF0ZUluZm8uaG91ciA9PT0gMTIpIHsKICAgICAgZGF0ZUluZm8uaG91ciA9IDA7CiAgICB9CgogICAgdmFyIGRhdGU7CgogICAgaWYgKGRhdGVJbmZvLnRpbWV6b25lT2Zmc2V0ICE9IG51bGwpIHsKICAgICAgZGF0ZUluZm8ubWludXRlID0gKyhkYXRlSW5mby5taW51dGUgfHwgMCkgLSArZGF0ZUluZm8udGltZXpvbmVPZmZzZXQ7CiAgICAgIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQyhkYXRlSW5mby55ZWFyIHx8IHRvZGF5LmdldEZ1bGxZZWFyKCksIGRhdGVJbmZvLm1vbnRoIHx8IDAsIGRhdGVJbmZvLmRheSB8fCAxLCBkYXRlSW5mby5ob3VyIHx8IDAsIGRhdGVJbmZvLm1pbnV0ZSB8fCAwLCBkYXRlSW5mby5zZWNvbmQgfHwgMCwgZGF0ZUluZm8ubWlsbGlzZWNvbmQgfHwgMCkpOwogICAgfSBlbHNlIHsKICAgICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGVJbmZvLnllYXIgfHwgdG9kYXkuZ2V0RnVsbFllYXIoKSwgZGF0ZUluZm8ubW9udGggfHwgMCwgZGF0ZUluZm8uZGF5IHx8IDEsIGRhdGVJbmZvLmhvdXIgfHwgMCwgZGF0ZUluZm8ubWludXRlIHx8IDAsIGRhdGVJbmZvLnNlY29uZCB8fCAwLCBkYXRlSW5mby5taWxsaXNlY29uZCB8fCAwKTsKICAgIH0KCiAgICByZXR1cm4gZGF0ZTsKICB9OwogIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCgoKICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHsKICAgIG1vZHVsZS5leHBvcnRzID0gZmVjaGE7CiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHsKICAgIGRlZmluZShmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBmZWNoYTsKICAgIH0pOwogIH0gZWxzZSB7CiAgICBtYWluLmZlY2hhID0gZmVjaGE7CiAgfQp9KSh1bmRlZmluZWQpOw=="},null]}