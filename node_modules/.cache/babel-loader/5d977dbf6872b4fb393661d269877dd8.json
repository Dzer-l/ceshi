{"remainingRequest":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/thread-loader/dist/cjs.js!/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/home/jenkins_data/workspace/页面-公证处后台/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jenkins_data/workspace/页面-公证处后台/src/views/entry/uploadImage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jenkins_data/workspace/页面-公证处后台/src/views/entry/uploadImage.vue","mtime":1634724784708},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiL2hvbWUvamVua2luc19kYXRhL3dvcmtzcGFjZS9cdTk4NzVcdTk3NjItXHU1MTZDXHU4QkMxXHU1OTA0XHU1NDBFXHU1M0YwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvciI7CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfQoKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IHsgZ2V0RXZpZFNpZ25TZW5kTmVlZE1hdGVyaWFsLCBzaWduU2VuZEZpbGVVcGxvYWQsIGdldE1haWxFdmlkUmVjZWl2ZVBlcnNvbkluZm8sIHNhdmVNYWlsUGljdHVyZSwgdXBkYXRlRXZpZE1haWwsIGdldENsb3VkRGF0ZWlsLCBldmlkU2lnblVwbG9hZFFyY29kZSwgZ2V0SDVGaWxlU3RyZWFtLCBkZWxINUZpbGUgfSBmcm9tICcuLi8uLi9hcGkvY2xvdWRNYWlsJzsKZXhwb3J0IGRlZmF1bHQgewogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBkaWFsb2dJbWFnZVVybDogJycsCiAgICAgIGRpYWxvZ1Zpc2libGU6IGZhbHNlLAogICAgICBmaWxlTGlzdDogW10sCiAgICAgIG1hdGVyaWFsQ29kZTogIiIsCiAgICAgIC8vIDIwNjHnrb7mlLblm77niYfvvJsgMjA3MeWvhOWHveWbvueJhwogICAgICBldmlkSWQ6ICIiLAogICAgICAvLyDor4Hmja5pZAogICAgICBpZDogIiIsCiAgICAgIGV2aWRNYWlsSWQ6ICIiLAogICAgICBuZWVkTWF0ZXJpYWxUaXBzOiBbewogICAgICAgIG1hdGVyaWFsTmFtZTogIiIsCiAgICAgICAgbWF0ZXJpYWxEZXNjOiAiIgogICAgICB9XSwKICAgICAgLy8g5LiK5Lyg5o+Q56S6CiAgICAgIHBlcnNvbkRhdGE6IFtdLAogICAgICAvLyDmlLbku7bkurov5a+E5Lu25Lq65L+h5oGvCiAgICAgIGV2aWREYXRhOiAiIiwKICAgICAgaW1nVXJsOiAiIiwKICAgICAgLy8gY29kZURpYWxvZ1Zpc2libGU6IGZhbHNlLAogICAgICBmcmVxdWVuY3lfYXN0cmljdDogNQogICAgfTsKICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB0aGlzLm1hdGVyaWFsQ29kZSA9IHRoaXMuJHJvdXRlLnF1ZXJ5Lm1hdGVyaWFsQ29kZTsKICAgIHRoaXMuZXZpZElkID0gdGhpcy4kcm91dGUucXVlcnkuZXZpZElkOwogICAgdGhpcy5pZCA9IHRoaXMuJHJvdXRlLnF1ZXJ5LmlkOwogICAgdGhpcy5ldmlkTWFpbElkID0gdGhpcy4kcm91dGUucXVlcnkuZXZpZE1haWxJZDsKICAgIHRoaXMuZ2V0TmVlZE1hdGVyaWFsKCk7CiAgICB0aGlzLmdldFBlcnNvbkRhdGEoKTsKICAgIHRoaXMuZ2V0TWFpbERhdGEoKTsKICAgIHRoaXMuZ2V0RXZpZFNpZ25VcGxvYWRRcmNvZGUoKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIC8vIOiOt+WPluS4iuS8oOS6jOe7tOeggQogICAgZ2V0RXZpZFNpZ25VcGxvYWRRcmNvZGU6IGZ1bmN0aW9uIGdldEV2aWRTaWduVXBsb2FkUXJjb2RlKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHZhciB3ZWJzb2NrZXQsIGRhdGEsIHJlcywgdGhhdDsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGRhdGEgPSB7CiAgICAgICAgICAgICAgICAgIHVybDogcHJvY2Vzcy5lbnYuVlVFX0FQUF9CQVNFX1dFQlNPQ0tFVF9QQVRILAogICAgICAgICAgICAgICAgICBldmlkSWQ6IF90aGlzLmV2aWRJZCwKICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxDb2RlOiBfdGhpcy5tYXRlcmlhbENvZGUKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gZXZpZFNpZ25VcGxvYWRRcmNvZGUoZGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0Mi5zZW50OwoKICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCLojrflj5bkuIrkvKDkuoznu7TnoIEiLCByZXMpOwogICAgICAgICAgICAgICAgX3RoaXMuZ2V0SW1hZ2VVcmwocmVzKTsKCiAgICAgICAgICAgICAgICB0aGF0ID0gX3RoaXM7CgogICAgICAgICAgICAgICAgaWYgKCdXZWJTb2NrZXQnIGluIHdpbmRvdykgewogICAgICAgICAgICAgICAgICB3ZWJzb2NrZXQgPSBuZXcgV2ViU29ja2V0KHByb2Nlc3MuZW52LlZVRV9BUFBfQkFTRV9XRUJTT0NLRVRfV1NTICsgJy93ZWJzb2NrZXQvJyArIF90aGlzLmV2aWRNYWlsSWQpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHdlYnNvY2tldC5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCfov57mjqXmiJDlip8nKTsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgd2Vic29ja2V0Lm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHRoYXQuZnJlcXVlbmN5X2FzdHJpY3QgPSB0aGF0LmZyZXF1ZW5jeV9hc3RyaWN0IC0gMTsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ+mAgOWHuui/nuaOpScpOwoKICAgICAgICAgICAgICAgICAgaWYgKHRoYXQuJHJvdXRlLm5hbWUgPT0gJ3VwbG9hZEltYWdlJyAmJiB0aGF0LmZyZXF1ZW5jeV9hc3RyaWN0KSB7CiAgICAgICAgICAgICAgICAgICAgdGhhdC5nZXRFdmlkU2lnblVwbG9hZFFyY29kZShkYXRhKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICB3ZWJzb2NrZXQub25tZXNzYWdlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVEVE8sIGZpbGUsIF9yZXM7CgogICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygi5pS25Yiw5raI5oGvIiArIGV2ZW50LmRhdGEpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGV2ZW50LmRhdGEgIT09ICfov57mjqXmiJDlip8nKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVEVE8gPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGZpbGVEVE8uaXNEZWwgJiYgZmlsZURUTy5vYmplY3ROYW1lKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g5Yig6Zmk5paH5Lu2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygi5Yig6Zmk5paH5Lu2PT09PT4iLCBmaWxlRFRPKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuZmlsZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0ub2JqZWN0TmFtZSA9PSBmaWxlRFRPLm9iamVjdE5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmZpbGVMaXN0LnNwbGljZShpbmRleCwgMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAvLyBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhhdC5tYXRlcmlhbFRpcHMubGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAJaWYgKHRoYXQubWF0ZXJpYWxUaXBzW2luZGV4XS5saXN0Lmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIAkJZm9yIChsZXQgaW5kZXgyID0gMDsgaW5kZXgyIDwgdGhhdC5tYXRlcmlhbFRpcHNbaW5kZXhdLmxpc3QubGVuZ3RoOyBpbmRleDIrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gCQkJaWYgKHRoYXQubWF0ZXJpYWxUaXBzW2luZGV4XS5saXN0W2luZGV4Ml0ub2JqZWN0TmFtZSA9PSBmaWxlRFRPLm9iamVjdE5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIAkJCQl0aGF0Lm1hdGVyaWFsVGlwc1tpbmRleF0ubGlzdC5zcGxpY2UoaW5kZXgyLCAxKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gCQkJfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gCQl9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAJfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDmt7vliqDmlofku7YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1Y2tldE5hbWU6IGZpbGVEVE8uYnVja2V0TmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5jcnlwdEtleTogbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcElkOiBmaWxlRFRPLnRlbXBJZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxDb2RlOiBmaWxlRFRPLm1hdGVyaWFsQ29kZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxOYW1lOiBmaWxlRFRPLm9yaWdpbmFsRmlsZW5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsQnVja2V0OiBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVja2V0TmFtZTogZmlsZURUTy5idWNrZXROYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdE5hbWU6IGZpbGVEVE8ub2JqZWN0TmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0TmFtZTogZmlsZURUTy5vYmplY3ROYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEZpbGVuYW1lOiBmaWxlRFRPLm9yaWdpbmFsRmlsZW5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmFtZTogZmlsZURUTy5yZW5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGZpbGVEVE8ub3JpZ2luYWxGaWxlbmFtZS5zdWJzdHIoZmlsZURUTy5vcmlnaW5hbEZpbGVuYW1lLmxhc3RJbmRleE9mKCcuJykgKyAxKS50b0xvY2FsZUxvd2VyQ2FzZSgpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICcnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmlkSWQ6IHRoYXQuZXZpZElkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWlsRXZpZFBlcnNvbklkOiBmaWxlRFRPLnByb3Bvc2VySWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlcnNvbklkOiBmaWxlRFRPLnByb3Bvc2VySWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGZpbGVEVE8ub3JpZ2luYWxGaWxlbmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGF0LmdldEZpbGVUeXBlKGZpbGUub3JpZ2luYWxGaWxlbmFtZSkgPT09ICdwZGYnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUudXJsID0gcmVxdWlyZSgnQC9hc3NldHMvaW1ncy9wZGYucG5nJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlLnR5cGUgPSAncGRmJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodGhhdC5nZXRGaWxlVHlwZShmaWxlLm9yaWdpbmFsRmlsZW5hbWUpID09PSAnZXhjZWwnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUudXJsID0gcmVxdWlyZSgnQC9hc3NldHMvaW1ncy94bHMucG5nJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlLnR5cGUgPSAneGxzeCc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoYXQuZ2V0RmlsZVR5cGUoZmlsZS5vcmlnaW5hbEZpbGVuYW1lKSA9PT0gJ3dvcmQnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUudXJsID0gcmVxdWlyZSgnQC9hc3NldHMvaW1ncy93b3JkLnBuZycpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS50eXBlID0gJ2RvYyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyNDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoYXQuZ2V0RmlsZVR5cGUoZmlsZS5vcmlnaW5hbEZpbGVuYW1lKSA9PT0gJ2ltYWdlJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI5OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0SDVGaWxlU3RyZWFtKGZpbGUpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI3OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlcyA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9yZXMuc3VjY2VzcyAmJiBfcmVzLmRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS51cmwgPSB0aGF0LmRhdGFVUkl0b0Jsb2IoImRhdGE6aW1hZ2UvanBlZztiYXNlNjQsIiArIF9yZXMuZGF0YSk7IC8vIGZpbGUudXJsID0gJ2RhdGE6aW1hZ2UvanBlZztiYXNlNjQsJyArIHJlcy5kYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygi5re75Yqg5paH5Lu2PT09PiIsIGZpbGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5maWxlTGlzdC5wdXNoKGZpbGUpOyAvLyBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhhdC5tYXRlcmlhbFRpcHMubGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAJaWYgKHRoYXQubWF0ZXJpYWxUaXBzW2luZGV4XS5tYXRlcmlhbENvZGUgPT09IGZpbGUubWF0ZXJpYWxDb2RlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAJCXRoYXQubWF0ZXJpYWxUaXBzW2luZGV4XS5saXN0LnB1c2goZmlsZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIAl9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9CgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9KCk7CgogICAgICAgICAgICAgICAgd2Vic29ja2V0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCfov57mjqXlh7rplJknKTsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyDliKTmlq3mlofku7bnmoTnsbvlnosKICAgIGdldEZpbGVUeXBlOiBmdW5jdGlvbiBnZXRGaWxlVHlwZShmaWxlTmFtZSkgewogICAgICAvLyDlkI7nvIDojrflj5YKICAgICAgdmFyIHN1ZmZpeCA9ICcnOyAvLyDojrflj5bnsbvlnovnu5PmnpwKCiAgICAgIHZhciByZXN1bHQgPSAnJzsKCiAgICAgIHRyeSB7CiAgICAgICAgdmFyIGZsaWVBcnIgPSBmaWxlTmFtZS5zcGxpdCgnLicpOwogICAgICAgIHN1ZmZpeCA9IGZsaWVBcnJbZmxpZUFyci5sZW5ndGggLSAxXTsKICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgc3VmZml4ID0gJyc7CiAgICAgIH0gLy8gZmlsZU5hbWXml6DlkI7nvIDov5Tlm54gZmFsc2UKCgogICAgICBpZiAoIXN1ZmZpeCkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgc3VmZml4ID0gc3VmZml4LnRvTG9jYWxlTG93ZXJDYXNlKCk7IC8vIOWbvueJh+agvOW8jwoKICAgICAgdmFyIGltZ2xpc3QgPSBbJ3BuZycsICdqcGcnLCAnanBlZycsICdibXAnLCAnZ2lmJ107IC8vIOi/m+ihjOWbvueJh+WMuemFjQoKICAgICAgcmVzdWx0ID0gaW1nbGlzdC5maW5kKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuIGl0ZW0gPT09IHN1ZmZpeDsKICAgICAgfSk7CgogICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgcmV0dXJuICdpbWFnZSc7CiAgICAgIH0gLy8g5Yy56YWNdHh0CgoKICAgICAgdmFyIHR4dGxpc3QgPSBbJ3R4dCddOwogICAgICByZXN1bHQgPSB0eHRsaXN0LmZpbmQoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICByZXR1cm4gaXRlbSA9PT0gc3VmZml4OwogICAgICB9KTsKCiAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICByZXR1cm4gJ3R4dCc7CiAgICAgIH0gLy8g5Yy56YWNIGV4Y2VsCgoKICAgICAgdmFyIGV4Y2VsaXN0ID0gWyd4bHMnLCAneGxzeCddOwogICAgICByZXN1bHQgPSBleGNlbGlzdC5maW5kKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuIGl0ZW0gPT09IHN1ZmZpeDsKICAgICAgfSk7CgogICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgcmV0dXJuICdleGNlbCc7CiAgICAgIH0gLy8g5Yy56YWNIHdvcmQKCgogICAgICB2YXIgd29yZGxpc3QgPSBbJ2RvYycsICdkb2N4J107CiAgICAgIHJlc3VsdCA9IHdvcmRsaXN0LmZpbmQoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICByZXR1cm4gaXRlbSA9PT0gc3VmZml4OwogICAgICB9KTsKCiAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICByZXR1cm4gJ3dvcmQnOwogICAgICB9IC8vIOWMuemFjSBwZGYKCgogICAgICB2YXIgcGRmbGlzdCA9IFsncGRmJ107CiAgICAgIHJlc3VsdCA9IHBkZmxpc3QuZmluZChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIHJldHVybiBpdGVtID09PSBzdWZmaXg7CiAgICAgIH0pOwoKICAgICAgaWYgKHJlc3VsdCkgewogICAgICAgIHJldHVybiAncGRmJzsKICAgICAgfSAvLyDljLnphY0gcHB0CgoKICAgICAgdmFyIHBwdGxpc3QgPSBbJ3BwdCcsICdwcHR4J107CiAgICAgIHJlc3VsdCA9IHBwdGxpc3QuZmluZChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIHJldHVybiBpdGVtID09PSBzdWZmaXg7CiAgICAgIH0pOwoKICAgICAgaWYgKHJlc3VsdCkgewogICAgICAgIHJldHVybiAncHB0JzsKICAgICAgfSAvLyDljLnphY0g6KeG6aKRCgoKICAgICAgdmFyIHZpZGVvbGlzdCA9IFsnbXA0JywgJ20ydicsICdta3YnLCAncm12YicsICd3bXYnLCAnYXZpJywgJ2ZsdicsICdtb3YnLCAnbTR2J107CiAgICAgIHJlc3VsdCA9IHZpZGVvbGlzdC5maW5kKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuIGl0ZW0gPT09IHN1ZmZpeDsKICAgICAgfSk7CgogICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgcmV0dXJuICd2aWRlbyc7CiAgICAgIH0gLy8g5Yy56YWNIOmfs+mikQoKCiAgICAgIHZhciByYWRpb2xpc3QgPSBbJ21wMycsICd3YXYnLCAnd212J107CiAgICAgIHJlc3VsdCA9IHJhZGlvbGlzdC5maW5kKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuIGl0ZW0gPT09IHN1ZmZpeDsKICAgICAgfSk7CgogICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgcmV0dXJuICdyYWRpbyc7CiAgICAgIH0gLy8g5YW25LuWIOaWh+S7tuexu+WeiwoKCiAgICAgIHJldHVybiAnb3RoZXInOwogICAgfSwKICAgIC8vIOiOt+WPluivpuaDhQogICAgZ2V0TWFpbERhdGE6IGZ1bmN0aW9uIGdldE1haWxEYXRhKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgICB2YXIgZGF0YSwgcmVzOwogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgZGF0YSA9IHsKICAgICAgICAgICAgICAgICAgZXZpZElkOiBfdGhpczIuaWQKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q2xvdWREYXRlaWwoZGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0My5zZW50OwoKICAgICAgICAgICAgICAgIGlmIChyZXMuc3VjY2VzcykgewogICAgICAgICAgICAgICAgICBfdGhpczIuZXZpZERhdGEgPSByZXMuZGF0YTsKICAgICAgICAgICAgICAgIH0gLy8gY29uc29sZS5sb2cocmVzKTsKCgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMyk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIOiOt+WPluaUtuS7tuS6ui/lr4Tku7bkuroKICAgIGdldFBlcnNvbkRhdGE6IGZ1bmN0aW9uIGdldFBlcnNvbkRhdGEoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KCkgewogICAgICAgIHZhciBkYXRhLCByZXM7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBkYXRhID0gewogICAgICAgICAgICAgICAgICBldmlkTWFpbElkOiBfdGhpczMuZXZpZE1haWxJZCwKICAgICAgICAgICAgICAgICAgcGVyc29uVHlwZTogX3RoaXMzLm1hdGVyaWFsQ29kZSA9PSAiMjA2MSIgPyAxIDogMiAvLyAyMDYx6I635Y+W5a+E5Lu25Lq6ICAyMDcx6I635Y+W5pS25Lu25Lq6CgogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiBnZXRNYWlsRXZpZFJlY2VpdmVQZXJzb25JbmZvKGRhdGEpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICByZXMgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCLmlLbku7bkurov5a+E5Lu25Lq6IiwgcmVzKTsKICAgICAgICAgICAgICAgIF90aGlzMy5wZXJzb25EYXRhID0gcmVzLmRhdGE7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNCk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIOiOt+WPluetvuaUtuWvhOWHveeFp+eJh+mcgOimgeS4iuS8oOadkOaWmeexu+WeiwogICAgZ2V0TmVlZE1hdGVyaWFsOiBmdW5jdGlvbiBnZXROZWVkTWF0ZXJpYWwoKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU1KCkgewogICAgICAgIHZhciBkYXRhLCByZXM7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NS5wcmV2ID0gX2NvbnRleHQ1Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBkYXRhID0gewogICAgICAgICAgICAgICAgICBtYXRlcmlhbENvZGU6IF90aGlzNC5tYXRlcmlhbENvZGUsCiAgICAgICAgICAgICAgICAgIGV2aWRJZDogX3RoaXM0LmlkCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIGdldEV2aWRTaWduU2VuZE5lZWRNYXRlcmlhbChkYXRhKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQ1LnNlbnQ7CgogICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coIuiOt+WPluetvuaUtuWvhOWHveeFp+eJh+mcgOimgeS4iuS8oOadkOaWmeexu+WeiyIsIHJlcyk7CiAgICAgICAgICAgICAgICBpZiAocmVzLnN1Y2Nlc3MgJiYgcmVzLmRhdGEpIHsKICAgICAgICAgICAgICAgICAgX3RoaXM0Lm5lZWRNYXRlcmlhbFRpcHMgPSByZXMuZGF0YTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU1KTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8g5LiK5Lyg5Zu+54mHCiAgICB1cGxvYWRGaWxlOiBmdW5jdGlvbiB1cGxvYWRGaWxlKGZpbGUpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYoKSB7CiAgICAgICAgdmFyIGZvcm1EYXRhLCByZXM7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNiQoX2NvbnRleHQ2KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ni5wcmV2ID0gX2NvbnRleHQ2Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygi5LiK5Lyg5Zu+54mHLS0tLS0tLS0iLCBmaWxlKTsKICAgICAgICAgICAgICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7CiAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ29yZGVySWQnLCBfdGhpczUuZXZpZE1haWxJZCk7CiAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBmaWxlLmZpbGUpOyAvLyBjb25zdCBVUkwgPSB3aW5kb3cuVVJMIHx8IHdpbmRvdy53ZWJraXRVUkwKICAgICAgICAgICAgICAgIC8vIGNvbnN0IGltZ1VSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZS5maWxlKQogICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaW1nVVJMKTsKCiAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gc2lnblNlbmRGaWxlVXBsb2FkKGZvcm1EYXRhKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQ2LnNlbnQ7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygi5LiK5Lyg5Zu+54mH57uT5p6cIiwgcmVzKTsKCiAgICAgICAgICAgICAgICBpZiAocmVzLnN1Y2Nlc3MpIHsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZmlsZS5maWxlKTsKCiAgICAgICAgICAgICAgICAgIF90aGlzNS5maWxlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkgewogICAgICAgICAgICAgICAgICAgIGlmIChmaWxlLmZpbGUudWlkID09IGl0ZW0udWlkKSB7CiAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGl0ZW0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxDb2RlOiBfdGhpczUubWF0ZXJpYWxDb2RlLAogICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbE5hbWU6IHJlcy5kYXRhLm9yaWdpbmFsRmlsZW5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBJZDogcmVzLmRhdGEudGVtcElkLAogICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbEJ1Y2tldDogSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgICAgICAgICAgIGJ1Y2tldE5hbWU6IHJlcy5kYXRhLmJ1Y2tldE5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0TmFtZTogcmVzLmRhdGEub2JqZWN0TmFtZQogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgbWFpbEV2aWRQZXJzb25JZDogX3RoaXM1LnBlcnNvbkRhdGFbMF0uaWQsCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHJlcy5kYXRhLm9yaWdpbmFsRmlsZW5hbWUuc3Vic3RyKHJlcy5kYXRhLm9yaWdpbmFsRmlsZW5hbWUubGFzdEluZGV4T2YoJy4nKSArIDEpLnRvTG9jYWxlTG93ZXJDYXNlKCksCiAgICAgICAgICAgICAgICAgICAgICAgIGJ1Y2tldE5hbWU6IHJlcy5kYXRhLmJ1Y2tldE5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdE5hbWU6IHJlcy5kYXRhLm9iamVjdE5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgIHBlcnNvbklkOiBfdGhpczUubWF0ZXJpYWxDb2RlID09IDIwNzEgPyBmaWxlLmRhdGEuaWQgOiAiIgogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU2KTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgaGFuZGxlUHJldmlldzogZnVuY3Rpb24gaGFuZGxlUHJldmlldyhmaWxlKSB7CiAgICAgIGNvbnNvbGUubG9nKGZpbGUpOwogICAgICB2YXIgaW1nbGlzdCA9IFsncG5nJywgJ2pwZycsICdqcGVnJywgJ2JtcCcsICdnaWYnXTsKICAgICAgdmFyIGZpbGVUeXBlID0gZmlsZS5uYW1lLnN1YnN0cihmaWxlLm5hbWUubGFzdEluZGV4T2YoJy4nKSArIDEpLnRvTG9jYWxlTG93ZXJDYXNlKCk7CgogICAgICBpZiAoaW1nbGlzdC5pbmNsdWRlcyhmaWxlVHlwZSkpIHsKICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ2FwcC9DSEFOR0VfSU1BR0UnLCBbZmlsZS51cmxdKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoIuW9k+WJjeaWh+S7tuaaguS4jeaUr+aMgemihOiniCIpOyAvLyB0aGlzLmRpYWxvZ0ltYWdlVXJsID0gOwogICAgICAvLyB0aGlzLmRpYWxvZ1Zpc2libGUgPSB0cnVlOwogICAgfSwKICAgIGhhbmRsZUNvZGVQcmV2aWV3OiBmdW5jdGlvbiBoYW5kbGVDb2RlUHJldmlldygpIHsvLyB0aGlzLmNvZGVEaWFsb2dWaXNpYmxlID0gdHJ1ZQogICAgfSwKICAgIC8vIOWIoOmZpOWbvueJhwogICAgaGFuZGxlRGVsZXRlOiBmdW5jdGlvbiBoYW5kbGVEZWxldGUoZmlsZSkgewogICAgICB2YXIgX3RoaXM2ID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNygpIHsKICAgICAgICB2YXIgZGF0YSwgcmVzOwogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTckKF9jb250ZXh0NykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDcucHJldiA9IF9jb250ZXh0Ny5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29uc29sZS5sb2coZmlsZSk7CiAgICAgICAgICAgICAgICBkYXRhID0gewogICAgICAgICAgICAgICAgICBidWNrZXROYW1lOiBmaWxlLmJ1Y2tldE5hbWUsCiAgICAgICAgICAgICAgICAgIG9iamVjdE5hbWU6IGZpbGUub2JqZWN0TmFtZQogICAgICAgICAgICAgICAgfTsgLy8gbGV0IHJlcyA9IGF3YWl0IGRlbEg1RmlsZShkYXRhKQoKICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczYuJGF4aW9zKCIiLmNvbmNhdChwcm9jZXNzLmVudi5WVUVfQVBQX0JBU0VfV0VCU09DS0VUX1BBVEgsICIvZGVsLWg1LWZpbGUvIikuY29uY2F0KF90aGlzNi5ldmlkTWFpbElkKSwgZGF0YSwgewogICAgICAgICAgICAgICAgICBtZXRob2Q6ICdkZWxldGUnCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQ3LnNlbnQ7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygi5Yig6Zmk5Zu+54mHLS0tLS0tLSIsIHJlcyk7CgogICAgICAgICAgICAgICAgaWYgKCFyZXMuc3VjY2VzcykgewogICAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF90aGlzNi5maWxlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkgewogICAgICAgICAgICAgICAgICBpZiAoaXRlbS51aWQgPT0gZmlsZS51aWQpIHsKICAgICAgICAgICAgICAgICAgICBfdGhpczYuZmlsZUxpc3Quc3BsaWNlKGluZGV4LCAxKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBfdGhpczYuJG1lc3NhZ2UuZXJyb3IoIuWIoOmZpOWbvueJh+Wksei0pe+8jOivt+eojeWQjuWGjeivlSIpOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU3KTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8g5LiK5Lyg5YmN5aSE55CGCiAgICBiZWZvcmVVcGxvYWQ6IGZ1bmN0aW9uIGJlZm9yZVVwbG9hZChmaWxlKSB7CiAgICAgIC8vIGNvbnNvbGUubG9nKCLkuIrkvKDliY3lpITnkIYiLCBmaWxlKTsKICAgICAgdmFyIGFjY2VwdFR5cGUgPSBbImpwZyIsICJqcGVnIl07CiAgICAgIHZhciBpbmRleCA9IGZpbGUubmFtZS5sYXN0SW5kZXhPZigiLiIpICsgMTsKICAgICAgdmFyIGZpbGVUeXBlID0gZmlsZS5uYW1lLnN1YnN0cihpbmRleCwgZmlsZS5uYW1lLmxlbmd0aCkudG9Mb2NhbGVMb3dlckNhc2UoKTsKCiAgICAgIGlmICghYWNjZXB0VHlwZS5pbmNsdWRlcyhmaWxlVHlwZSkpIHsKICAgICAgICB0aGlzLiRtZXNzYWdlLndhcm5pbmcoJ+S4jeaUr+aMgeeahOaWh+S7tuagvOW8j++8jOivt+mAieaLqSBKUEcvSlBFRyDmoLzlvI/nmoTmlofku7YnKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KCiAgICAgIHJldHVybiB0cnVlOyAvLyBjb25zdCBpc0pQRyA9IGZpbGUudHlwZSA9PT0gJ2ltYWdlL2pwZWcnOwogICAgICAvLyBjb25zdCBpc0x0Mk0gPSBmaWxlLnNpemUgLyAxMDI0IC8gMTAyNCA8IDI7CiAgICAgIC8vIGlmICghaXNKUEcpIHsKICAgICAgLy8gCXRoaXMuJG1lc3NhZ2UuZXJyb3IoJ+S4jeaUr+aMgeeahOaWh+S7tuagvOW8j++8jOivt+mAieaLqSBKUEcvSlBFRyDmoLzlvI/nmoTmlofku7YnKTsKICAgICAgLy8gfQogICAgICAvLyBpZiAoIWlzTHQyTSkgewogICAgICAvLyAJdGhpcy4kbWVzc2FnZS5lcnJvcign5LiK5Lyg5Zu+54mH5aSn5bCP5LiN6IO96LaF6L+HIDJNQiEnKTsKICAgICAgLy8gfQogICAgICAvLyByZXR1cm4gaXNKUEcKICAgIH0sCiAgICAvLyDotoXlh7rpgInmi6kKICAgIGhhbmRsZUV4Y2VlZDogZnVuY3Rpb24gaGFuZGxlRXhjZWVkKGZpbGVzLCBmaWxlTGlzdCkgewogICAgICBjb25zb2xlLmxvZyhmaWxlcywgZmlsZUxpc3QpOwogICAgICB0aGlzLiRtZXNzYWdlLndhcm5pbmcoIlx1NjcwMFx1NTkxQVx1NEUwQVx1NEYyMDUwXHU0RTJBXHU2NTg3XHU0RUY2XHVGRjBDXHU1REYyXHU0RTBBXHU0RjIwXHU0RTg2ICIuY29uY2F0KGZpbGVMaXN0Lmxlbmd0aCwgIiBcdTRFMkFcdTY1ODdcdTRFRjYiKSk7CiAgICB9LAogICAgLy8g6YCJ5oup6Kem5Y+RCiAgICBoYW5kbGVDaGFuZ2U6IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShmaWxlcywgZmlsZUxpc3QpIHsKICAgICAgLy8gY29uc29sZS5sb2coZmlsZXMsIGZpbGVMaXN0KTsKICAgICAgdGhpcy5maWxlTGlzdCA9IGZpbGVMaXN0OwogICAgfSwKICAgIC8vIOWIoOmZpOWbvueJhwogICAgaGFuZGxlUmVtb3ZlOiBmdW5jdGlvbiBoYW5kbGVSZW1vdmUoZmlsZSwgZmlsZUxpc3QpIHsKICAgICAgLy8gY29uc29sZS5sb2coZmlsZSwgZmlsZUxpc3QpOwogICAgICB0aGlzLmZpbGVMaXN0ID0gZmlsZUxpc3Q7CiAgICB9LAogICAgLy8g6aKE6KeI5Zu+54mHCiAgICBoYW5kbGVQaWN0dXJlQ2FyZFByZXZpZXc6IGZ1bmN0aW9uIGhhbmRsZVBpY3R1cmVDYXJkUHJldmlldyhmaWxlKSB7CiAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgnYXBwL0NIQU5HRV9JTUFHRScsIFtmaWxlLnVybF0pOyAvLyB0aGlzLmRpYWxvZ0ltYWdlVXJsID0gZmlsZS51cmw7CiAgICAgIC8vIHRoaXMuZGlhbG9nVmlzaWJsZSA9IHRydWU7CiAgICB9LAogICAgLy8g5o+Q5Lqk6K+B5o2uCiAgICBoYW5kbGVTdWJtaXQ6IGZ1bmN0aW9uIGhhbmRsZVN1Ym1pdCgpIHsKICAgICAgdmFyIF90aGlzNyA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTgoKSB7CiAgICAgICAgdmFyIGRhdGEsIHJlczsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU4JChfY29udGV4dDgpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ4LnByZXYgPSBfY29udGV4dDgubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlmIChfdGhpczcuZ2V0SXNVcGxvYWRlZCgpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OC5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBkYXRhID0gewogICAgICAgICAgICAgICAgICBldmlkTWFpbElkOiBfdGhpczcuZXZpZE1haWxJZCwKICAgICAgICAgICAgICAgICAgbWFpbEV2aWRNYXRlcmlhbERUT1M6IF90aGlzNy5maWxlTGlzdAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBzYXZlTWFpbFBpY3R1cmUoZGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0OC5zZW50OwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coIuaPkOS6pOivgeaNriIsIHJlcyk7CgogICAgICAgICAgICAgICAgaWYgKCFyZXMuc3VjY2VzcykgewogICAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDE0OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfdGhpczcuJG1lc3NhZ2Uuc3VjY2Vzcygi5o+Q5Lqk6K+B5o2u5oiQ5YqfIik7CgogICAgICAgICAgICAgICAgaWYgKCEoX3RoaXM3Lm1hdGVyaWFsQ29kZSA9PSAyMDYxKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDEyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfdGhpczcudXBkYXRlU3RhdHVzKDQpOwoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIF90aGlzNy51cGRhdGVTdGF0dXMoNzAxKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgICBfdGhpczcuJG1lc3NhZ2UuZXJyb3IoIuaPkOS6pOivgeaNruWksei0pe+8jOivt+eojeWQjuWGjeivlSIpOwoKICAgICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU4KTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8g5Yik5pat5piv5ZCm5LiK5LygCiAgICBnZXRJc1VwbG9hZGVkOiBmdW5jdGlvbiBnZXRJc1VwbG9hZGVkKCkgewogICAgICB2YXIgX3RoaXM4ID0gdGhpczsKCiAgICAgIGlmICh0aGlzLm1hdGVyaWFsQ29kZSA9PSAyMDYxICYmIHRoaXMuZmlsZUxpc3QubGVuZ3RoID4gMCkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICB2YXIgZmxhZyA9IHRoaXMucGVyc29uRGF0YS5ldmVyeShmdW5jdGlvbiAocmVjZWl2ZXIpIHsKICAgICAgICByZXR1cm4gX3RoaXM4LmZpbGVMaXN0LmZpbmQoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgIHJldHVybiByZWNlaXZlci5pZCA9PSBpdGVtLnBlcnNvbklkOwogICAgICAgIH0pOwogICAgICB9KTsKCiAgICAgIGlmICghZmxhZykgewogICAgICAgIHZhciBtc2cgPSB0aGlzLm1hdGVyaWFsQ29kZSA9PSAiMjA2MSIgPyAi6K+35YWI5LiK5Lyg562+5pS25Zu+54mHIiA6ICLmr4/kuKrmlLbku7bkurroh7PlsJHpnIDopoHkuIrkvKDkuIDku73mlofku7YiOwogICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IobXNnKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KCiAgICAgIHJldHVybiB0cnVlOwogICAgfSwKICAgIC8vIOabtOaWsOeKtuaAgQogICAgdXBkYXRlU3RhdHVzOiBmdW5jdGlvbiB1cGRhdGVTdGF0dXModmFsKSB7CiAgICAgIHZhciBfdGhpczkgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU5KCkgewogICAgICAgIHZhciBkYXRhLCByZXM7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlOSQoX2NvbnRleHQ5KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0OS5wcmV2ID0gX2NvbnRleHQ5Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBkYXRhID0gewogICAgICAgICAgICAgICAgICBpZDogX3RoaXM5LmV2aWRNYWlsSWQsCiAgICAgICAgICAgICAgICAgIGV2aWRTdGF0dXM6IHZhbAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIF9jb250ZXh0OS5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiB1cGRhdGVFdmlkTWFpbChkYXRhKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQ5LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKHJlcy5zdWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgIF90aGlzOS4kcm91dGVyLmdvKC0xKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ5LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU5KTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8g6L+U5ZueCiAgICBoYW5kbGVCYWNrOiBmdW5jdGlvbiBoYW5kbGVCYWNrKCkgewogICAgICB0aGlzLiRyb3V0ZXIuZ28oLTEpOwogICAgfSwKICAgIC8vIOaWh+S7tua1geiOt+WPluWbvueJhwogICAgZ2V0SW1hZ2VVcmw6IGZ1bmN0aW9uIGdldEltYWdlVXJsKHR1KSB7CiAgICAgIHZhciBkYXRhSW5mbyA9IHR1OwogICAgICB2YXIgdGhhdCA9IHRoaXM7IC8vIHZhciBjcj1idG9hKG5ldyBVaW50OEFycmF5KHR1KS5yZWR1Y2UoKGRhdGEsdHlwZSk9PmRhdGErU3RyaW5nLmZyb21DaGFyQ29kZShieXRlKSwnJykpCgogICAgICB2YXIgcmVhZGVyID0gbmV3IHdpbmRvdy5GaWxlUmVhZGVyKCk7IC8vIOS9v+eUqHJlYWRBc0FycmF5QnVmZmVy6K+75Y+W5paH5Lu2LCByZXN1bHTlsZ7mgKfkuK3lsIbljIXlkKvkuIDkuKogQXJyYXlCdWZmZXIg5a+56LGh5Lul6KGo56S65omA6K+75Y+W5paH5Lu255qE5pWw5o2uCgogICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChkYXRhSW5mbyk7CgogICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICB2YXIgYmFzZTY0RGF0YSA9IGUudGFyZ2V0LnJlc3VsdDsgLy8g6LCD55SoZGF0YVVSSXRvQmxvYui9rOaNouaWueazlQoKICAgICAgICB0aGF0LmltZ1VybCA9IHRoYXQuZGF0YVVSSXRvQmxvYihiYXNlNjREYXRhKTsgLy8gdGhhdC5zcmNMaXN0LnB1c2godGhhdC5pbWdVcmwpCiAgICAgICAgLy8gY29uc29sZS5sb2codGhhdC5kYXRhVVJJdG9CbG9iKGJhc2U2NERhdGEpLCAiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iKTsKICAgICAgfTsKICAgIH0sCiAgICBkYXRhVVJJdG9CbG9iOiBmdW5jdGlvbiBkYXRhVVJJdG9CbG9iKGJhc2U2NERhdGEpIHsKICAgICAgLy8gY29uc29sZS5sb2coYmFzZTY0RGF0YSwgYmFzZTY0RGF0YS5sZW5ndGgpCiAgICAgIHZhciBieXRlU3RyaW5nID0gYmFzZTY0RGF0YTsKCiAgICAgIGlmIChiYXNlNjREYXRhLnNwbGl0KCcsJylbMF0uaW5kZXhPZignYmFzZTY0JykgPj0gMCkgewogICAgICAgIGJ5dGVTdHJpbmcgPSBhdG9iKGJhc2U2NERhdGEuc3BsaXQoJywnKVsxXSk7IC8vIGJhc2U2NCDop6PnoIEKICAgICAgfSBlbHNlIHsKICAgICAgICBieXRlU3RyaW5nID0gdW5lc2NhcGUoYmFzZTY0RGF0YS5zcGxpdCgnLCcpWzFdKTsKICAgICAgfSAvLyDojrflj5bmlofku7bnsbvlnosKCgogICAgICB2YXIgbWltZVN0cmluZyA9IGJhc2U2NERhdGEuc3BsaXQoJywnKVswXS5tYXRjaCgvOiguKj8pOy8pWzFdOyAvLyBtaW1l57G75Z6LCiAgICAgIC8vIEFycmF5QnVmZmVyIOWvueixoeeUqOadpeihqOekuumAmueUqOeahOOAgeWbuuWumumVv+W6pueahOWOn+Wni+S6jOi/m+WItuaVsOaNrue8k+WGsuWMugogICAgICAvLyBsZXQgYXJyYXlCdWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnl0ZVN0cmluZy5sZW5ndGgpIC8vIOWIm+W7uue8k+WGsuaVsOe7hAogICAgICAvLyBsZXQgdWludEFyciA9IG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSAvLyDliJvlu7rop4blm74KCiAgICAgIHZhciB1aW50QXJyID0gbmV3IFVpbnQ4QXJyYXkoYnl0ZVN0cmluZy5sZW5ndGgpOyAvLyDliJvlu7rop4blm74KCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZVN0cmluZy5sZW5ndGg7IGkrKykgewogICAgICAgIHVpbnRBcnJbaV0gPSBieXRlU3RyaW5nLmNoYXJDb2RlQXQoaSk7CiAgICAgIH0gLy8g55Sf5oiQYmxvYuWbvueJhwoKCiAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW3VpbnRBcnJdLCB7CiAgICAgICAgdHlwZTogbWltZVN0cmluZwogICAgICB9KTsgLy8gY29uc29sZS5sb2coIGJsb2IpOwogICAgICAvLyDkvb/nlKggQmxvYiDliJvlu7rkuIDkuKrmjIflkJHnsbvlnovljJbmlbDnu4TnmoRVUkwsIFVSTC5jcmVhdGVPYmplY3RVUkzmmK9uZXcgQmxvYuaWh+S7tueahOaWueazlSzlj6/ku6XnlJ/miJDkuIDkuKrmma7pgJrnmoR1cmws5Y+v5Lul55u05o6l5L2/55SoLOavlOWmgueUqOWcqGltZy5zcmPkuIoKCiAgICAgIHJldHVybiBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpOwogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIHVwbG9hZEltYWdlQ29tcHV0ZWQ6IGZ1bmN0aW9uIHVwbG9hZEltYWdlQ29tcHV0ZWQoKSB7CiAgICAgIHZhciBfdGhpczEwID0gdGhpczsKCiAgICAgIHJldHVybiBmdW5jdGlvbiAoaWQpIHsKICAgICAgICByZXR1cm4gX3RoaXMxMC5maWxlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgIHJldHVybiBpdGVtLnBlcnNvbklkID09IGlkOwogICAgICAgIH0pOwogICAgICB9OwogICAgfSwKICAgIGZpbGVMaXN0Q29tcHV0ZWQ6IGZ1bmN0aW9uIGZpbGVMaXN0Q29tcHV0ZWQoKSB7CiAgICAgIHJldHVybiB0aGlzLmZpbGVMaXN0OwogICAgfQogIH0KfTs="},null]}