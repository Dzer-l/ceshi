{"remainingRequest":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/thread-loader/dist/cjs.js!/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/home/jenkins_data/workspace/页面-公证处后台/src/api/cloudMail.js","dependencies":[{"path":"/home/jenkins_data/workspace/页面-公证处后台/src/api/cloudMail.js","mtime":1634724784678},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:import _regeneratorRuntime from "/home/jenkins_data/workspace/\u9875\u9762-\u516C\u8BC1\u5904\u540E\u53F0/node_modules/@babel/runtime/regenerator";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import { axios } from '@/utils/axios';
export function getCloudListData(_x) {
  return _getCloudListData.apply(this, arguments);
} // 获取详情头部信息

function _getCloudListData() {
  _getCloudListData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return axios("org/evidence-query/".concat(params.pageNum, "/").concat(params.pageSize), params, {
              method: 'POST'
            });

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCloudListData.apply(this, arguments);
}

export function getCloudDateil(_x2) {
  return _getCloudDateil.apply(this, arguments);
} // 获取费用信息

function _getCloudDateil() {
  _getCloudDateil = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return axios("org/evidence-query/".concat(params.evidId, "/"), {}, {
              method: 'GET'
            });

          case 2:
            return _context2.abrupt("return", _context2.sent);

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getCloudDateil.apply(this, arguments);
}

export function getCloudMailDateil(_x3) {
  return _getCloudMailDateil.apply(this, arguments);
} // 获取取证账号信息

function _getCloudMailDateil() {
  _getCloudMailDateil = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(params) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return axios("org/evid-mail/".concat(params.evidId, "/"), {}, {
              method: 'GET'
            });

          case 2:
            return _context3.abrupt("return", _context3.sent);

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _getCloudMailDateil.apply(this, arguments);
}

export function getCloudAccountInfo(_x4) {
  return _getCloudAccountInfo.apply(this, arguments);
} // 获取案件信息中当事人信息

function _getCloudAccountInfo() {
  _getCloudAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(params) {
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return axios("org/evid-user-info/".concat(params.evidId, "/"), {}, {
              method: 'GET'
            });

          case 2:
            return _context4.abrupt("return", _context4.sent);

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _getCloudAccountInfo.apply(this, arguments);
}

export function getCloudPersonInfo(_x5) {
  return _getCloudPersonInfo.apply(this, arguments);
} // 获取证据文件列表

function _getCloudPersonInfo() {
  _getCloudPersonInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(params) {
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return axios("org/mail-evid-person/".concat(params.evidId, "/").concat(params.pageNum, "/").concat(params.pageSize, "/"), {}, {
              method: 'GET'
            });

          case 2:
            return _context5.abrupt("return", _context5.sent);

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _getCloudPersonInfo.apply(this, arguments);
}

export function getEvidMaterialList(_x6) {
  return _getEvidMaterialList.apply(this, arguments);
} // 获取物流信息

function _getEvidMaterialList() {
  _getEvidMaterialList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(params) {
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return axios("org/mail-evid-material/".concat(params.evidId, "/"), {}, {
              method: 'GET'
            });

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _getEvidMaterialList.apply(this, arguments);
}

export function getLogisticsList(_x7) {
  return _getLogisticsList.apply(this, arguments);
} // 获取受送达人信息

function _getLogisticsList() {
  _getLogisticsList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(params) {
    return _regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return axios("org/mail-evid-express-info2/".concat(params.evidId, "/"), {}, {
              method: 'GET'
            });

          case 2:
            return _context7.abrupt("return", _context7.sent);

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _getLogisticsList.apply(this, arguments);
}

export function getPersonRreceiptInfo(_x8) {
  return _getPersonRreceiptInfo.apply(this, arguments);
} // 获取城市三级联动数据

function _getPersonRreceiptInfo() {
  _getPersonRreceiptInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(params) {
    return _regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return axios("org/mailevid-person-receipt/".concat(params.evidId, "/"), {}, {
              method: 'GET'
            });

          case 2:
            return _context8.abrupt("return", _context8.sent);

          case 3:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  return _getPersonRreceiptInfo.apply(this, arguments);
}

export function getCityData() {
  return _getCityData.apply(this, arguments);
} // 获取物流详情

function _getCityData() {
  _getCityData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
    return _regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return axios("org/region-tree", {}, {
              method: 'GET'
            });

          case 2:
            return _context9.abrupt("return", _context9.sent);

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  return _getCityData.apply(this, arguments);
}

export function getLogisticsDateil(_x9) {
  return _getLogisticsDateil.apply(this, arguments);
} // 获取物流详情

function _getLogisticsDateil() {
  _getLogisticsDateil = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(params) {
    return _regeneratorRuntime.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return axios("org/evid-ems-info-templateno?tempOrderNo=".concat(params.tempOrderNo), {}, {
              method: 'GET'
            });

          case 2:
            return _context10.abrupt("return", _context10.sent);

          case 3:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));
  return _getLogisticsDateil.apply(this, arguments);
}

export function getLogisticsDateil2(_x10) {
  return _getLogisticsDateil2.apply(this, arguments);
} // 点击呼叫快递接口

function _getLogisticsDateil2() {
  _getLogisticsDateil2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(params) {
    return _regeneratorRuntime.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return axios("org/evid-ems-info-templateno2?tempOrderNo=".concat(params.tempOrderNo), {}, {
              method: 'GET'
            });

          case 2:
            return _context11.abrupt("return", _context11.sent);

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  return _getLogisticsDateil2.apply(this, arguments);
}

export function mailOrder(_x11) {
  return _mailOrder.apply(this, arguments);
} // 回寄退件快递接口

function _mailOrder() {
  _mailOrder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(params) {
    return _regeneratorRuntime.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            _context12.next = 2;
            return axios("org/evid-ems2", params, {
              method: 'POST'
            });

          case 2:
            return _context12.abrupt("return", _context12.sent);

          case 3:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));
  return _mailOrder.apply(this, arguments);
}

export function mailOrderBack(_x12) {
  return _mailOrderBack.apply(this, arguments);
}

function _mailOrderBack() {
  _mailOrderBack = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(params) {
    return _regeneratorRuntime.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            _context13.next = 2;
            return axios("org/evid-ems2", params, {
              method: 'POST'
            });

          case 2:
            return _context13.abrupt("return", _context13.sent);

          case 3:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13);
  }));
  return _mailOrderBack.apply(this, arguments);
}

export function getEntryMailList(_x13) {
  return _getEntryMailList.apply(this, arguments);
}

function _getEntryMailList() {
  _getEntryMailList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(params) {
    return _regeneratorRuntime.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            _context14.next = 2;
            return axios("org/mail-evid-express-list/".concat(params.evidId, "/").concat(params.pageNum, "/").concat(params.pageSize), {}, {
              method: 'GET'
            });

          case 2:
            return _context14.abrupt("return", _context14.sent);

          case 3:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));
  return _getEntryMailList.apply(this, arguments);
}

export function downloadEntryFile(_x14) {
  return _downloadEntryFile.apply(this, arguments);
}

function _downloadEntryFile() {
  _downloadEntryFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(params) {
    return _regeneratorRuntime.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return axios("org/download-order-evid-re-file?orderId=".concat(params.orderId, "&orderEvidReIdArray=").concat(params.orderEvidReIdArray), {}, {
              method: 'GET',
              responseType: 'blob'
            });

          case 2:
            return _context15.abrupt("return", _context15.sent);

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  return _downloadEntryFile.apply(this, arguments);
}

export function downloadEntry(_x15) {
  return _downloadEntry.apply(this, arguments);
} // 提交编辑后的费用

function _downloadEntry() {
  _downloadEntry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(params) {
    return _regeneratorRuntime.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            _context16.next = 2;
            return axios("org/downLoad-evid-file-fileType/".concat(params.evidId, "/").concat(params.fileType), {}, {
              method: 'GET',
              responseType: 'blob'
            });

          case 2:
            return _context16.abrupt("return", _context16.sent);

          case 3:
          case "end":
            return _context16.stop();
        }
      }
    }, _callee16);
  }));
  return _downloadEntry.apply(this, arguments);
}

export function submitEditCost(_x16) {
  return _submitEditCost.apply(this, arguments);
}

function _submitEditCost() {
  _submitEditCost = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(params) {
    return _regeneratorRuntime.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return axios("org/update-evidMail", params, {
              method: 'POST'
            });

          case 2:
            return _context17.abrupt("return", _context17.sent);

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  return _submitEditCost.apply(this, arguments);
}

export function getCostInfo(_x17) {
  return _getCostInfo.apply(this, arguments);
}

function _getCostInfo() {
  _getCostInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(params) {
    return _regeneratorRuntime.wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            _context18.next = 2;
            return axios("org/mail-evid-cost/".concat(params.evidMailId), {}, {
              method: 'GET'
            });

          case 2:
            return _context18.abrupt("return", _context18.sent);

          case 3:
          case "end":
            return _context18.stop();
        }
      }
    }, _callee18);
  }));
  return _getCostInfo.apply(this, arguments);
}

export function modifyCostInformation(_x18) {
  return _modifyCostInformation.apply(this, arguments);
}

function _modifyCostInformation() {
  _modifyCostInformation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(params) {
    return _regeneratorRuntime.wrap(function _callee19$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            _context19.next = 2;
            return axios("org/mail-evid-cost", params, {
              method: 'POST'
            });

          case 2:
            return _context19.abrupt("return", _context19.sent);

          case 3:
          case "end":
            return _context19.stop();
        }
      }
    }, _callee19);
  }));
  return _modifyCostInformation.apply(this, arguments);
}

export function printExpressSheet(_x19) {
  return _printExpressSheet.apply(this, arguments);
} // 获取订单详情

function _printExpressSheet() {
  _printExpressSheet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(params) {
    return _regeneratorRuntime.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return axios("org/package-print/".concat(params.evidId, "/").concat(params.mailEvidExpressInfoId), {}, {
              method: 'GET'
            });

          case 2:
            return _context20.abrupt("return", _context20.sent);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  return _printExpressSheet.apply(this, arguments);
}

export function getEntryDateil(_x20) {
  return _getEntryDateil.apply(this, arguments);
} // 查询账号信息

function _getEntryDateil() {
  _getEntryDateil = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(params) {
    return _regeneratorRuntime.wrap(function _callee21$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            _context21.next = 2;
            return axios("org/order/".concat(params.orderId), {}, {
              method: 'GET'
            });

          case 2:
            return _context21.abrupt("return", _context21.sent);

          case 3:
          case "end":
            return _context21.stop();
        }
      }
    }, _callee21);
  }));
  return _getEntryDateil.apply(this, arguments);
}

export function getAccountInfo(_x21) {
  return _getAccountInfo.apply(this, arguments);
} // 获取当事人列表

function _getAccountInfo() {
  _getAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(params) {
    return _regeneratorRuntime.wrap(function _callee22$(_context22) {
      while (1) {
        switch (_context22.prev = _context22.next) {
          case 0:
            _context22.next = 2;
            return axios("org/user-account/".concat(params.accountId), {}, {
              method: 'GET'
            });

          case 2:
            return _context22.abrupt("return", _context22.sent);

          case 3:
          case "end":
            return _context22.stop();
        }
      }
    }, _callee22);
  }));
  return _getAccountInfo.apply(this, arguments);
}

export function getProposeInfo(_x22) {
  return _getProposeInfo.apply(this, arguments);
}

function _getProposeInfo() {
  _getProposeInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(params) {
    return _regeneratorRuntime.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return axios("org/order-propose/".concat(params.orderId), {}, {
              method: 'GET'
            });

          case 2:
            return _context23.abrupt("return", _context23.sent);

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  return _getProposeInfo.apply(this, arguments);
}

export function getMailCostInfo(_x23) {
  return _getMailCostInfo.apply(this, arguments);
}

function _getMailCostInfo() {
  _getMailCostInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(params) {
    return _regeneratorRuntime.wrap(function _callee24$(_context24) {
      while (1) {
        switch (_context24.prev = _context24.next) {
          case 0:
            _context24.next = 2;
            return axios("org/mail-order-notary-info-cost/".concat(params.orderId), {}, {
              method: 'GET'
            });

          case 2:
            return _context24.abrupt("return", _context24.sent);

          case 3:
          case "end":
            return _context24.stop();
        }
      }
    }, _callee24);
  }));
  return _getMailCostInfo.apply(this, arguments);
}

export function getProposeDateailInfo(_x24) {
  return _getProposeDateailInfo.apply(this, arguments);
} // 获取材料库

function _getProposeDateailInfo() {
  _getProposeDateailInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(params) {
    return _regeneratorRuntime.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return axios("org/order-propose-detail/".concat(params.orderProposeId), {}, {
              method: 'GET'
            });

          case 2:
            return _context25.abrupt("return", _context25.sent);

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  return _getProposeDateailInfo.apply(this, arguments);
}

export function getMaterialDepot(_x25) {
  return _getMaterialDepot.apply(this, arguments);
} // 修改订单基本信息

function _getMaterialDepot() {
  _getMaterialDepot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(params) {
    return _regeneratorRuntime.wrap(function _callee26$(_context26) {
      while (1) {
        switch (_context26.prev = _context26.next) {
          case 0:
            _context26.next = 2;
            return axios("org/org-material-list/".concat(params.orderId, "?materialName=").concat(params.materialName), {}, {
              method: 'GET'
            });

          case 2:
            return _context26.abrupt("return", _context26.sent);

          case 3:
          case "end":
            return _context26.stop();
        }
      }
    }, _callee26);
  }));
  return _getMaterialDepot.apply(this, arguments);
}

export function modificationOrderInfo(_x26) {
  return _modificationOrderInfo.apply(this, arguments);
} // 确认订单费用已支付 / 确认变更为线下支付

function _modificationOrderInfo() {
  _modificationOrderInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27(params) {
    return _regeneratorRuntime.wrap(function _callee27$(_context27) {
      while (1) {
        switch (_context27.prev = _context27.next) {
          case 0:
            _context27.next = 2;
            return axios("org/update-order-info", params, {
              method: 'POST'
            });

          case 2:
            return _context27.abrupt("return", _context27.sent);

          case 3:
          case "end":
            return _context27.stop();
        }
      }
    }, _callee27);
  }));
  return _modificationOrderInfo.apply(this, arguments);
}

export function sendNotaryPaper(_x27) {
  return _sendNotaryPaper.apply(this, arguments);
} // 修改当事人信息

function _sendNotaryPaper() {
  _sendNotaryPaper = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(data) {
    return _regeneratorRuntime.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            _context28.next = 2;
            return axios("org/send-notary-paper?orderId=".concat(data.orderId, "&orderStatus=").concat(data.orderStatus), {}, {
              method: 'GET'
            });

          case 2:
            return _context28.abrupt("return", _context28.sent);

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));
  return _sendNotaryPaper.apply(this, arguments);
}

export function modificationPartiesInfo(_x28) {
  return _modificationPartiesInfo.apply(this, arguments);
} // 修改订单费用信息

function _modificationPartiesInfo() {
  _modificationPartiesInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29(params) {
    return _regeneratorRuntime.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return axios("org/update-order-propose-info", params, {
              method: 'POST'
            });

          case 2:
            return _context29.abrupt("return", _context29.sent);

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  return _modificationPartiesInfo.apply(this, arguments);
}

export function modificationCostInfo(_x29) {
  return _modificationCostInfo.apply(this, arguments);
} // 获取文书材料列表

function _modificationCostInfo() {
  _modificationCostInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30(params) {
    return _regeneratorRuntime.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            _context30.next = 2;
            return axios("org/update-notary-cost-detail2/".concat(params.orderId), params, {
              method: 'POST'
            });

          case 2:
            return _context30.abrupt("return", _context30.sent);

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));
  return _modificationCostInfo.apply(this, arguments);
}

export function getDocumentMaterialList(_x30) {
  return _getDocumentMaterialList.apply(this, arguments);
}

function _getDocumentMaterialList() {
  _getDocumentMaterialList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31(params) {
    return _regeneratorRuntime.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            _context31.next = 2;
            return axios("org/mail-order-document-list?orderId=".concat(params.orderId), {}, {
              method: 'GET'
            });

          case 2:
            return _context31.abrupt("return", _context31.sent);

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  return _getDocumentMaterialList.apply(this, arguments);
}

export function getLogisticInfo(_x31) {
  return _getLogisticInfo.apply(this, arguments);
}

function _getLogisticInfo() {
  _getLogisticInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32(params) {
    return _regeneratorRuntime.wrap(function _callee32$(_context32) {
      while (1) {
        switch (_context32.prev = _context32.next) {
          case 0:
            _context32.next = 2;
            return axios("org/mail-order-express-send2?orderNum=".concat(params.orderNum), {}, {
              method: 'GET'
            });

          case 2:
            return _context32.abrupt("return", _context32.sent);

          case 3:
          case "end":
            return _context32.stop();
        }
      }
    }, _callee32);
  }));
  return _getLogisticInfo.apply(this, arguments);
}

export function getFileList(_x32) {
  return _getFileList.apply(this, arguments);
} //  获取领证信息

function _getFileList() {
  _getFileList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee33(params) {
    return _regeneratorRuntime.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            _context33.next = 2;
            return axios("org/order-evid-re-file-list/".concat(params.orderId, "/").concat(params.pageNum, "/").concat(params.pageSize), {}, {
              method: 'GET'
            });

          case 2:
            return _context33.abrupt("return", _context33.sent);

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  return _getFileList.apply(this, arguments);
}

export function getReceiverInfo(_x33) {
  return _getReceiverInfo.apply(this, arguments);
} // 获取收件人信息

function _getReceiverInfo() {
  _getReceiverInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee34(params) {
    return _regeneratorRuntime.wrap(function _callee34$(_context34) {
      while (1) {
        switch (_context34.prev = _context34.next) {
          case 0:
            _context34.next = 2;
            return axios("org/select-order-offline-receive?orderNum=".concat(params.orderNum), {}, {
              method: 'GET'
            });

          case 2:
            return _context34.abrupt("return", _context34.sent);

          case 3:
          case "end":
            return _context34.stop();
        }
      }
    }, _callee34);
  }));
  return _getReceiverInfo.apply(this, arguments);
}

export function getRecipientsInfo(_x34) {
  return _getRecipientsInfo.apply(this, arguments);
} // 修改领证人信息

function _getRecipientsInfo() {
  _getRecipientsInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee35(params) {
    return _regeneratorRuntime.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            _context35.next = 2;
            return axios("org/select-order-express-send2?orderNum=".concat(params.orderNum), {}, {
              method: 'GET'
            });

          case 2:
            return _context35.abrupt("return", _context35.sent);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  return _getRecipientsInfo.apply(this, arguments);
}

export function modificationReceiveInfo(_x35) {
  return _modificationReceiveInfo.apply(this, arguments);
} // 修改收件人信息

function _modificationReceiveInfo() {
  _modificationReceiveInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee36(params) {
    return _regeneratorRuntime.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            _context36.next = 2;
            return axios("org/update-order-offline-receive", params, {
              method: 'POST'
            });

          case 2:
            return _context36.abrupt("return", _context36.sent);

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));
  return _modificationReceiveInfo.apply(this, arguments);
}

export function modificationRecipientsInfo(_x36) {
  return _modificationRecipientsInfo.apply(this, arguments);
} // 添加收件人信息

function _modificationRecipientsInfo() {
  _modificationRecipientsInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee37(params) {
    return _regeneratorRuntime.wrap(function _callee37$(_context37) {
      while (1) {
        switch (_context37.prev = _context37.next) {
          case 0:
            _context37.next = 2;
            return axios("org/update-order-express-send2", params, {
              method: 'POST'
            });

          case 2:
            return _context37.abrupt("return", _context37.sent);

          case 3:
          case "end":
            return _context37.stop();
        }
      }
    }, _callee37);
  }));
  return _modificationRecipientsInfo.apply(this, arguments);
}

export function addnRecipientsInfo(_x37) {
  return _addnRecipientsInfo.apply(this, arguments);
} // 获取证据材料列表

function _addnRecipientsInfo() {
  _addnRecipientsInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee38(params) {
    return _regeneratorRuntime.wrap(function _callee38$(_context38) {
      while (1) {
        switch (_context38.prev = _context38.next) {
          case 0:
            _context38.next = 2;
            return axios("org/add-order-express2", params, {
              method: 'POST'
            });

          case 2:
            return _context38.abrupt("return", _context38.sent);

          case 3:
          case "end":
            return _context38.stop();
        }
      }
    }, _callee38);
  }));
  return _addnRecipientsInfo.apply(this, arguments);
}

export function getEvidenceMaterial(_x38) {
  return _getEvidenceMaterial.apply(this, arguments);
} // 获取订单所有关系人下的材料类型及材料文件

function _getEvidenceMaterial() {
  _getEvidenceMaterial = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee39(params) {
    return _regeneratorRuntime.wrap(function _callee39$(_context39) {
      while (1) {
        switch (_context39.prev = _context39.next) {
          case 0:
            _context39.next = 2;
            return axios("org/mail-order-material-list/".concat(params.orderId), {}, {
              method: 'GET'
            });

          case 2:
            return _context39.abrupt("return", _context39.sent);

          case 3:
          case "end":
            return _context39.stop();
        }
      }
    }, _callee39);
  }));
  return _getEvidenceMaterial.apply(this, arguments);
}

export function getAllTypeMaterial(_x39) {
  return _getAllTypeMaterial.apply(this, arguments);
} // 获取订单搜索关系人下的材料类型及材料文件

function _getAllTypeMaterial() {
  _getAllTypeMaterial = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee40(params) {
    return _regeneratorRuntime.wrap(function _callee40$(_context40) {
      while (1) {
        switch (_context40.prev = _context40.next) {
          case 0:
            _context40.next = 2;
            return axios("org/order-proposer-material-all-proposer/".concat(params.orderId), {}, {
              method: 'GET'
            });

          case 2:
            return _context40.abrupt("return", _context40.sent);

          case 3:
          case "end":
            return _context40.stop();
        }
      }
    }, _callee40);
  }));
  return _getAllTypeMaterial.apply(this, arguments);
}

export function getAloneTypeMaterial(_x40) {
  return _getAloneTypeMaterial.apply(this, arguments);
} // 预览图片

function _getAloneTypeMaterial() {
  _getAloneTypeMaterial = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee41(params) {
    return _regeneratorRuntime.wrap(function _callee41$(_context41) {
      while (1) {
        switch (_context41.prev = _context41.next) {
          case 0:
            _context41.next = 2;
            return axios("org/order-proposer-material-proposerId/".concat(params.orderId, "/").concat(params.proposerId), {}, {
              method: 'GET'
            });

          case 2:
            return _context41.abrupt("return", _context41.sent);

          case 3:
          case "end":
            return _context41.stop();
        }
      }
    }, _callee41);
  }));
  return _getAloneTypeMaterial.apply(this, arguments);
}

export function previewMaterials(_x41) {
  return _previewMaterials.apply(this, arguments);
} // 审核单个订单材料

function _previewMaterials() {
  _previewMaterials = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee42(params) {
    return _regeneratorRuntime.wrap(function _callee42$(_context42) {
      while (1) {
        switch (_context42.prev = _context42.next) {
          case 0:
            _context42.next = 2;
            return axios('org/order-material-preview-img', params);

          case 2:
            return _context42.abrupt("return", _context42.sent);

          case 3:
          case "end":
            return _context42.stop();
        }
      }
    }, _callee42);
  }));
  return _previewMaterials.apply(this, arguments);
}

export function reviewSingleMaterial(_x42) {
  return _reviewSingleMaterial.apply(this, arguments);
} // 审核所有订单材料

function _reviewSingleMaterial() {
  _reviewSingleMaterial = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee43(params) {
    return _regeneratorRuntime.wrap(function _callee43$(_context43) {
      while (1) {
        switch (_context43.prev = _context43.next) {
          case 0:
            _context43.next = 2;
            return axios('org/update-order-proposer-material', params, {
              method: 'POST'
            });

          case 2:
            return _context43.abrupt("return", _context43.sent);

          case 3:
          case "end":
            return _context43.stop();
        }
      }
    }, _callee43);
  }));
  return _reviewSingleMaterial.apply(this, arguments);
}

export function reviewAllMaterial(_x43) {
  return _reviewAllMaterial.apply(this, arguments);
}

function _reviewAllMaterial() {
  _reviewAllMaterial = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee44(params) {
    return _regeneratorRuntime.wrap(function _callee44$(_context44) {
      while (1) {
        switch (_context44.prev = _context44.next) {
          case 0:
            _context44.next = 2;
            return axios("org/order-material-approved/".concat(params.orderId), {}, {
              method: 'GET'
            });

          case 2:
            return _context44.abrupt("return", _context44.sent);

          case 3:
          case "end":
            return _context44.stop();
        }
      }
    }, _callee44);
  }));
  return _reviewAllMaterial.apply(this, arguments);
}

export function supplementaryMaterials(_x44) {
  return _supplementaryMaterials.apply(this, arguments);
} // 删除证据材料

function _supplementaryMaterials() {
  _supplementaryMaterials = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee45(params) {
    return _regeneratorRuntime.wrap(function _callee45$(_context45) {
      while (1) {
        switch (_context45.prev = _context45.next) {
          case 0:
            _context45.next = 2;
            return axios("org/order-need-material-update", params, {
              method: 'POST'
            });

          case 2:
            return _context45.abrupt("return", _context45.sent);

          case 3:
          case "end":
            return _context45.stop();
        }
      }
    }, _callee45);
  }));
  return _supplementaryMaterials.apply(this, arguments);
}

export function DeleteMaterials(_x45) {
  return _DeleteMaterials.apply(this, arguments);
} // 删除文书材料

function _DeleteMaterials() {
  _DeleteMaterials = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee46(params) {
    return _regeneratorRuntime.wrap(function _callee46$(_context46) {
      while (1) {
        switch (_context46.prev = _context46.next) {
          case 0:
            _context46.next = 2;
            return axios("org/delete-order-proposer-re-file?id=".concat(params.id), {}, {
              method: 'DELETE'
            });

          case 2:
            return _context46.abrupt("return", _context46.sent);

          case 3:
          case "end":
            return _context46.stop();
        }
      }
    }, _callee46);
  }));
  return _DeleteMaterials.apply(this, arguments);
}

export function DeleteWritMaterials(_x46) {
  return _DeleteWritMaterials.apply(this, arguments);
} // 查询订单是否具备审核通过的条件

function _DeleteWritMaterials() {
  _DeleteWritMaterials = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee47(params) {
    return _regeneratorRuntime.wrap(function _callee47$(_context47) {
      while (1) {
        switch (_context47.prev = _context47.next) {
          case 0:
            _context47.next = 2;
            return axios("org/order-document/".concat(params.id), {}, {
              method: 'DELETE'
            });

          case 2:
            return _context47.abrupt("return", _context47.sent);

          case 3:
          case "end":
            return _context47.stop();
        }
      }
    }, _callee47);
  }));
  return _DeleteWritMaterials.apply(this, arguments);
}

export function determineWhether(_x47) {
  return _determineWhether.apply(this, arguments);
} // 材料库添加材料

function _determineWhether() {
  _determineWhether = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee48(params) {
    return _regeneratorRuntime.wrap(function _callee48$(_context48) {
      while (1) {
        switch (_context48.prev = _context48.next) {
          case 0:
            _context48.next = 2;
            return axios("org/order-passing-check/".concat(params.orderId), {}, {
              method: 'GET'
            });

          case 2:
            return _context48.abrupt("return", _context48.sent);

          case 3:
          case "end":
            return _context48.stop();
        }
      }
    }, _callee48);
  }));
  return _determineWhether.apply(this, arguments);
}

export function addDetermine(_x48) {
  return _addDetermine.apply(this, arguments);
} // 添加临时材料

function _addDetermine() {
  _addDetermine = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee49(params) {
    return _regeneratorRuntime.wrap(function _callee49$(_context49) {
      while (1) {
        switch (_context49.prev = _context49.next) {
          case 0:
            _context49.next = 2;
            return axios("org/add-org-need-material/".concat(params[0].orderId), params, {
              method: 'POST'
            });

          case 2:
            return _context49.abrupt("return", _context49.sent);

          case 3:
          case "end":
            return _context49.stop();
        }
      }
    }, _callee49);
  }));
  return _addDetermine.apply(this, arguments);
}

export function addNeedDetermine(_x49) {
  return _addNeedDetermine.apply(this, arguments);
} // 获取公证处所有的办证点

function _addNeedDetermine() {
  _addNeedDetermine = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee50(params) {
    return _regeneratorRuntime.wrap(function _callee50$(_context50) {
      while (1) {
        switch (_context50.prev = _context50.next) {
          case 0:
            _context50.next = 2;
            return axios("org/add-order-need-material/".concat(params[0].orderId), params, {
              method: 'POST'
            });

          case 2:
            return _context50.abrupt("return", _context50.sent);

          case 3:
          case "end":
            return _context50.stop();
        }
      }
    }, _callee50);
  }));
  return _addNeedDetermine.apply(this, arguments);
}

export function getAllAddress() {
  return _getAllAddress.apply(this, arguments);
} // 发送领证短信

function _getAllAddress() {
  _getAllAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee51() {
    return _regeneratorRuntime.wrap(function _callee51$(_context51) {
      while (1) {
        switch (_context51.prev = _context51.next) {
          case 0:
            _context51.next = 2;
            return axios('org/get-org-office-list', {
              method: 'get'
            });

          case 2:
            return _context51.abrupt("return", _context51.sent);

          case 3:
          case "end":
            return _context51.stop();
        }
      }
    }, _callee51);
  }));
  return _getAllAddress.apply(this, arguments);
}

export function sendTextMessage(_x50) {
  return _sendTextMessage.apply(this, arguments);
}

function _sendTextMessage() {
  _sendTextMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee52(params) {
    return _regeneratorRuntime.wrap(function _callee52$(_context52) {
      while (1) {
        switch (_context52.prev = _context52.next) {
          case 0:
            _context52.next = 2;
            return axios("org/order-sms-send/".concat(params.orderId), {}, {
              method: 'GET'
            });

          case 2:
            return _context52.abrupt("return", _context52.sent);

          case 3:
          case "end":
            return _context52.stop();
        }
      }
    }, _callee52);
  }));
  return _sendTextMessage.apply(this, arguments);
}

export function previewDocumentary(_x51) {
  return _previewDocumentary.apply(this, arguments);
} // 订单新增关系人材料

function _previewDocumentary() {
  _previewDocumentary = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee53(params) {
    return _regeneratorRuntime.wrap(function _callee53$(_context53) {
      while (1) {
        switch (_context53.prev = _context53.next) {
          case 0:
            _context53.next = 2;
            return axios("org/order-document-preview/".concat(params.orderDocumentId), {}, {
              method: 'GET'
            });

          case 2:
            return _context53.abrupt("return", _context53.sent);

          case 3:
          case "end":
            return _context53.stop();
        }
      }
    }, _callee53);
  }));
  return _previewDocumentary.apply(this, arguments);
}

export function addApplicationMaterial(_x52) {
  return _addApplicationMaterial.apply(this, arguments);
} // 下载

function _addApplicationMaterial() {
  _addApplicationMaterial = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee54(params) {
    return _regeneratorRuntime.wrap(function _callee54$(_context54) {
      while (1) {
        switch (_context54.prev = _context54.next) {
          case 0:
            _context54.next = 2;
            return axios("org/save-order-proposer-re-file-list", params, {
              method: 'post'
            });

          case 2:
            return _context54.abrupt("return", _context54.sent);

          case 3:
          case "end":
            return _context54.stop();
        }
      }
    }, _callee54);
  }));
  return _addApplicationMaterial.apply(this, arguments);
}

export function downloadFile(_x53) {
  return _downloadFile.apply(this, arguments);
}

function _downloadFile() {
  _downloadFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee55(params) {
    return _regeneratorRuntime.wrap(function _callee55$(_context55) {
      while (1) {
        switch (_context55.prev = _context55.next) {
          case 0:
            _context55.next = 2;
            return axios("org/download-material?orderId=".concat(params.orderId, "&documentId=").concat(params.id, "&downloadType=").concat(params.downloadType), {}, {
              method: 'GET'
            });

          case 2:
            return _context55.abrupt("return", _context55.sent);

          case 3:
          case "end":
            return _context55.stop();
        }
      }
    }, _callee55);
  }));
  return _downloadFile.apply(this, arguments);
}

export function getOrgInfo(_x54) {
  return _getOrgInfo.apply(this, arguments);
} // 复制签署码

function _getOrgInfo() {
  _getOrgInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee56(params) {
    return _regeneratorRuntime.wrap(function _callee56$(_context56) {
      while (1) {
        switch (_context56.prev = _context56.next) {
          case 0:
            _context56.next = 2;
            return axios("org/evid-org-office-info/".concat(params.evidId), {}, {
              method: 'GET'
            });

          case 2:
            return _context56.abrupt("return", _context56.sent);

          case 3:
          case "end":
            return _context56.stop();
        }
      }
    }, _callee56);
  }));
  return _getOrgInfo.apply(this, arguments);
}

export function SignedCodeCopy(_x55) {
  return _SignedCodeCopy.apply(this, arguments);
} // 获取登录人员是否有操作权限

function _SignedCodeCopy() {
  _SignedCodeCopy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee57(params) {
    return _regeneratorRuntime.wrap(function _callee57$(_context57) {
      while (1) {
        switch (_context57.prev = _context57.next) {
          case 0:
            _context57.next = 2;
            return axios("org/QRCode?orderId=".concat(params.orderId, "&userType=").concat(params.userType, "&qrCodeName=").concat(params.qrCodeName), {}, {
              method: 'GET'
            });

          case 2:
            return _context57.abrupt("return", _context57.sent);

          case 3:
          case "end":
            return _context57.stop();
        }
      }
    }, _callee57);
  }));
  return _SignedCodeCopy.apply(this, arguments);
}

export function getJurisdiction(_x56) {
  return _getJurisdiction.apply(this, arguments);
}

function _getJurisdiction() {
  _getJurisdiction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee58(params) {
    return _regeneratorRuntime.wrap(function _callee58$(_context58) {
      while (1) {
        switch (_context58.prev = _context58.next) {
          case 0:
            _context58.next = 2;
            return axios("org/query-order-jurisdiction/".concat(params.orderId), {}, {
              method: 'GET'
            });

          case 2:
            return _context58.abrupt("return", _context58.sent);

          case 3:
          case "end":
            return _context58.stop();
        }
      }
    }, _callee58);
  }));
  return _getJurisdiction.apply(this, arguments);
}

export function getEvidJurisdiction(_x57) {
  return _getEvidJurisdiction.apply(this, arguments);
} // 查询机构关系人

function _getEvidJurisdiction() {
  _getEvidJurisdiction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee59(params) {
    return _regeneratorRuntime.wrap(function _callee59$(_context59) {
      while (1) {
        switch (_context59.prev = _context59.next) {
          case 0:
            _context59.next = 2;
            return axios("org/query-evid-jurisdiction/".concat(params.evidId), {}, {
              method: 'GET'
            });

          case 2:
            return _context59.abrupt("return", _context59.sent);

          case 3:
          case "end":
            return _context59.stop();
        }
      }
    }, _callee59);
  }));
  return _getEvidJurisdiction.apply(this, arguments);
}

export function getEnterprisePrivyInfo(_x58) {
  return _getEnterprisePrivyInfo.apply(this, arguments);
} // 查询机构关系人

function _getEnterprisePrivyInfo() {
  _getEnterprisePrivyInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee60(params) {
    return _regeneratorRuntime.wrap(function _callee60$(_context60) {
      while (1) {
        switch (_context60.prev = _context60.next) {
          case 0:
            _context60.next = 2;
            return axios("org/query-account-userPersonbook/".concat(params.accountId), {}, {
              method: 'GET'
            });

          case 2:
            return _context60.abrupt("return", _context60.sent);

          case 3:
          case "end":
            return _context60.stop();
        }
      }
    }, _callee60);
  }));
  return _getEnterprisePrivyInfo.apply(this, arguments);
}

export function cancelSentStem(_x59) {
  return _cancelSentStem.apply(this, arguments);
}

function _cancelSentStem() {
  _cancelSentStem = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee61(params) {
    return _regeneratorRuntime.wrap(function _callee61$(_context61) {
      while (1) {
        switch (_context61.prev = _context61.next) {
          case 0:
            _context61.next = 2;
            return axios("org/evid-ems-cancel2/".concat(params.evidMailId), {}, {
              method: 'post'
            });

          case 2:
            return _context61.abrupt("return", _context61.sent);

          case 3:
          case "end":
            return _context61.stop();
        }
      }
    }, _callee61);
  }));
  return _cancelSentStem.apply(this, arguments);
}

export function getShippingInformation(_x60) {
  return _getShippingInformation.apply(this, arguments);
}

function _getShippingInformation() {
  _getShippingInformation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee62(params) {
    return _regeneratorRuntime.wrap(function _callee62$(_context62) {
      while (1) {
        switch (_context62.prev = _context62.next) {
          case 0:
            _context62.next = 2;
            return axios("org/evidence-query/".concat(params.evidId), {}, {
              method: 'GET'
            });

          case 2:
            return _context62.abrupt("return", _context62.sent);

          case 3:
          case "end":
            return _context62.stop();
        }
      }
    }, _callee62);
  }));
  return _getShippingInformation.apply(this, arguments);
}

export function sendSmsToTheParties(_x61) {
  return _sendSmsToTheParties.apply(this, arguments);
} // 获取承办人

function _sendSmsToTheParties() {
  _sendSmsToTheParties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee63(params) {
    return _regeneratorRuntime.wrap(function _callee63$(_context63) {
      while (1) {
        switch (_context63.prev = _context63.next) {
          case 0:
            _context63.next = 2;
            return axios("org/send-url-by-sms?orderId=".concat(params.orderId, "&confType=1"), {}, {
              method: 'GET'
            });

          case 2:
            return _context63.abrupt("return", _context63.sent);

          case 3:
          case "end":
            return _context63.stop();
        }
      }
    }, _callee63);
  }));
  return _sendSmsToTheParties.apply(this, arguments);
}

export function getOperator() {
  return _getOperator.apply(this, arguments);
} // 获取当前公证处的办证点

function _getOperator() {
  _getOperator = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee64() {
    return _regeneratorRuntime.wrap(function _callee64$(_context64) {
      while (1) {
        switch (_context64.prev = _context64.next) {
          case 0:
            _context64.next = 2;
            return axios("org/org-user-list", {}, {
              method: "get"
            });

          case 2:
            return _context64.abrupt("return", _context64.sent);

          case 3:
          case "end":
            return _context64.stop();
        }
      }
    }, _callee64);
  }));
  return _getOperator.apply(this, arguments);
}

export function getOrgOfficeList(_x62) {
  return _getOrgOfficeList.apply(this, arguments);
} // 导出订单

function _getOrgOfficeList() {
  _getOrgOfficeList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee65(params) {
    return _regeneratorRuntime.wrap(function _callee65$(_context65) {
      while (1) {
        switch (_context65.prev = _context65.next) {
          case 0:
            _context65.next = 2;
            return axios("org/org-office-by-orgId", {}, {
              method: "get"
            });

          case 2:
            return _context65.abrupt("return", _context65.sent);

          case 3:
          case "end":
            return _context65.stop();
        }
      }
    }, _callee65);
  }));
  return _getOrgOfficeList.apply(this, arguments);
}

export function exportPackageRecordExcel(_x63) {
  return _exportPackageRecordExcel.apply(this, arguments);
} // 获取签收寄函照片需要上传材料类型

function _exportPackageRecordExcel() {
  _exportPackageRecordExcel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee66(data) {
    return _regeneratorRuntime.wrap(function _callee66$(_context66) {
      while (1) {
        switch (_context66.prev = _context66.next) {
          case 0:
            _context66.next = 2;
            return axios("org/evidence-excel ", data, {
              method: 'POST',
              responseType: 'blob'
            });

          case 2:
            return _context66.abrupt("return", _context66.sent);

          case 3:
          case "end":
            return _context66.stop();
        }
      }
    }, _callee66);
  }));
  return _exportPackageRecordExcel.apply(this, arguments);
}

export function getEvidSignSendNeedMaterial(_x64) {
  return _getEvidSignSendNeedMaterial.apply(this, arguments);
} // 签收照片 寄函图片 退回包裹图片 上传

function _getEvidSignSendNeedMaterial() {
  _getEvidSignSendNeedMaterial = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee67(data) {
    return _regeneratorRuntime.wrap(function _callee67$(_context67) {
      while (1) {
        switch (_context67.prev = _context67.next) {
          case 0:
            _context67.next = 2;
            return axios("org/get-evid-sign-send-need-material", data);

          case 2:
            return _context67.abrupt("return", _context67.sent);

          case 3:
          case "end":
            return _context67.stop();
        }
      }
    }, _callee67);
  }));
  return _getEvidSignSendNeedMaterial.apply(this, arguments);
}

export function signSendFileUpload(_x65) {
  return _signSendFileUpload.apply(this, arguments);
} // 签收照片 寄函图片 退回包裹图片 上传

function _signSendFileUpload() {
  _signSendFileUpload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee68(data) {
    return _regeneratorRuntime.wrap(function _callee68$(_context68) {
      while (1) {
        switch (_context68.prev = _context68.next) {
          case 0:
            _context68.next = 2;
            return axios("org/sign-send-file-upload", data, {
              method: "POST"
            });

          case 2:
            return _context68.abrupt("return", _context68.sent);

          case 3:
          case "end":
            return _context68.stop();
        }
      }
    }, _callee68);
  }));
  return _signSendFileUpload.apply(this, arguments);
}

export function getMailEvidReceivePersonInfo(_x66) {
  return _getMailEvidReceivePersonInfo.apply(this, arguments);
} // 保存图片

function _getMailEvidReceivePersonInfo() {
  _getMailEvidReceivePersonInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee69(data) {
    return _regeneratorRuntime.wrap(function _callee69$(_context69) {
      while (1) {
        switch (_context69.prev = _context69.next) {
          case 0:
            _context69.next = 2;
            return axios("org/getMailEvidReceivePersonInfo", data);

          case 2:
            return _context69.abrupt("return", _context69.sent);

          case 3:
          case "end":
            return _context69.stop();
        }
      }
    }, _callee69);
  }));
  return _getMailEvidReceivePersonInfo.apply(this, arguments);
}

export function saveMailPicture(_x67) {
  return _saveMailPicture.apply(this, arguments);
} // 修改证据费用信息及证据状态

function _saveMailPicture() {
  _saveMailPicture = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee70(data) {
    return _regeneratorRuntime.wrap(function _callee70$(_context70) {
      while (1) {
        switch (_context70.prev = _context70.next) {
          case 0:
            _context70.next = 2;
            return axios("org/save-mail-picture", data, {
              method: "POST"
            });

          case 2:
            return _context70.abrupt("return", _context70.sent);

          case 3:
          case "end":
            return _context70.stop();
        }
      }
    }, _callee70);
  }));
  return _saveMailPicture.apply(this, arguments);
}

export function updateEvidMail(_x68) {
  return _updateEvidMail.apply(this, arguments);
} // 证据物流送达信息列表

function _updateEvidMail() {
  _updateEvidMail = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee71(data) {
    return _regeneratorRuntime.wrap(function _callee71$(_context71) {
      while (1) {
        switch (_context71.prev = _context71.next) {
          case 0:
            _context71.next = 2;
            return axios("org/update-evidMail", data, {
              method: "POST"
            });

          case 2:
            return _context71.abrupt("return", _context71.sent);

          case 3:
          case "end":
            return _context71.stop();
        }
      }
    }, _callee71);
  }));
  return _updateEvidMail.apply(this, arguments);
}

export function mailEvidExpressInfo(_x69) {
  return _mailEvidExpressInfo.apply(this, arguments);
} // 确认全部物流送达

function _mailEvidExpressInfo() {
  _mailEvidExpressInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee72(params) {
    return _regeneratorRuntime.wrap(function _callee72$(_context72) {
      while (1) {
        switch (_context72.prev = _context72.next) {
          case 0:
            _context72.next = 2;
            return axios("org/mail-confirm-express-info2/".concat(params), {});

          case 2:
            return _context72.abrupt("return", _context72.sent);

          case 3:
          case "end":
            return _context72.stop();
        }
      }
    }, _callee72);
  }));
  return _mailEvidExpressInfo.apply(this, arguments);
}

export function updateMailConfirmExpressInfo(_x70) {
  return _updateMailConfirmExpressInfo.apply(this, arguments);
} // 生成二维码-寄函签收图片

function _updateMailConfirmExpressInfo() {
  _updateMailConfirmExpressInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee73(data) {
    return _regeneratorRuntime.wrap(function _callee73$(_context73) {
      while (1) {
        switch (_context73.prev = _context73.next) {
          case 0:
            _context73.next = 2;
            return axios("org/update-mail-confirm-express-info", data, {
              method: "POST"
            });

          case 2:
            return _context73.abrupt("return", _context73.sent);

          case 3:
          case "end":
            return _context73.stop();
        }
      }
    }, _callee73);
  }));
  return _updateMailConfirmExpressInfo.apply(this, arguments);
}

export function evidSignUploadQrcode(_x71) {
  return _evidSignUploadQrcode.apply(this, arguments);
} // 获取h5上传的文件流

function _evidSignUploadQrcode() {
  _evidSignUploadQrcode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee74(data) {
    return _regeneratorRuntime.wrap(function _callee74$(_context74) {
      while (1) {
        switch (_context74.prev = _context74.next) {
          case 0:
            _context74.next = 2;
            return axios("org/evid-sign-send-upload-qr-code", data, {
              responseType: 'blob'
            });

          case 2:
            return _context74.abrupt("return", _context74.sent);

          case 3:
          case "end":
            return _context74.stop();
        }
      }
    }, _callee74);
  }));
  return _evidSignUploadQrcode.apply(this, arguments);
}

export function getH5FileStream(_x72) {
  return _getH5FileStream.apply(this, arguments);
} // 删除h5图片

function _getH5FileStream() {
  _getH5FileStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee75(data) {
    return _regeneratorRuntime.wrap(function _callee75$(_context75) {
      while (1) {
        switch (_context75.prev = _context75.next) {
          case 0:
            _context75.next = 2;
            return axios("org/get-h5-file-stream/?evidId=".concat(data.evidId), data, {
              method: "POST"
            });

          case 2:
            return _context75.abrupt("return", _context75.sent);

          case 3:
          case "end":
            return _context75.stop();
        }
      }
    }, _callee75);
  }));
  return _getH5FileStream.apply(this, arguments);
}

export function delH5File(_x73) {
  return _delH5File.apply(this, arguments);
} // 回退寄件

function _delH5File() {
  _delH5File = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee76(data) {
    return _regeneratorRuntime.wrap(function _callee76$(_context76) {
      while (1) {
        switch (_context76.prev = _context76.next) {
          case 0:
            _context76.next = 2;
            return axios("org/del-h5-file/".concat(data.evidMailId), data, {
              method: 'delete'
            });

          case 2:
            return _context76.abrupt("return", _context76.sent);

          case 3:
          case "end":
            return _context76.stop();
        }
      }
    }, _callee76);
  }));
  return _delH5File.apply(this, arguments);
}

export function getBackMailList(_x74) {
  return _getBackMailList.apply(this, arguments);
}

function _getBackMailList() {
  _getBackMailList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee77(params) {
    return _regeneratorRuntime.wrap(function _callee77$(_context77) {
      while (1) {
        switch (_context77.prev = _context77.next) {
          case 0:
            _context77.next = 2;
            return axios("org/mail-evid-express-lists/".concat(params.evidId, "/").concat(params.pageNum, "/").concat(params.pageSize), {}, {
              method: 'GET'
            });

          case 2:
            return _context77.abrupt("return", _context77.sent);

          case 3:
          case "end":
            return _context77.stop();
        }
      }
    }, _callee77);
  }));
  return _getBackMailList.apply(this, arguments);
}"},null]}