{"remainingRequest":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/thread-loader/dist/cjs.js!/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/home/jenkins_data/workspace/页面-公证处后台/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jenkins_data/workspace/页面-公证处后台/src/components/entryTab/evidenceMaterial.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jenkins_data/workspace/页面-公证处后台/src/components/entryTab/evidenceMaterial.vue","mtime":1634724784694},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jenkins_data/workspace/页面-公证处后台/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiL2hvbWUvamVua2luc19kYXRhL3dvcmtzcGFjZS9cdTk4NzVcdTk3NjItXHU1MTZDXHU4QkMxXHU1OTA0XHU1NDBFXHU1M0YwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvciI7CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfQoKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IHsgZ2V0RXZpZGVuY2VNYXRlcmlhbCwgcHJldmlld01hdGVyaWFscywgRGVsZXRlTWF0ZXJpYWxzLCBnZXRFbnRyeURhdGVpbCwgZ2V0QWxsVHlwZU1hdGVyaWFsLCBhZGRBcHBsaWNhdGlvbk1hdGVyaWFsIH0gZnJvbSAnLi4vLi4vYXBpL2Nsb3VkTWFpbCc7CmltcG9ydCAqIGFzIGRzIGZyb20gJ0AvYXBpL2RldGFpbHMnOwppbXBvcnQgeyBwcmludEluaXQsIHByaW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvZW50cnlQcmludCc7CmV4cG9ydCBkZWZhdWx0IHsKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAganVyaXNkaWN0aW9uOiBmYWxzZSwKICAgICAgZmlsZUxpc3Q6IFtdLAogICAgICBmaWxlOiB7fSwKICAgICAgY2hlY2tMaXN0OiBbXSwKICAgICAgdGFibGVEYXRhOiBbXSwKICAgICAgZGVmYXVsdFByb3BzOiB7CiAgICAgICAgY2hpbGRyZW46ICdjaGlsZHJlbicsCiAgICAgICAgbGFiZWw6ICdsYWJlbCcKICAgICAgfSwKICAgICAgc2VsZWN0RGF0YTogW10sCiAgICAgIGV2aWVuY2VEYXRhOiBbXSwKICAgICAgYWxsQ2hlY2tlZDogZmFsc2UsCiAgICAgIGlzSW5kZXRlcm1pbmF0ZTogZmFsc2UsCiAgICAgIGN1cnJlbnRQYWdlMzogMSwKICAgICAgcGFnZVNpemU6IDEwLAogICAgICB0b3RhbDogMCwKICAgICAgb3JkZXJJZDogJycsCiAgICAgIGJhc3VlRGF0YToge30sCiAgICAgIHVwbG9hZE1hdGVyaWFsRGlhbG9nVmlzaWJsZTogZmFsc2UsCiAgICAgIGZvcm1MYWJlbEFsaWduOiB7CiAgICAgICAgbmFtZTogJycsCiAgICAgICAgdHlwZTogJycKICAgICAgfSwKICAgICAgb3B0aW9uczogW10sCiAgICAgIGltZ1VSTERhdGE6IFtdLAogICAgICBwcm9wZXNEYXRhOiBbXSwKICAgICAgbWF0ZXJpYWxEYXRhOiB7fSwKICAgICAgdXBsb2FkRGF0YTogW10sCiAgICAgIGZ1bGxzY3JlZW5Mb2FkaW5nOiBmYWxzZSwKICAgICAgbWF0ZXJpYWxMaXN0OiBbXSwKICAgICAgdG90YWxTdGF0dTogZmFsc2UsCiAgICAgIGNoZWNrU3RhdHVzOiB0cnVlLAogICAgICBtYXRlcmlhbExpc3REYXRhOiBbXQogICAgfTsKICB9LAogIHdhdGNoOiB7fSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdGhpcy5qdXJpc2RpY3Rpb24gPSB0aGlzLiRwYXJlbnQuJHBhcmVudC4kcGFyZW50Lmp1cmlzZGljdGlvbjsKCiAgICBpZiAodGhpcy4kcm91dGUucXVlcnkub3JkZXJJZCkgewogICAgICB0aGlzLm9yZGVySWQgPSB0aGlzLiRyb3V0ZS5xdWVyeS5vcmRlcklkOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5vcmRlcklkID0gdGhpcy4kc3RvcmUuc3RhdGUuYXBwLm9yZGVySWQ7CiAgICAgIHZhciB1cmwgPSAiLyMiLmNvbmNhdCh0aGlzLiRyb3V0ZS5wYXRoLCAiP29yZGVySWQ9IikuY29uY2F0KHRoaXMub3JkZXJJZCk7CiAgICAgIGhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsIHVybCk7CiAgICB9CgogICAgdGhpcy5nZXRMaXN0KCk7CiAgfSwKICBtZXRob2RzOiB7CiAgICB1cGxvYWRpbmc6IGZ1bmN0aW9uIHVwbG9hZGluZygpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHRoaXMuJGF4aW9zKCJvcmcvbWFpbC1vcmRlci1uZWVkLW1hdGVyaWFsLyIuY29uY2F0KHRoaXMub3JkZXJJZCkpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIF90aGlzLm9wdGlvbnMgPSByZXMuZGF0YTsKICAgICAgICBfdGhpcy51cGxvYWREYXRhID0gW107CiAgICAgICAgX3RoaXMuaW1nVVJMRGF0YSA9IFtdOwogICAgICAgIF90aGlzLnVwbG9hZE1hdGVyaWFsRGlhbG9nVmlzaWJsZSA9IHRydWU7CiAgICAgIH0pOwogICAgfSwKICAgIGdldExpc3Q6IGZ1bmN0aW9uIGdldExpc3QoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdmFyIGRhdGEgPSB7CiAgICAgICAgb3JkZXJJZDogdGhpcy5vcmRlcklkLAogICAgICAgIHBhZ2VOdW06IHRoaXMuY3VycmVudFBhZ2UzLAogICAgICAgIHBhZ2VTaXplOiB0aGlzLnBhZ2VTaXplCiAgICAgIH07CiAgICAgIGdldEVudHJ5RGF0ZWlsKGRhdGEpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIF90aGlzMi5iYXN1ZURhdGEgPSByZXMuZGF0YTsKICAgICAgICBnZXRFdmlkZW5jZU1hdGVyaWFsKGRhdGEpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgICAgaWYgKHJlcy5zdWNjZXNzKSB7CiAgICAgICAgICAgIF90aGlzMi5tYXRlcmlhbExpc3REYXRhID0gcmVzLmRhdGE7IC8vIHRoaXMudG90YWwgPSByZXMuZGF0YS50b3RhbAogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0sCiAgICByZXZpZXdNYXRlcmlhbHM6IGZ1bmN0aW9uIHJldmlld01hdGVyaWFscygpIHsKICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdhcHAvQ0hBTkdFX09SREVSSUQnLCB0aGlzLm9yZGVySWQpOwogICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7CiAgICAgICAgbmFtZTogJ3Jldmlld01hdGVyaWFscycsCiAgICAgICAgcXVlcnk6IHsKICAgICAgICAgIG9yZGVySWQ6IHRoaXMub3JkZXJJZAogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgZXhhbWluZU1hdGVyaWFsczogZnVuY3Rpb24gZXhhbWluZU1hdGVyaWFscygpIHsKICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdhcHAvQ0hBTkdFX09SREVSSUQnLCB0aGlzLm9yZGVySWQpOwogICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7CiAgICAgICAgbmFtZTogJ2V4YW1pbmVNYXRlcmlhbHMnLAogICAgICAgIHF1ZXJ5OiB7CiAgICAgICAgICBvcmRlcklkOiB0aGlzLm9yZGVySWQKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIGRvd25sb2FkOiBmdW5jdGlvbiBkb3dubG9hZCh2YWwpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB2YXIgZG93bmxvYWRUeXBlID0gMjsKICAgICAgdmFyIGZpbGVOYW1lID0gdmFsLm9yaWdpbkZpbGVOYW1lOwogICAgICB0aGlzLiRheGlvcygnb3JnL2Rvd25sb2FkLW1hdGVyaWFsJywgewogICAgICAgIG9yZGVySWQ6IHRoaXMub3JkZXJJZCwKICAgICAgICBkb2N1bWVudElkOiB2YWwuaWQsCiAgICAgICAgZG93bmxvYWRUeXBlOiBkb3dubG9hZFR5cGUKICAgICAgfSwgewogICAgICAgIHJlc3BvbnNlVHlwZTogJ2Jsb2InCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGJsb2IpIHsKICAgICAgICBfdGhpczMuc2F2ZUFzKGJsb2IsIGZpbGVOYW1lKTsKICAgICAgfSk7CiAgICB9LAogICAgc2F2ZUFzOiBmdW5jdGlvbiBzYXZlQXMoYmxvYiwgZmlsZU5hbWUpIHsKICAgICAgaWYgKHdpbmRvdy5uYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYikgewogICAgICAgIG5hdmlnYXRvci5tc1NhdmVCbG9iKGJsb2IsIGZpbGVOYW1lKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgICAgICB2YXIgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTsKICAgICAgICBsaW5rLmhyZWYgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTsgLy8g5Yib5bu65a+56LGhdXJsCgogICAgICAgIGxpbmsuZG93bmxvYWQgPSBmaWxlTmFtZTsgLy8gZml4IEZpcmVmb3gKCiAgICAgICAgbGluay5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQobGluayk7CiAgICAgICAgbGluay5jbGljaygpOwogICAgICAgIGJvZHkucmVtb3ZlQ2hpbGQobGluayk7CiAgICAgICAgd2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwobGluay5ocmVmKTsgLy8g6YCa6L+H6LCD55SoIFVSTC5jcmVhdGVPYmplY3RVUkwoKSDliJvlu7rnmoQgVVJMIOWvueixoQogICAgICB9CiAgICB9LAogICAgYWxsU2VsZWN0TWF0ZXJhaWw6IGZ1bmN0aW9uIGFsbFNlbGVjdE1hdGVyYWlsKHZhbCkgewogICAgICB0aGlzLmlzSW5kZXRlcm1pbmF0ZSA9IGZhbHNlOwoKICAgICAgaWYgKHRoaXMuYWxsQ2hlY2tlZCkgewogICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmV2aWVuY2VEYXRhLmxlbmd0aDsgaW5kZXgrKykgewogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmV2aWVuY2VEYXRhW2luZGV4XS5vcmRlclByb3Bvc2VyTWF0ZXJpYWxEVE9TLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHRoaXMuZXZpZW5jZURhdGFbaW5kZXhdLmxpc3QucHVzaCh0aGlzLmV2aWVuY2VEYXRhW2luZGV4XS5vcmRlclByb3Bvc2VyTWF0ZXJpYWxEVE9TW2ldLmlkKTsKICAgICAgICAgICAgdGhpcy5ldmllbmNlRGF0YVtpbmRleF0uY2hlY2sgPSB0cnVlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBmb3IgKHZhciBfaW5kZXggPSAwOyBfaW5kZXggPCB0aGlzLmV2aWVuY2VEYXRhLmxlbmd0aDsgX2luZGV4KyspIHsKICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB0aGlzLmV2aWVuY2VEYXRhW19pbmRleF0ub3JkZXJQcm9wb3Nlck1hdGVyaWFsRFRPUy5sZW5ndGg7IF9pKyspIHsKICAgICAgICAgICAgdGhpcy5ldmllbmNlRGF0YVtfaW5kZXhdLmxpc3QgPSBbXTsKICAgICAgICAgICAgdGhpcy5ldmllbmNlRGF0YVtfaW5kZXhdLmNoZWNrID0gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgZ2V0RmlsZVR5cGU6IGZ1bmN0aW9uIGdldEZpbGVUeXBlKGZpbGVOYW1lKSB7CiAgICAgIC8vIOWQjue8gOiOt+WPlgogICAgICB2YXIgc3VmZml4ID0gJyc7IC8vIOiOt+WPluexu+Wei+e7k+aenAoKICAgICAgdmFyIHJlc3VsdCA9ICcnOwoKICAgICAgdHJ5IHsKICAgICAgICB2YXIgZmxpZUFyciA9IGZpbGVOYW1lLnNwbGl0KCcuJyk7CiAgICAgICAgc3VmZml4ID0gZmxpZUFycltmbGllQXJyLmxlbmd0aCAtIDFdOwogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBzdWZmaXggPSAnJzsKICAgICAgfSAvLyBmaWxlTmFtZeaXoOWQjue8gOi/lOWbniBmYWxzZQoKCiAgICAgIGlmICghc3VmZml4KSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICBzdWZmaXggPSBzdWZmaXgudG9Mb2NhbGVMb3dlckNhc2UoKTsgLy8g5Zu+54mH5qC85byPCgogICAgICB2YXIgaW1nbGlzdCA9IFsncG5nJywgJ2pwZycsICdqcGVnJywgJ2JtcCcsICdnaWYnXTsgLy8g6L+b6KGM5Zu+54mH5Yy56YWNCgogICAgICByZXN1bHQgPSBpbWdsaXN0LmZpbmQoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICByZXR1cm4gaXRlbSA9PT0gc3VmZml4OwogICAgICB9KTsKCiAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICByZXR1cm4gJ2ltYWdlJzsKICAgICAgfSAvLyDljLnphY10eHQKCgogICAgICB2YXIgdHh0bGlzdCA9IFsndHh0J107CiAgICAgIHJlc3VsdCA9IHR4dGxpc3QuZmluZChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIHJldHVybiBpdGVtID09PSBzdWZmaXg7CiAgICAgIH0pOwoKICAgICAgaWYgKHJlc3VsdCkgewogICAgICAgIHJldHVybiAndHh0JzsKICAgICAgfSAvLyDljLnphY0gZXhjZWwKCgogICAgICB2YXIgZXhjZWxpc3QgPSBbJ3hscycsICd4bHN4J107CiAgICAgIHJlc3VsdCA9IGV4Y2VsaXN0LmZpbmQoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICByZXR1cm4gaXRlbSA9PT0gc3VmZml4OwogICAgICB9KTsKCiAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICByZXR1cm4gJ2V4Y2VsJzsKICAgICAgfSAvLyDljLnphY0gd29yZAoKCiAgICAgIHZhciB3b3JkbGlzdCA9IFsnZG9jJywgJ2RvY3gnXTsKICAgICAgcmVzdWx0ID0gd29yZGxpc3QuZmluZChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIHJldHVybiBpdGVtID09PSBzdWZmaXg7CiAgICAgIH0pOwoKICAgICAgaWYgKHJlc3VsdCkgewogICAgICAgIHJldHVybiAnd29yZCc7CiAgICAgIH0gLy8g5Yy56YWNIHBkZgoKCiAgICAgIHZhciBwZGZsaXN0ID0gWydwZGYnXTsKICAgICAgcmVzdWx0ID0gcGRmbGlzdC5maW5kKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuIGl0ZW0gPT09IHN1ZmZpeDsKICAgICAgfSk7CgogICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgcmV0dXJuICdwZGYnOwogICAgICB9IC8vIOWMuemFjSBwcHQKCgogICAgICB2YXIgcHB0bGlzdCA9IFsncHB0JywgJ3BwdHgnXTsKICAgICAgcmVzdWx0ID0gcHB0bGlzdC5maW5kKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuIGl0ZW0gPT09IHN1ZmZpeDsKICAgICAgfSk7CgogICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgcmV0dXJuICdwcHQnOwogICAgICB9IC8vIOWMuemFjSDop4bpopEKCgogICAgICB2YXIgdmlkZW9saXN0ID0gWydtcDQnLCAnbTJ2JywgJ21rdicsICdybXZiJywgJ3dtdicsICdhdmknLCAnZmx2JywgJ21vdicsICdtNHYnXTsKICAgICAgcmVzdWx0ID0gdmlkZW9saXN0LmZpbmQoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICByZXR1cm4gaXRlbSA9PT0gc3VmZml4OwogICAgICB9KTsKCiAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICByZXR1cm4gJ3ZpZGVvJzsKICAgICAgfSAvLyDljLnphY0g6Z+z6aKRCgoKICAgICAgdmFyIHJhZGlvbGlzdCA9IFsnbXAzJywgJ3dhdicsICd3bXYnXTsKICAgICAgcmVzdWx0ID0gcmFkaW9saXN0LmZpbmQoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICByZXR1cm4gaXRlbSA9PT0gc3VmZml4OwogICAgICB9KTsKCiAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICByZXR1cm4gJ3JhZGlvJzsKICAgICAgfSAvLyDlhbbku5Yg5paH5Lu257G75Z6LCgoKICAgICAgcmV0dXJuICdvdGhlcic7CiAgICB9LAogICAgcHJldmlld0ZpbGU6IGZ1bmN0aW9uIHByZXZpZXdGaWxlKGl0ZW1zKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgaWYgKHRoaXMuZ2V0RmlsZVR5cGUoaXRlbXMub3JpZ2luRmlsZU5hbWUpID09PSAnZXhjZWwnKSB7CiAgICAgICAgdGhpcy4kbWVzc2FnZSh7CiAgICAgICAgICBtZXNzYWdlOiAn6K+l5paH5Lu25pqC5LiN5pSv5oyB6aKE6KeIJywKICAgICAgICAgIHR5cGU6ICd3YXJuaW5nJwogICAgICAgIH0pOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgdGhpcy5mdWxsc2NyZWVuTG9hZGluZyA9IFRleHRUcmFja0N1ZUxpc3Q7CgogICAgICBpZiAodGhpcy5nZXRGaWxlVHlwZShpdGVtcy5vcmlnaW5GaWxlTmFtZSkgPT09ICdpbWFnZScpIHsKICAgICAgICBwcmV2aWV3TWF0ZXJpYWxzKHsKICAgICAgICAgIGlkOiBpdGVtcy5pZAogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgICAgLy8gaWYgKHJlcy5kYXRhICE9IG51bGwpIHsKICAgICAgICAgIC8vICAgLy8g5Zu+54mH5Zyw5Z2A5Yid5aeL5YC85Li6YmFzZTY0LOe7meavj+S4qnVybOi9rOWMluaIkOWPr+a4suafk+eahOWcsOWdgAogICAgICAgICAgX3RoaXM0LmZ1bGxzY3JlZW5Mb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICB2YXIgZSA9ICdkYXRhOmltYWdlL3BuZztiYXNlNjQsJyArIHJlcy5kYXRhOwogICAgICAgICAgdmFyIGxpc3QgPSBbXTsgLy8g5bCG5Zu+54mH55qEdXJs5a2Y5YWl5LiA5Liq5pWw57uE5LitCgogICAgICAgICAgbGlzdC5wdXNoKGUpOyAvLyDlsIbmlbDnu4TlrZjlhaXliLB2dWV45Lit5ZyoYXBwLnZ1ZeS4reiwg+eUqOmihOiniAoKICAgICAgICAgIF90aGlzNC4kc3RvcmUuY29tbWl0KCdhcHAvQ0hBTkdFX0lNQUdFJywgbGlzdCk7IC8vIH0KCiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gY29uc29sZS5sb2coaXRlbXMuaWQpOwogICAgICAgIGRzLmdldE1hdGVyaWFQcm9wb3NlcmxMaXN0KHsKICAgICAgICAgIGlkOiBpdGVtcy5pZAogICAgICAgIH0pLnRoZW4oIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUocmVzKSB7CiAgICAgICAgICAgIHZhciBsaXN0LCBpLCBpbWdVcmw7CiAgICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzLmRhdGEuc3VjY2VzcyA9PT0gdHJ1ZSkpIHsKICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMzsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgbGlzdCA9IHJlcy5kYXRhLmRhdGEuaWRzOwogICAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX3JlZ2VuZXJhdG9yUnVudGltZS5rZXlzKGxpc3QpOwoKICAgICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgIGlmICgoX2NvbnRleHQudDEgPSBfY29udGV4dC50MCgpKS5kb25lKSB7CiAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGkgPSBfY29udGV4dC50MS52YWx1ZTsKICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNzsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM0LmdldEltZyhsaXN0W2ldLCAyKTsKCiAgICAgICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgICAgICBpbWdVcmwgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgICAgIGxpc3RbaV0gPSBpbWdVcmw7CiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgICAgIF90aGlzNC5mdWxsc2NyZWVuTG9hZGluZyA9IGZhbHNlOwoKICAgICAgICAgICAgICAgICAgICBfdGhpczQuJHN0b3JlLmNvbW1pdCgnYXBwL0NIQU5HRV9JTUFHRScsIGxpc3QpOwoKICAgICAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgICAgICB9KSk7CgogICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeCkgewogICAgICAgICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgfTsKICAgICAgICB9KCkpOwogICAgICB9CiAgICB9LAogICAgZ2V0SW1nOiBmdW5jdGlvbiBnZXRJbWcoaWQsIHR5cGUpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICAgICAgdmFyIHVybDsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHVybCA9IHR5cGUgPT09IDEgPyAib3JnL29yZGVyLWRvY3VtZW50LXByZXZpZXctaW1nLyIuY29uY2F0KGlkKSA6ICJvcmcvb3JkZXItcHJvcG9zZXItbWF0ZXJpYWwtcHJldmlldy13b3JkLWltZy8iLmNvbmNhdChpZCk7CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM1LiRheGlvcyh1cmwpLnRoZW4oIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHZhciBfcmVmMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKHJlcykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXMuc3VjY2VzcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCAnZGF0YTppbWFnZS9wbmc7YmFzZTY0LCcgKyByZXMuZGF0YSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gyKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWYyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9KCkpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQzLnNlbnQpOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBkZWxldGVNYXRlcmlhbHM6IGZ1bmN0aW9uIGRlbGV0ZU1hdGVyaWFscyh2YWwpIHsKICAgICAgdmFyIF90aGlzNiA9IHRoaXM7CgogICAgICB0aGlzLiRjb25maXJtKCfmraTmk43kvZzlsIbmsLjkuYXliKDpmaTor6Xmlofku7YsIOaYr+WQpue7p+e7rT8nLCAn5o+Q56S6JywgewogICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAn56Gu5a6aJywKICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAn5Y+W5raIJywKICAgICAgICB0eXBlOiAnd2FybmluZycKICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgRGVsZXRlTWF0ZXJpYWxzKHsKICAgICAgICAgIGlkOiB2YWwuaWQKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgIGlmIChyZXMuc3VjY2VzcykgewogICAgICAgICAgICBfdGhpczYuJG1lc3NhZ2UoewogICAgICAgICAgICAgIG1lc3NhZ2U6ICfmlofku7blt7LliKDpmaQnLAogICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIF90aGlzNi5nZXRMaXN0KCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczYuJG1lc3NhZ2UoewogICAgICAgICAgdHlwZTogJ2luZm8nLAogICAgICAgICAgbWVzc2FnZTogJ+W3suWPlua2iOWIoOmZpCcKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LAogICAgcHJpbnRNYXRlcmlhbDogZnVuY3Rpb24gcHJpbnRNYXRlcmlhbCh2YWwpIHsKICAgICAgdmFyIF90aGlzNyA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgICAgdmFyIHN0YXR1cywgX3N0YXR1czsKCiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAoIShfdGhpczcuZ2V0RmlsZVR5cGUodmFsLm9yaWdpbkZpbGVOYW1lKSAhPT0gJ2ltYWdlJyAmJiBfdGhpczcuZ2V0RmlsZVR5cGUodmFsLm9yaWdpbkZpbGVOYW1lKSAhPT0gJ3dvcmQnKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF90aGlzNy4kbWVzc2FnZSh7CiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICfor6Xmlofku7bmmoLkuI3mlK/mjIHmiZPljbAnLAogICAgICAgICAgICAgICAgICB0eXBlOiAnd2FybmluZycKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCBmYWxzZSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIGlmICghKF90aGlzNy5nZXRGaWxlVHlwZSh2YWwub3JpZ2luRmlsZU5hbWUpID09PSAnaW1hZ2UnKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDEwOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gcHJpbnRJbml0KDEsIHsKICAgICAgICAgICAgICAgICAgaWQ6IHZhbC5pZAogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIHN0YXR1cyA9IF9jb250ZXh0NC5zZW50OwoKICAgICAgICAgICAgICAgIGlmIChzdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoKTsKICAgICAgICAgICAgICAgICAgfSwgNTAwKTsKICAgICAgICAgICAgICAgIH0gLy8gcHJldmlld01hdGVyaWFscyh7IGlkOiB2YWwuaWQgfSkudGhlbigocmVzKSA9PiB7CiAgICAgICAgICAgICAgICAvLyAgIGNvbnNvbGUubG9nKHJlcykKICAgICAgICAgICAgICAgIC8vICAgLy8gaWYgKHJlcy5kYXRhICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIC8vICAgLy8gICAvLyDlm77niYflnLDlnYDliJ3lp4vlgLzkuLpiYXNlNjQs57uZ5q+P5LiqdXJs6L2s5YyW5oiQ5Y+v5riy5p+T55qE5Zyw5Z2ACiAgICAgICAgICAgICAgICAvLyAgIHZhciBlID0gJ2RhdGE6aW1hZ2UvcG5nO2Jhc2U2NCwnICsgcmVzLmRhdGEKICAgICAgICAgICAgICAgIC8vICAgaW5uZXIgPQogICAgICAgICAgICAgICAgLy8gICAgICI8ZGl2PjxpbWcgc3JjPSciICsKICAgICAgICAgICAgICAgIC8vICAgICBlICsKICAgICAgICAgICAgICAgIC8vICAgICAiJy8gc3R5bGU9J21heC13aWR0aDoxMDAlO2hlaWdodDphdXRvJz48L2Rpdj4iIC8vIOWGjeWwhuaJgOimgeaJk+WNsOWMuuWfn+WGheWuuei1i+WAvOe7mWJvZHkKICAgICAgICAgICAgICAgIC8vICAgLy8gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2lmcmFtZScpWzBdLmlubmVySFRNTCA9IGlubmVyCiAgICAgICAgICAgICAgICAvLyAgIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID0gaW5uZXIgLy8g5YaN5bCG5omA6KaB5omT5Y2w5Yy65Z+f5YaF5a656LWL5YC857uZYm9keQogICAgICAgICAgICAgICAgLy8gICAvLyBkb2N1bWVudC5ib2R5LnByaW50QXJlYSgpOwogICAgICAgICAgICAgICAgLy8gICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgLy8gICAgIHdpbmRvdy5wcmludCgpIC8vIOiwg+eUqOWFqOmDqOaJk+WNsOS6i+S7tgogICAgICAgICAgICAgICAgLy8gICAgIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID0gb2xkSHRtbCAvLyDlsIZib2R55YaF5a655YaN6L+U5Zue5Y6f6aG16Z2iCiAgICAgICAgICAgICAgICAvLyAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpIC8vIOaJk+WNsOWPlua2iOWQjuWIt+aWsOmhtemdoumYsuatouaMiemSruS4jeiDveeCueWHuwogICAgICAgICAgICAgICAgLy8gICB9LCAxMDApCiAgICAgICAgICAgICAgICAvLyAgIC8vIH0KICAgICAgICAgICAgICAgIC8vIH0pCgoKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMTQ7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICByZXR1cm4gcHJpbnRJbml0KDMsIHsKICAgICAgICAgICAgICAgICAgaWQ6IHZhbC5pZAogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgICBfc3RhdHVzID0gX2NvbnRleHQ0LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKF9zdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoKTsKICAgICAgICAgICAgICAgICAgfSwgNTAwKTsKICAgICAgICAgICAgICAgIH0gLy8gZHMuZ2V0TWF0ZXJpYVByb3Bvc2VybExpc3QoeyBpZDogdmFsLmlkIH0pLnRoZW4oYXN5bmMocmVzKSA9PiB7CiAgICAgICAgICAgICAgICAvLyAgIGNvbnNvbGUubG9nKHJlcykKICAgICAgICAgICAgICAgIC8vICAgaWYgKHJlcy5kYXRhLnN1Y2Nlc3MgPT09IHRydWUpIHsKICAgICAgICAgICAgICAgIC8vICAgICBjb25zdCBsaXN0ID0gcmVzLmRhdGEuZGF0YS5pZHMKICAgICAgICAgICAgICAgIC8vICAgICBmb3IgKGNvbnN0IGkgaW4gbGlzdCkgewogICAgICAgICAgICAgICAgLy8gICAgICAgY29uc3QgaW1nVXJsID0gYXdhaXQgdGhpcy5nZXRJbWcobGlzdFtpXSwgMikKICAgICAgICAgICAgICAgIC8vICAgICAgIGxpc3RbaV0gPSBpbWdVcmwKICAgICAgICAgICAgICAgIC8vICAgICB9CiAgICAgICAgICAgICAgICAvLyAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgICAgICAgICAvLyAgICAgICBpbm5lciArPQogICAgICAgICAgICAgICAgLy8gICAgICAgICAiPGRpdj48aW1nIHNyYz0nIiArCiAgICAgICAgICAgICAgICAvLyAgICAgICAgIGxpc3RbaW5kZXhdICsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgIicgc3R5bGU9J2hlaWdodDoxMDAlO3dpZHRoOjEwMCUnLz48L2Rpdj4iCiAgICAgICAgICAgICAgICAvLyAgICAgfQogICAgICAgICAgICAgICAgLy8gICAgIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID0gaW5uZXIKICAgICAgICAgICAgICAgIC8vICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgLy8gICAgICAgd2luZG93LnByaW50KCkgLy8g6LCD55So5YWo6YOo5omT5Y2w5LqL5Lu2CiAgICAgICAgICAgICAgICAvLyAgICAgICBkb2N1bWVudC5ib2R5LmlubmVySFRNTCA9IG9sZEh0bWwgLy8g5bCGYm9keeWGheWuueWGjei/lOWbnuWOn+mhtemdogogICAgICAgICAgICAgICAgLy8gICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpIC8vIOaJk+WNsOWPlua2iOWQjuWIt+aWsOmhtemdoumYsuatouaMiemSruS4jeiDveeCueWHuwogICAgICAgICAgICAgICAgLy8gICAgIH0sIDEwMCkKICAgICAgICAgICAgICAgIC8vICAgfQogICAgICAgICAgICAgICAgLy8gfSkKCgogICAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTQpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBiYXRjaERvd25sb2FkOiBmdW5jdGlvbiBiYXRjaERvd25sb2FkKCkgewogICAgICB2YXIgX3RoaXM4ID0gdGhpczsKCiAgICAgIHZhciBpZHMgPSAnJzsKICAgICAgdmFyIHRoID0gMDsKICAgICAgdmFyIHNpbmdsZUZpbGVOYW1lID0gJyc7CgogICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5tYXRlcmlhbExpc3REYXRhLmxlbmd0aDsgaW5kZXgrKykgewogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5tYXRlcmlhbExpc3REYXRhW2luZGV4XS5vcmRlck5lZWRNYXRlcmlhbERUT1MubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGZvciAodmFyIG0gPSAwOyBtIDwgdGhpcy5tYXRlcmlhbExpc3REYXRhW2luZGV4XS5vcmRlck5lZWRNYXRlcmlhbERUT1NbaV0ub3JkZXJQcm9wb3Nlck1hdGVyaWFsRFRPUy5sZW5ndGg7IG0rKykgewogICAgICAgICAgICBpZHMgKz0gdGhpcy5tYXRlcmlhbExpc3REYXRhW2luZGV4XS5vcmRlck5lZWRNYXRlcmlhbERUT1NbaV0ub3JkZXJQcm9wb3Nlck1hdGVyaWFsRFRPU1ttXS5pZCArICcsJzsKICAgICAgICAgICAgdGgrKzsKICAgICAgICAgICAgc2luZ2xlRmlsZU5hbWUgPSB0aGlzLm1hdGVyaWFsTGlzdERhdGFbaW5kZXhdLm9yZGVyTmVlZE1hdGVyaWFsRFRPU1tpXS5vcmRlclByb3Bvc2VyTWF0ZXJpYWxEVE9TW21dLm9yaWdpbkZpbGVOYW1lOyAvLyBjb25zb2xlLmxvZyh0aGlzLm1hdGVyaWFsTGlzdERhdGFbaW5kZXhdLm9yZGVyTmVlZE1hdGVyaWFsRFRPU1tpXS5vcmRlclByb3Bvc2VyTWF0ZXJpYWxEVE9TW21dKQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgaWRzID0gaWRzLnN1YnN0cmluZygwLCBpZHMubGVuZ3RoIC0gMSk7CiAgICAgIHZhciBmaWxlTmFtZSA9IHRoID4gMSA/ICIiLmNvbmNhdCh0aGlzLmJhc3VlRGF0YS5idXNpbmVzc1R5cGVEZXNjKS5jb25jYXQodGhpcy5iYXN1ZURhdGEub3JkZXJOdW0sICIgIikuY29uY2F0KHRoaXMuZ2V0VGltZSgpLCAiLnppcCIpIDogc2luZ2xlRmlsZU5hbWU7CgogICAgICBpZiAoaWRzID09PSAnJykgewogICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ+W9k+WJjeiuouWNleayoeacieivgeaNruadkOaWmScpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgdGhpcy4kYXhpb3MoJ29yZy9kb3dubG9hZC1tYXRlcmlhbCcsIHsKICAgICAgICBvcmRlcklkOiB0aGlzLm9yZGVySWQsCiAgICAgICAgZG9jdW1lbnRJZDogaWRzLAogICAgICAgIGRvd25sb2FkVHlwZTogMgogICAgICB9LCB7CiAgICAgICAgcmVzcG9uc2VUeXBlOiAnYmxvYicKICAgICAgfSkudGhlbihmdW5jdGlvbiAoYmxvYikgewogICAgICAgIF90aGlzOC5zYXZlQXMoYmxvYiwgZmlsZU5hbWUpOwogICAgICB9KTsKICAgIH0sCiAgICBnZXRUaW1lOiBmdW5jdGlvbiBnZXRUaW1lKCkgewogICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7CiAgICAgIHZhciBzZXBlcmF0b3IxID0gJy4nOyAvLyDlubTmnIjml6XkuYvpl7TnmoTliIbpmpQKCiAgICAgIHZhciBzZXBlcmF0b3IyID0gJzonOyAvLyDml7bliIbnp5LkuYvpl7TnmoTliIbpmpQKCiAgICAgIHZhciBtb250aCA9IGRhdGUuZ2V0TW9udGgoKSArIDEgPCAxMCA/ICcwJyArIChkYXRlLmdldE1vbnRoKCkgKyAxKSA6IGRhdGUuZ2V0TW9udGgoKSArIDE7IC8vIOiOt+WPluaciCzlpoLmnpzlsI/kuo4xMCzliY3pnaLooaXkuKowCgogICAgICB2YXIgc3RyRGF0ZSA9IGRhdGUuZ2V0RGF0ZSgpIDwgMTAgPyAnMCcgKyBkYXRlLmdldERhdGUoKSA6IGRhdGUuZ2V0RGF0ZSgpOyAvLyDojrflj5bml6Us5aaC5p6c5bCP5LqOMTAs5YmN6Z2i6KGl5LiqMAoKICAgICAgdmFyIHN0ckhvdXJzID0gZGF0ZS5nZXRIb3VycygpIDwgMTAgPyAnMCcgKyBkYXRlLmdldEhvdXJzKCkgOiBkYXRlLmdldEhvdXJzKCk7IC8vIOiOt+WPluWwj+aXtizlpoLmnpzlsI/kuo4xMCzliY3pnaLooaXkuKowCgogICAgICB2YXIgc3RyTWludXRlcyA9IGRhdGUuZ2V0TWludXRlcygpIDwgMTAgPyAnMCcgKyBkYXRlLmdldE1pbnV0ZXMoKSA6IGRhdGUuZ2V0TWludXRlcygpOyAvLyDojrflj5bliIYs5aaC5p6c5bCP5LqOMTAs5YmN6Z2i6KGl5LiqMAoKICAgICAgdmFyIHN0clNlY29uZHMgPSBkYXRlLmdldFNlY29uZHMoKSA8IDEwID8gJzAnICsgZGF0ZS5nZXRTZWNvbmRzKCkgOiBkYXRlLmdldFNlY29uZHMoKTsgLy8g6I635Y+W56eSLOWmguaenOWwj+S6jjEwLOWJjemdouihpeS4qjAKCiAgICAgIHZhciBjdXJyZW50ZGF0ZSA9IGRhdGUuZ2V0RnVsbFllYXIoKSArIHNlcGVyYXRvcjEgKyBtb250aCArIHNlcGVyYXRvcjEgKyBzdHJEYXRlICsgJyAnICsgc3RySG91cnMgKyBzZXBlcmF0b3IyICsgc3RyTWludXRlcyArIHNlcGVyYXRvcjIgKyBzdHJTZWNvbmRzOyAvLyDmi7zmjqXkuIDkuIsKCiAgICAgIHJldHVybiBjdXJyZW50ZGF0ZTsgLy8g6L+U5ZueCiAgICB9LAogICAgdXBsb2FkRmlsZTogZnVuY3Rpb24gdXBsb2FkRmlsZShlKSB7CiAgICAgIHZhciBfdGhpczkgPSB0aGlzOwoKICAgICAgaWYgKHRoaXMuZm9ybUxhYmVsQWxpZ24udHlwZSA9PT0gJycpIHsKICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfor7flhYjpgInmi6npnIDopoHkuIrkvKDmnZDmlpnnmoTnsbvlnosnKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgZmlsZSA9IGUuZmlsZTsKICAgICAgICB2YXIgZmlsZVR5cGUgPSBmaWxlLnR5cGU7IC8vIOaWh+S7tuexu+WeiwoKICAgICAgICB2YXIgdHlwZUxpc3QgPSBbJ2ltYWdlL2pwZWcnLCAnaW1hZ2UvanBnJywgJ2ltYWdlL3BuZycsICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldCcsICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudCcsICdhcHBsaWNhdGlvbi9wZGYnLCAnYXBwbGljYXRpb24vbXN3b3JkJ107CiAgICAgICAgdmFyIGlzSW1hZ2UgPSB0eXBlTGlzdC5pbmRleE9mKGZpbGVUeXBlKSAhPT0gLTE7IC8vIOmZkOWItuagvOW8jwoKICAgICAgICB2YXIgaXNMdDE1TSA9IGZpbGUuc2l6ZSAvIDEwMjQgLyAxMDI0IDwgMTU7IC8vIOaWh+S7tuWkp+WwjwoKICAgICAgICBpZiAodGhpcy5nZXRGaWxlVHlwZShlLmZpbGUubmFtZSkgIT09ICdpbWFnZScgJiYgdGhpcy5nZXRGaWxlVHlwZShlLmZpbGUubmFtZSkgIT09ICdwZGYnICYmIHRoaXMuZ2V0RmlsZVR5cGUoZS5maWxlLm5hbWUpICE9PSAnd29yZCcpIHsKICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ+ivpeaWh+S7tuagvOW8j+S4jeaUr+aMge+8jOivt+S4iuS8oC5kb2MucG5nLmRvY3guanBnLmpwZWcucGRm5omp5bGV5ZCN5paH5Lu2Jyk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpZiAoIWlzTHQxNU0pIHsKICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ+S4iuS8oOaWh+S7tueahOWkp+Wwj+W6lOWwj+S6jjE1TScpOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgaWYgKHRoaXMuaW1nVVJMRGF0YS5sZW5ndGggPiAzMCkgewogICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcign5LiK5Lyg5paH5Lu25LiN6IO96LaF6L+H5LiJ5Y2B5Lu9Jyk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTsKICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBmaWxlKTsKICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGVUeXBlJywgJ29yZGVyLW1hdGVyaWFsJyk7CiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdvcmRlcklkJywgdGhpcy5vcmRlcklkKTsKICAgICAgICB0aGlzLiRheGlvcygnb3JnL3NpbmdsZS1maWxlLXVwbG9hZCcsIGZvcm1EYXRhLCB7CiAgICAgICAgICBtZXRob2Q6ICdwb3N0JwogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgICAgaWYgKHJlcy5zdWNjZXNzKSB7CiAgICAgICAgICAgIHZhciB1cmwgPSAnJzsKCiAgICAgICAgICAgIGlmIChfdGhpczkuZ2V0RmlsZVR5cGUocmVzLmRhdGEub3JpZ2luYWxGaWxlbmFtZSkgPT09ICd3b3JkJykgewogICAgICAgICAgICAgIHVybCA9IHJlcXVpcmUoJ0AvYXNzZXRzL2ltZ3MvRE9DWC5wbmcnKTsKCiAgICAgICAgICAgICAgX3RoaXM5LmltZ1VSTERhdGEucHVzaCh1cmwpOwogICAgICAgICAgICB9IGVsc2UgaWYgKF90aGlzOS5nZXRGaWxlVHlwZShyZXMuZGF0YS5vcmlnaW5hbEZpbGVuYW1lKSA9PT0gJ3BkZicpIHsKICAgICAgICAgICAgICB1cmwgPSByZXF1aXJlKCdAL2Fzc2V0cy9pbWdzL3BkZi5wbmcnKTsKCiAgICAgICAgICAgICAgX3RoaXM5LmltZ1VSTERhdGEucHVzaCh1cmwpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHZhciBVUkwgPSB3aW5kb3cuVVJMIHx8IHdpbmRvdy53ZWJraXRVUkw7CiAgICAgICAgICAgICAgdmFyIGltZ1VSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZSk7IC8vIOacrOWcsHVybAoKICAgICAgICAgICAgICBfdGhpczkuaW1nVVJMRGF0YS5wdXNoKGltZ1VSTCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBkYXRhID0gcmVzLmRhdGE7CiAgICAgICAgICAgIHZhciBvdSA9IHsKICAgICAgICAgICAgICBwcm9wb3NlcklkOiBlLmRhdGEucHJvcG9zZXJJZCwKICAgICAgICAgICAgICBvcmRlcklkOiBfdGhpczkub3JkZXJJZCwKICAgICAgICAgICAgICBtYXRlcmlhbENvZGU6IGUuZGF0YS5tYXRlcmlhbENvZGUsCiAgICAgICAgICAgICAgbWF0ZXJpYWxGaWxlOiBKU09OLnN0cmluZ2lmeShkYXRhKSwKICAgICAgICAgICAgICBmaWxlTmFtZTogZGF0YS5vcmlnaW5hbEZpbGVuYW1lLAogICAgICAgICAgICAgIG9yaWdpbkZpbGVOYW1lOiBkYXRhLm9yaWdpbmFsRmlsZW5hbWUsCiAgICAgICAgICAgICAgZmlsZUxlbmd0aDogZmlsZS5zaXplLAogICAgICAgICAgICAgIGNyZWF0ZVRpbWU6IG51bGwsCiAgICAgICAgICAgICAgc3RhdHVzOiAxCiAgICAgICAgICAgIH07CgogICAgICAgICAgICBfdGhpczkudXBsb2FkRGF0YS5wdXNoKG91KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF90aGlzOS4kbWVzc2FnZS5lcnJvcign5LiK5Lyg5paH5Lu25aSx6LSlJyk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBjaGFuZ2VUeXBlOiBmdW5jdGlvbiBjaGFuZ2VUeXBlKHZhbCkgewogICAgICB2YXIgdSA9IHt9OwoKICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMub3B0aW9ucykgewogICAgICAgIGlmICh0aGlzLm9wdGlvbnNba2V5XS5pZCA9PT0gdmFsKSB7CiAgICAgICAgICB1ID0gdGhpcy5vcHRpb25zW2tleV07CiAgICAgICAgfQogICAgICB9CgogICAgICB0aGlzLm1hdGVyaWFsRGF0YSA9IHU7CiAgICB9LAogICAgdXBsb2FkTWF0ZXJpYWxDb25maXJtOiBmdW5jdGlvbiB1cGxvYWRNYXRlcmlhbENvbmZpcm0oKSB7CiAgICAgIHZhciBfdGhpczEwID0gdGhpczsKCiAgICAgIGlmICh0aGlzLmZvcm1MYWJlbEFsaWduLnR5cGUgPT09ICcnKSB7CiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcign6K+35YWI6YCJ5oup6ZyA6KaB5LiK5Lyg5p2Q5paZ55qE57G75Z6LJyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKHRoaXMudXBsb2FkRGF0YS5sZW5ndGggPiAwKSB7CiAgICAgICAgICBhZGRBcHBsaWNhdGlvbk1hdGVyaWFsKHRoaXMudXBsb2FkRGF0YSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICAgIGlmIChyZXMuc3VjY2VzcykgewogICAgICAgICAgICAgIF90aGlzMTAuZ2V0TGlzdCgpOwoKICAgICAgICAgICAgICBfdGhpczEwLnVwbG9hZE1hdGVyaWFsRGlhbG9nVmlzaWJsZSA9IGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcign6K+35LiK5Lyg5paH5Lu2Jyk7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgZGVsZXRlSW1hZ2U6IGZ1bmN0aW9uIGRlbGV0ZUltYWdlKHZhbCkgewogICAgICB0aGlzLmltZ1VSTERhdGEuc3BsaWNlKHZhbCwgMSk7CiAgICB9CiAgfQp9Ow=="},null]}